<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Alcatraz 的安装与使用</title>
    <url>/2016/04/22/Alcatraz/</url>
    <content><![CDATA[<h3 id="什么是-Alcatraz-？"><a href="#什么是-Alcatraz-？" class="headerlink" title="什么是 Alcatraz ？"></a>什么是 Alcatraz ？</h3><blockquote>
<p>Alcatraz is an open-source package manager for Xcode 7+. It lets you discover and install plugins, templates and color schemes without the need for manually cloning or copying files. It installs itself as a part of Xcode and it feels like home.<br><a href="https://github.com/alcatraz/Alcatraz">Alcatraz</a> 是一款在 Xcode 7+ 以上用于管理开源包的工具。它可以帮你查找或安装 Xcode 插件、模板、颜色主题，不需要认为的克隆或拷贝文件，它就像是 Xcode 的一部分。</p>
</blockquote>
<span id="more"></span>

<p><strong>（注：Alcatraz 要求 Xcode 版本号为 7 以上）</strong></p>
<h3 id="Alcatraz-的安装"><a href="#Alcatraz-的安装" class="headerlink" title="Alcatraz 的安装"></a>Alcatraz 的安装</h3><ul>
<li>打开终端，在终端中输入：<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ curl -fsSL https:&#x2F;&#x2F;raw.github.com&#x2F;alcatraz&#x2F;Alcatraz&#x2F;master&#x2F;Scripts&#x2F;install.sh | sh</code></pre></li>
<li>安装成功后显示如下，并重启 Xcode<br><img src="http://ww3.sinaimg.cn/large/006tNc79gw1f784eek7d0j30iy0dajue.jpg" alt="安装"></li>
<li>重启Xcode会提示你是否加载 Bundle，选择 <em><strong>Load Bundle</strong></em></li>
<li>按 <code>shift + command + 9</code> 或者 <code>Windows --&gt; Package Manager</code> ，便可打开 Alcatraz 的图形界面</li>
</ul>
<p><img src="http://ww1.sinaimg.cn/large/006tNc79gw1f784ewdyxmj30i90hvq4y.jpg" alt="图形界面"></p>
<h3 id="Alcatraz-的卸载"><a href="#Alcatraz-的卸载" class="headerlink" title="Alcatraz 的卸载"></a>Alcatraz 的卸载</h3><ul>
<li>打开终端，在终端中输入：<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ rm -rf ~&#x2F;Library&#x2F;Application\ Support&#x2F;Developer&#x2F;Shared&#x2F;Xcode&#x2F;Plug-ins&#x2F;Alcatraz.xcplugin</code></pre></li>
</ul>
<h3 id="Alcatraz-的使用"><a href="#Alcatraz-的使用" class="headerlink" title="Alcatraz 的使用"></a>Alcatraz 的使用</h3><ul>
<li>输入想要使用的插件，以 <code>KSImagedNamed</code> 为例，点击 <strong>INSTALL</strong> 便可安装<br><img src="http://ww4.sinaimg.cn/large/006tNc79gw1f784f87k07j30i90j3dh7.jpg" alt="install"></li>
<li>在项目中输入 <code>[UIImage imageNamed:]</code> 验证：<br><img src="http://ww1.sinaimg.cn/large/006tNc79gw1f784fo10mej30cj04kwfe.jpg" alt="KSImagedNamed"></li>
<li>Alcatraz 安装的插件都会下载到 <code>~/Library/Application Support/Alcatraz/Plug-ins</code> 文件夹下<br><img src="http://ww1.sinaimg.cn/large/006tNc79gw1f784g01elmj305k0313yn.jpg" alt="插件"></li>
<li>因此若要删除不使用的插件，可直接在该文件夹下删除，或者在图形界面点击 <strong>REMOVE</strong> ，删除所有插件：<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ rm -rf ~&#x2F;Library&#x2F;Application\ Support&#x2F;Alcatraz&#x2F;</code></pre></li>
</ul>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>Alcatraz</tag>
      </tags>
  </entry>
  <entry>
    <title>[Python] ssl.SSLError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed</title>
    <url>/2021/07/22/CERTIFICATE-VERIFY-FAILED/</url>
    <content><![CDATA[<p>解决通过官网安装包安装 Python，执行 <code>pip install</code> 时报 ssl 证书验证失败错误：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssl.SSLError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed</code></pre>

<span id="more"></span>

<p>按安装目录下 <code>ReadMe.rtf</code> 中说明双击执行同目录下 <code>Install Certificates.command</code> 文件：</p>
<img src="https://image.jqz3.tech/blog/20210722091112.png?imageView2/0/q/75|watermark/2/text/aHR0cHM6Ly9qcXozLnRlY2g=/font/bWljcm9zb2Z0IHlhaGVp/fontsize/360/fill/I0ZGRkZGRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" style="zoom:50%;" />

<img src="https://image.jqz3.tech/blog/20210722095536.png?imageView2/0/q/75|watermark/2/text/aHR0cHM6Ly9qcXozLnRlY2g=/font/bWljcm9zb2Z0IHlhaGVp/fontsize/360/fill/I0ZGRkZGRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" style="zoom:50%;" />

<p>参考资料：<a href="https://stackoverflow.com/questions/42098126/mac-osx-python-ssl-sslerror-ssl-certificate-verify-failed-certificate-verify/42098127#42098127">https://stackoverflow.com/questions/42098126/mac-osx-python-ssl-sslerror-ssl-certificate-verify-failed-certificate-verify/42098127#42098127</a></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>问题解决</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>让 NS&amp;UICollectionView 对齐</title>
    <url>/2020/05/20/JQCollectionViewAlignLayout/</url>
    <content><![CDATA[<h1 id="JQCollectionViewAlignLayout"><a href="#JQCollectionViewAlignLayout" class="headerlink" title="JQCollectionViewAlignLayout"></a>JQCollectionViewAlignLayout</h1><p>一个基于流式布局 (flow layout) 的自定义布局对象。支持设置 <code>NS&amp;UICollectionView</code> 水平及竖直方向的对齐方式，以及从右到左及从左到右的排列顺序。</p>
<span id="more"></span>

<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>可以通过 <code>git clone</code> 仓库，并在 <code>Examples</code> 文件夹下执行 <code>pod install</code>，然后用 Xcode 打开 <code>JQCollectionViewAlignLayout.xcworkspace</code> 并选择下列中的一个 scheme 运行对应的示例项目。</p>
<p><img src="https://github.com/Coder-ZJQ/JQCollectionViewAlignLayout/blob/master/images/schemes.png?raw=true"></p>
<h3 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h3><p><img src="https://github.com/Coder-ZJQ/JQCollectionViewAlignLayout/blob/master/images/eg-ios.png?raw=true"></p>
<h3 id="macOS"><a href="#macOS" class="headerlink" title="macOS"></a>macOS</h3><p><img src="https://github.com/Coder-ZJQ/JQCollectionViewAlignLayout/blob/master/images/eg-osx.png?raw=true"></p>
<h3 id="tvOS"><a href="#tvOS" class="headerlink" title="tvOS"></a>tvOS</h3><p><img src="https://github.com/Coder-ZJQ/JQCollectionViewAlignLayout/blob/master/images/eg-tvos.png?raw=true"></p>
<h2 id="对齐方式及排列方向"><a href="#对齐方式及排列方向" class="headerlink" title="对齐方式及排列方向"></a>对齐方式及排列方向</h2><table>
<thead>
<tr>
<th align="center">水平方向</th>
<th align="center">示例图片</th>
</tr>
</thead>
<tbody><tr>
<td align="center">默认流式<br />(<code>JQCollectionViewItemsHorizontalAlignmentFlow</code>)</td>
<td align="center"><img src="https://github.com/Coder-ZJQ/JQCollectionViewAlignLayout/blob/master/images/h-flow.png?raw=true"></td>
</tr>
<tr>
<td align="center">居左<br />(<code>JQCollectionViewItemsHorizontalAlignmentLeft</code>)</td>
<td align="center"><img src="https://github.com/Coder-ZJQ/JQCollectionViewAlignLayout/blob/master/images/h-left.png?raw=true"></td>
</tr>
<tr>
<td align="center">居中<br />(<code>JQCollectionViewItemsHorizontalAlignmentCenter</code>)</td>
<td align="center"><img src="https://github.com/Coder-ZJQ/JQCollectionViewAlignLayout/blob/master/images/h-center.png?raw=true"></td>
</tr>
<tr>
<td align="center">居右<br />(<code>JQCollectionViewItemsHorizontalAlignmentRight</code>)</td>
<td align="center"><img src="https://github.com/Coder-ZJQ/JQCollectionViewAlignLayout/blob/master/images/h-right.png?raw=true"></td>
</tr>
<tr>
<td align="center">平铺填充<br />(<code>JQCollectionViewItemsHorizontalAlignmentFlowFilled</code>)</td>
<td align="center"><img src="https://github.com/Coder-ZJQ/JQCollectionViewAlignLayout/blob/master/images/h-flowfilled.png?raw=true"></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">竖直方向</th>
<th align="center">示例图片</th>
</tr>
</thead>
<tbody><tr>
<td align="center">默认居中<br />(<code>JQCollectionViewItemsVerticalAlignmentCenter</code>)</td>
<td align="center"><img src="https://github.com/Coder-ZJQ/JQCollectionViewAlignLayout/blob/master/images/v-center.png?raw=true"></td>
</tr>
<tr>
<td align="center">顶部对齐<br />(<code>JQCollectionViewItemsVerticalAlignmentTop</code>)</td>
<td align="center"><img src="https://github.com/Coder-ZJQ/JQCollectionViewAlignLayout/blob/master/images/v-top.png?raw=true"></td>
</tr>
<tr>
<td align="center">底部对齐<br />(<code>JQCollectionViewItemsVerticalAlignmentBottom</code>)</td>
<td align="center"><img src="https://github.com/Coder-ZJQ/JQCollectionViewAlignLayout/blob/master/images/v-bottom.png?raw=true"></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">排列方向</th>
<th align="center">示例图片</th>
</tr>
</thead>
<tbody><tr>
<td align="center">默认从左到右<br />(<code>JQCollectionViewItemsDirectionLTR</code>)</td>
<td align="center"><img src="https://github.com/Coder-ZJQ/JQCollectionViewAlignLayout/blob/master/images/d-ltr.png?raw=true"></td>
</tr>
<tr>
<td align="center">从右到左<br />(<code>JQCollectionViewItemsDirectionRTL</code>)</td>
<td align="center"><img src="https://github.com/Coder-ZJQ/JQCollectionViewAlignLayout/blob/master/images/d-rtl.png?raw=true"></td>
</tr>
</tbody></table>
<h2 id="系统要求"><a href="#系统要求" class="headerlink" title="系统要求"></a>系统要求</h2><p>iOS 6.0 +</p>
<p>macOS 10.11 +</p>
<p>tvOS 9.0 +</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><code>JQCollectionViewAlignLayout </code> 可以通过 <a href="http://cocoapods.org/">CocoaPods</a> 安装，只需在你的 Podfile 里加上下面这行：</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">pod &#39;JQCollectionViewAlignLayout&#39;</code></pre>



<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h4 id="第一步：使用-JQCollectionViewAlignLayout-初始化-collection-view"><a href="#第一步：使用-JQCollectionViewAlignLayout-初始化-collection-view" class="headerlink" title="第一步：使用 JQCollectionViewAlignLayout 初始化 collection view"></a>第一步：使用 <code>JQCollectionViewAlignLayout</code> 初始化 collection view</h4><ul>
<li>可以像下面通过代码的方式:</li>
</ul>
<pre class="line-numbers language-objectivec" data-language="objectivec"><code class="language-objectivec">&#x2F;&#x2F; UICollectionView
JQCollectionViewAlignLayout *layout &#x3D; [[JQCollectionViewAlignLayout alloc] init];
UICollectionView *collectionView &#x3D; [[UICollectionView alloc] initWithFrame:self.view.bounds collectionViewLayout:layout];

&#x2F;&#x2F; NSCollectionView
JQCollectionViewAlignLayout *layout &#x3D; [[JQCollectionViewAlignLayout alloc] init];
NSCollectionView *collectionView &#x3D; ...;
collectionView.layout &#x3D; layout;</code></pre>
<ul>
<li>也可以像下面通过在 Interface Builder 中设置:</li>
</ul>
<p><img src="https://github.com/Coder-ZJQ/JQCollectionViewAlignLayout/blob/master/images/ib-setup.png?raw=true"></p>
<h4 id="第二步：设置对齐方式及排列方向"><a href="#第二步：设置对齐方式及排列方向" class="headerlink" title="第二步：设置对齐方式及排列方向"></a>第二步：设置对齐方式及排列方向</h4><ul>
<li>可以像下面通过 property 为所有 section 设置:</li>
</ul>
<pre class="line-numbers language-objectivec" data-language="objectivec"><code class="language-objectivec">layout.itemsHorizontalAlignment &#x3D; JQCollectionViewItemsHorizontalAlignmentLeft;
layout.itemsVerticalAlignment &#x3D; JQCollectionViewItemsVerticalAlignmentCenter;
layout.itemsDirection &#x3D; JQCollectionViewItemsDirectionLTR;</code></pre>

<ul>
<li>也可以像下面通过 protocol 为每个 section设置:</li>
</ul>
<pre class="line-numbers language-objectivec" data-language="objectivec"><code class="language-objectivec">&#x2F;&#x2F; 1. 遵循 JQCollectionViewAlignLayoutDelegate 协议
@interface JQViewController () &lt; UICollectionViewDataSource, JQCollectionViewAlignLayoutDelegate&gt;

@end

@implementation JQViewController
&#x2F;&#x2F; 2. 实现对应协议方法
- (JQCollectionViewItemsHorizontalAlignment)collectionView:(UICollectionView *)collectionView layout:(JQCollectionViewAlignLayout *)layout itemsHorizontalAlignmentInSection:(NSInteger)section &#123;
  &#x2F;&#x2F; 返回 JQCollectionViewItemsHorizontalAlignment 枚举以设置水平对齐方式
&#125;

- (JQCollectionViewItemsVerticalAlignment)collectionView:(UICollectionView *)collectionView layout:(JQCollectionViewAlignLayout *)layout itemsVerticalAlignmentInSection:(NSInteger)section &#123;
  &#x2F;&#x2F; 返回 JQCollectionViewItemsVerticalAlignment 枚举以设置竖直对齐方式
&#125;

- (JQCollectionViewItemsDirection)collectionView:(UICollectionView *)collectionView layout:(JQCollectionViewAlignLayout *)layout itemsDirectionInSection:(NSInteger)section &#123;
  &#x2F;&#x2F; 返回 JQCollectionViewItemsDirection 枚举以设置排列方向
&#125;

@end</code></pre>

<p><em>(剩下的使用与 <code>NS&amp;UICollectionViewFlowLayout</code> 一致，也可打开<a href="./Examples">示例项目</a>查看更多细节)</em></p>
<h2 id="作者"><a href="#作者" class="headerlink" title="作者"></a>作者</h2><p>coder-zjq, <a href="mailto:&#122;&#106;&#113;&#95;&#x6a;&#x6f;&#107;&#x65;&#x72;&#64;&#x31;&#54;&#51;&#46;&#x63;&#x6f;&#x6d;">&#122;&#106;&#113;&#95;&#x6a;&#x6f;&#107;&#x65;&#x72;&#64;&#x31;&#54;&#51;&#46;&#x63;&#x6f;&#x6d;</a></p>
<h2 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h2><p>JQCollectionViewAlignLayout 遵循 MIT 协议，可以查看 LICENSE 文件获取更多信息。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>编程相关</category>
        <category>Objective-C</category>
      </categories>
      <tags>
        <tag>UICollectionView</tag>
        <tag>NSCollectionView</tag>
      </tags>
  </entry>
  <entry>
    <title>SVN 的简单使用</title>
    <url>/2016/09/08/SVN/</url>
    <content><![CDATA[<h3 id="创建代码库"><a href="#创建代码库" class="headerlink" title="创建代码库"></a>创建代码库</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ svnadmin create &#x2F;Users&#x2F;Joker&#x2F;svn&#x2F;MyRepo</code></pre>

<span id="more"></span>

<h3 id="设置代码库权限以及相关配置"><a href="#设置代码库权限以及相关配置" class="headerlink" title="设置代码库权限以及相关配置"></a>设置代码库权限以及相关配置</h3><p>修改代码库文件夹下的 <code>conf/svnserve.conf</code> 文件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ vi &#x2F;Users&#x2F;Joker&#x2F;svn&#x2F;MyRepo&#x2F;conf&#x2F;svnserve.conf</code></pre>

<p>删除以下几项前的 <code>#</code> 号，表示代码库可读可写，用户密码等配置在 <code>passwd</code> 文件，授权信息在 <code>authz</code> 文件</p>
<pre class="line-numbers language-none"><code class="language-none"># anon-access &#x3D; read  
# auth-access &#x3D; write  
# password-db &#x3D; passwd  
# authz-db &#x3D; authz </code></pre>

<h3 id="配置用户密码等信息"><a href="#配置用户密码等信息" class="headerlink" title="配置用户密码等信息"></a>配置用户密码等信息</h3><p>编辑代码库文件夹下的 <code>conf/passwd</code> 文件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ vi &#x2F;Users&#x2F;Joker&#x2F;svn&#x2F;MyRepo&#x2F;conf&#x2F;passwd</code></pre>
<p>在 <code>[users]</code> 标签下添加用户信息，表示账号为：zjq，密码为：123</p>
<pre class="line-numbers language-none"><code class="language-none">[users]
zjq &#x3D; 123</code></pre>

<h3 id="配置用户组或用户权限"><a href="#配置用户组或用户权限" class="headerlink" title="配置用户组或用户权限"></a>配置用户组或用户权限</h3><p>编辑代码库文件夹下的 <code>conf/authz</code> 文件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ vi &#x2F;Users&#x2F;Joker&#x2F;svn&#x2F;MyRepo&#x2F;conf&#x2F;authz</code></pre>
<p>可以将若干用户分为一组，统一配置权限，<code>[/]</code> 表示代码库下所有文件，<code>rw</code> 表示可读可写</p>
<pre class="line-numbers language-none"><code class="language-none">[groups]
group1 &#x3D; zjq, joker

[&#x2F;]
@group1 &#x3D; rw</code></pre>
<p>也可以单独给用户配置权限，注意给用户单独配置权限不需要 <code>@</code></p>
<pre class="line-numbers language-none"><code class="language-none">[&#x2F;]
zjq &#x3D; rw</code></pre>

<h3 id="启动-SVN-服务器"><a href="#启动-SVN-服务器" class="headerlink" title="启动 SVN 服务器"></a>启动 SVN 服务器</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ svnserve -d -r &#x2F;Users&#x2F;Joker&#x2F;svn&#x2F;MyRepo</code></pre>

<h3 id="使用-SVN"><a href="#使用-SVN" class="headerlink" title="使用 SVN"></a>使用 SVN</h3><h4 id="从本地导入代码至服务器"><a href="#从本地导入代码至服务器" class="headerlink" title="从本地导入代码至服务器"></a>从本地导入代码至服务器</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ svn import [file-path] [server-path] --username&#x3D;zjq --password&#x3D;123 -m &quot;initialize&quot;</code></pre>
<h4 id="从服务器下载代码至本地代码库"><a href="#从服务器下载代码至本地代码库" class="headerlink" title="从服务器下载代码至本地代码库"></a>从服务器下载代码至本地代码库</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ svn checkout [server-path] --username&#x3D;zjq --password&#x3D;123 [repo-path] </code></pre>
<h4 id="提交修改至服务器"><a href="#提交修改至服务器" class="headerlink" title="提交修改至服务器"></a>提交修改至服务器</h4><pre class="line-numbers language-bahs" data-language="bahs"><code class="language-bahs">$ svn commit -m &quot;modified the file&quot;</code></pre>
<h4 id="更新服务器代码至本地代码库"><a href="#更新服务器代码至本地代码库" class="headerlink" title="更新服务器代码至本地代码库"></a>更新服务器代码至本地代码库</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ svn update</code></pre>
<h4 id="查看帮助信息"><a href="#查看帮助信息" class="headerlink" title="查看帮助信息"></a>查看帮助信息</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ svn help</code></pre>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>工具使用</category>
        <category>SVN</category>
      </categories>
      <tags>
        <tag>SVN</tag>
      </tags>
  </entry>
  <entry>
    <title>block 的使用</title>
    <url>/2016/08/27/block-usage/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ul>
<li><code>ReturnType</code>：你所想要返回的数据类型；</li>
<li><code>ParameterType</code>：你所要传递的参数类型；</li>
<li><code>parameterName</code>：你所要传递的参数名；</li>
<li><code>blockName</code>：你所构造的 block 名。</li>
</ul>
<span id="more"></span>

<p>（另外参数可以传入多个）</p>
<h3 id="作为变量"><a href="#作为变量" class="headerlink" title="作为变量"></a>作为变量</h3><pre class="line-numbers language-objectivec" data-language="objectivec"><code class="language-objectivec">ReturnType (^blockName)(ParameterType) &#x3D; ^ReturnType (ParameterType parameterName) &#123;
    &#x2F;&#x2F; Your code here...
&#125;;</code></pre>
<h3 id="作为属性"><a href="#作为属性" class="headerlink" title="作为属性"></a>作为属性</h3><pre class="line-numbers language-objectivec" data-language="objectivec"><code class="language-objectivec">@property (copy) ReturnType (^blockName) (ParameterType);</code></pre>
<h3 id="作为方法定义参数"><a href="#作为方法定义参数" class="headerlink" title="作为方法定义参数"></a>作为方法定义参数</h3><pre class="line-numbers language-objectivec" data-language="objectivec"><code class="language-objectivec">- (void)yourMethod:(ReturnType (^)(ParameterType))blockName;</code></pre>
<h3 id="作为方法传入参数"><a href="#作为方法传入参数" class="headerlink" title="作为方法传入参数"></a>作为方法传入参数</h3><pre class="line-numbers language-objectivec" data-language="objectivec"><code class="language-objectivec">[someObject doSomethingWithBlock: ^ReturnType (ParameterType parameterName) &#123;
    &#x2F;&#x2F; Your code here...
&#125;];</code></pre>
<h3 id="匿名-Block"><a href="#匿名-Block" class="headerlink" title="匿名 Block"></a>匿名 Block</h3><pre class="line-numbers language-objectivec" data-language="objectivec"><code class="language-objectivec">^ReturnType (ParameterType parameterName) &#123;
    &#x2F;&#x2F; Your code here...
&#125;;</code></pre>
<h3 id="使用-typedef"><a href="#使用-typedef" class="headerlink" title="使用 typedef"></a>使用 <code>typedef</code></h3><pre class="line-numbers language-objectivec" data-language="objectivec"><code class="language-objectivec">typedef ReturnType (^blockName)(ParameterType);</code></pre>
<h3 id="内联-Block"><a href="#内联-Block" class="headerlink" title="内联 Block"></a>内联 Block</h3><pre class="line-numbers language-objectivec" data-language="objectivec"><code class="language-objectivec">^ReturnType (ParameterType parameterName) &#123;
    &#x2F;&#x2F; Your code here...
&#125;(parameterValue);</code></pre>
<h3 id="递归-Block"><a href="#递归-Block" class="headerlink" title="递归 Block"></a>递归 Block</h3><pre class="line-numbers language-objectivec" data-language="objectivec"><code class="language-objectivec">__block ReturnType (^blockName)(ParameterType) &#x3D; [^ReturnType (ParameterType parameterName) &#123;
    if (returnCondition) &#123;
        blockName &#x3D; nil;
        return;
    &#125;

    &#x2F;&#x2F; Your code here...
&#125; copy];
blockName(parameterValue);</code></pre>
<h3 id="作为返回值"><a href="#作为返回值" class="headerlink" title="作为返回值"></a>作为返回值</h3><pre class="line-numbers language-objectivec" data-language="objectivec"><code class="language-objectivec">- (ReturnType(^)(ParameterType))methodName &#123;
    &#x2F;&#x2F; Your code here...
&#125;</code></pre>
<h3 id="在-swift-中（闭包）"><a href="#在-swift-中（闭包）" class="headerlink" title="在 swift 中（闭包）"></a>在 swift 中（闭包）</h3><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">var blockName &#x3D; &#123; (parameterName: ParameterType) -&gt; ReturnType in
    return returnValue;
&#125;</code></pre>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>编程相关</category>
        <category>Objective-C</category>
      </categories>
  </entry>
  <entry>
    <title>【面试题】block 相关</title>
    <url>/2019/08/29/block/</url>
    <content><![CDATA[<h2 id="block-的本质"><a href="#block-的本质" class="headerlink" title="block 的本质"></a>block 的本质</h2><blockquote>
<p>block 的本质是封装了函数调用及函数调用环境的 OC 对象。</p>
</blockquote>
<span id="more"></span>

<p>可以执行如下代码验证：</p>
<pre class="line-numbers language-objectivec" data-language="objectivec"><code class="language-objectivec">#import &lt;Foundation&#x2F;Foundation.h&gt;

&#x2F;*
 终端执行：
 xcrun -sdk iphoneos clang -arch arm64 -rewrite-objc main.m
 获取的 block 相关结构体
*&#x2F;

&#x2F;&#x2F; impl 结构体
struct __block_impl &#123;
  void *isa;
  int Flags;
  int Reserved;
  void *FuncPtr;
&#125;;

&#x2F;&#x2F; block 描述信息
struct __main_block_desc_0 &#123;
  size_t reserved;
  size_t Block_size;
&#125;;

&#x2F;&#x2F; block 结构体
struct __main_block_impl_0 &#123;
  struct __block_impl impl;
  struct __main_block_desc_0* Desc;
  int a;
&#125;;

&#x2F;&#x2F;__main_block_impl_0 结构体初始化
&#x2F;&#x2F;((void (*)())&amp;__main_block_impl_0((void *)__main_block_func_0, &amp;__main_block_desc_0_DATA, a))();

&#x2F;&#x2F; 函数定义（需传入 __main_block_impl_0 结构体指针）
&#x2F;&#x2F;static void __main_block_func_0(struct __main_block_impl_0 *__cself) &#123;
&#x2F;&#x2F;  int a &#x3D; __cself-&gt;a; &#x2F;&#x2F; bound by copy
&#x2F;&#x2F;  NSLog((NSString *)&amp;__NSConstantStringImpl__var_folders_vz_ktjs0_fn5dg59rp_kggzsch80000gn_T_main_995593_mi_0, a);
&#x2F;&#x2F;&#125;

int main(int argc, const char * argv[]) &#123;
    @autoreleasepool &#123;
        &#x2F;&#x2F; 声明变量供 block 捕获
        int a &#x3D; 10;
        
        &#x2F;&#x2F; 声明 block
        void (^block)(void) &#x3D; ^&#123;
            NSLog(@&quot;%s:a: %d&quot;, __func__, a);
        &#125;;
        
        &#x2F;&#x2F; 强转为 __main_block_impl_0 结构体指针
        struct __main_block_impl_0 *blockImpl &#x3D; (__bridge struct __main_block_impl_0 *)block;
        
        &#x2F;&#x2F; 打印变量，证明变量是否捕获成功
        NSLog(@&quot;__main_block_impl_0-&gt;a: %d&quot;, blockImpl-&gt;a);
        
        &#x2F;&#x2F; 获取函数指针
        void (*func)(struct __main_block_impl_0 *) &#x3D; blockImpl-&gt;impl.FuncPtr;
        
        &#x2F;&#x2F; 直接通过函数指针调用，证明是否执行 block 内部的代码
        func(blockImpl);
    &#125;
    return 0;
&#125;</code></pre>

<p>打印输出：</p>
<img src="https://image.jqz3.tech/blog/20210829102657.png?imageView2/0/q/75|watermark/2/text/aHR0cHM6Ly9qcXozLnRlY2g=/font/bWljcm9zb2Z0IHlhaGVp/fontsize/360/fill/I0ZGRkZGRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" style="zoom:50%;" />

<h2 id="外部变量的访问"><a href="#外部变量的访问" class="headerlink" title="外部变量的访问"></a>外部变量的访问</h2><table>
<thead>
<tr>
<th align="center">变量类型</th>
<th align="center">是否捕获到 block 内部</th>
<th align="center">访问方式</th>
</tr>
</thead>
<tbody><tr>
<td align="center">局部 auto 变量</td>
<td align="center">捕获</td>
<td align="center">值传递</td>
</tr>
<tr>
<td align="center">局部 static 变量</td>
<td align="center">捕获</td>
<td align="center">指针传递</td>
</tr>
<tr>
<td align="center">全局变量</td>
<td align="center">不捕获</td>
<td align="center">直接访问</td>
</tr>
</tbody></table>
<pre class="line-numbers language-objectivec" data-language="objectivec"><code class="language-objectivec">#import &lt;Foundation&#x2F;Foundation.h&gt;

int c &#x3D; 30;
static int d &#x3D; 40;

void blockCapture(void) &#123;
    int a &#x3D; 10;
    static int b &#x3D; 20;
    void (^block)(void) &#x3D; ^&#123;
        NSLog(@&quot;%d---%d---%d---%d&quot;, a, b, c, d);
    &#125;;
    
    a &#x3D; 100;
    b &#x3D; 200;
    c &#x3D; 300;
    d &#x3D; 400;
    block();
&#125;</code></pre>

<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">int c &#x3D; 30;
static int d &#x3D; 40;

struct __blockCapture_block_impl_0 &#123;
  struct __block_impl impl;
  struct __blockCapture_block_desc_0* Desc;
  int a;
  int *b;
&#125;;

static void __blockCapture_block_func_0(struct __blockCapture_block_impl_0 *__cself) &#123;
  int a &#x3D; __cself-&gt;a; &#x2F;&#x2F; bound by copy
  int *b &#x3D; __cself-&gt;b; &#x2F;&#x2F; bound by copy

  NSLog((NSString *)&amp;__NSConstantStringImpl__var_folders_vz_ktjs0_fn5dg59rp_kggzsch80000gn_T_main_426782_mi_2, a, (*b), c, d);
&#125;</code></pre>

<h2 id="block-的类型"><a href="#block-的类型" class="headerlink" title="block 的类型"></a>block 的类型</h2><table>
<thead>
<tr>
<th>block 的类型</th>
<th>环境</th>
<th>副本源的配置存储域</th>
<th>复制效果</th>
</tr>
</thead>
<tbody><tr>
<td>__NSGlobalBlock__(_NSConcreteGlobalBlock)</td>
<td>没有访问 auto 变量</td>
<td>程序的数据区域（.data 区）</td>
<td>什么也不做</td>
</tr>
<tr>
<td>__NSStackBlock__(_NSConcreteStackBlock)</td>
<td>访问了 auto 变量</td>
<td>栈</td>
<td>从栈复制到堆</td>
</tr>
<tr>
<td>__NSMallocBlock__(_NSConcreteMallocBlock)</td>
<td>__NSStackBlock__  调用了 copy</td>
<td>堆</td>
<td>引用计数增加</td>
</tr>
</tbody></table>
<img src="https://image.jqz3.tech/blog/block.png?imageView2/0/q/75|watermark/2/text/aHR0cHM6Ly9qcXozLnRlY2g=/font/bWljcm9zb2Z0IHlhaGVp/fontsize/360/fill/I0ZGRkZGRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" style="zoom:33%;" />

<h2 id="block-的-copy"><a href="#block-的-copy" class="headerlink" title="block 的 copy"></a>block 的 copy</h2><blockquote>
<p>在 ARC 环境下，编译器会根据情况自动将栈上的 block 复制到堆上，比如以下情况</p>
<ul>
<li>block 作为函数返回值时</li>
<li>将 block 赋值给 __strong 指针时</li>
<li>block 作为 Cocoa API 中方法名含有 usingBlock 的方法参数时</li>
<li>block 作为 GCD API 的方法参数时</li>
</ul>
<p>MRC 下 block 属性的建议写法</p>
<ul>
<li><code>@property (copy, nonatomic) void (^block)(void);</code></li>
</ul>
<p>ARC 下 block 属性的建议写法</p>
<ul>
<li><p><code>@property (strong, nonatomic) void (^block)(void);</code></p>
</li>
<li><p><code>@property (copy, nonatomic) void (^block)(void);</code></p>
</li>
</ul>
</blockquote>
<h2 id="block-访问对象类型的-auto-变量"><a href="#block-访问对象类型的-auto-变量" class="headerlink" title="block 访问对象类型的 auto 变量"></a>block 访问对象类型的 auto 变量</h2><blockquote>
<p>当 block 内部访问了对象类型的 auto 变量时</p>
<ul>
<li>如果 block 是在栈上，将不会对 auto 变量产生强引用</li>
<li>如果 block 被拷贝到堆上<ul>
<li>会调用 block 内部的 copy 函数</li>
<li>copy 函数内部会调用 _Block_object_assign 函数</li>
<li>_Block_object_assign 函数会根据 auto 变量的修饰符（__strong、__weak、__unsafe_unretained）做出相应的操作，形成强引用（retain）或者弱引用</li>
</ul>
</li>
<li>如果 block 从堆上移除<ul>
<li>会调用 block 内部的 dispose 函数</li>
<li>dispose 函数内部会调用 _Block_object_dispose 函数</li>
<li>_Block_object_dispose 函数会自动释放引用的 auto 变量 (release)</li>
</ul>
</li>
</ul>
</blockquote>
<pre class="line-numbers language-objectivec" data-language="objectivec"><code class="language-objectivec">#import &lt;Foundation&#x2F;Foundation.h&gt;

@interface JQPerson : NSObject

@property (nonatomic, copy) NSString *name;

@end

@implementation JQPerson

- (void)dealloc &#123;
    NSLog(@&quot;%@: dealloc&quot;, self.name);
&#125;

@end

typedef void(^JQBlock)(void);

void blockCopy(void) &#123;
    JQBlock block;
    &#123;
        JQPerson *strongPerson &#x3D; [[JQPerson alloc] init];
        strongPerson.name &#x3D; @&quot;strong person&quot;;
        
        JQPerson *person &#x3D; [[JQPerson alloc] init];
        person.name &#x3D; @&quot;weak person&quot;;
        __weak JQPerson *weakPerson &#x3D; person;
        
        block &#x3D; ^&#123;
            NSLog(@&quot;--&gt;%@&quot;, strongPerson.name);
            NSLog(@&quot;--&gt;%@&quot;, weakPerson.name);
        &#125;;
    &#125;
    block();
    NSLog(@&quot;-------&quot;);
&#125;</code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">xcrun -sdk iphoneos clang -arch arm64 -rewrite-objc -fobjc-arc -fobjc-runtime&#x3D;ios-8.0.0 main.m</code></pre>

<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">struct __blockCopy_block_impl_0 &#123;
  struct __block_impl impl;
  struct __blockCopy_block_desc_0* Desc;
  JQPerson *__strong strongPerson;
  JQPerson *__weak weakPerson;
  __blockCopy_block_impl_0(void *fp, struct __blockCopy_block_desc_0 *desc, JQPerson *__strong _strongPerson, JQPerson *__weak _weakPerson, int flags&#x3D;0) : strongPerson(_strongPerson), weakPerson(_weakPerson) &#123;
    impl.isa &#x3D; &amp;_NSConcreteStackBlock;
    impl.Flags &#x3D; flags;
    impl.FuncPtr &#x3D; fp;
    Desc &#x3D; desc;
  &#125;
&#125;;

static void __blockCopy_block_copy_0(struct __blockCopy_block_impl_0*dst, struct __blockCopy_block_impl_0*src) &#123;
  _Block_object_assign((void*)&amp;dst-&gt;strongPerson, (void*)src-&gt;strongPerson, 3&#x2F;*BLOCK_FIELD_IS_OBJECT*&#x2F;);
  _Block_object_assign((void*)&amp;dst-&gt;weakPerson, (void*)src-&gt;weakPerson, 3&#x2F;*BLOCK_FIELD_IS_OBJECT*&#x2F;);
&#125;

static void __blockCopy_block_dispose_0(struct __blockCopy_block_impl_0*src) &#123;
  _Block_object_dispose((void*)src-&gt;strongPerson, 3&#x2F;*BLOCK_FIELD_IS_OBJECT*&#x2F;);
  _Block_object_dispose((void*)src-&gt;weakPerson, 3&#x2F;*BLOCK_FIELD_IS_OBJECT*&#x2F;);
&#125;

static struct __blockCopy_block_desc_0 &#123;
  size_t reserved;
  size_t Block_size;
  void (*copy)(struct __blockCopy_block_impl_0*, struct __blockCopy_block_impl_0*);
  void (*dispose)(struct __blockCopy_block_impl_0*);
&#125; __blockCopy_block_desc_0_DATA &#x3D; &#123; 0, sizeof(struct __blockCopy_block_impl_0), __blockCopy_block_copy_0, __blockCopy_block_dispose_0&#125;;</code></pre>

<h2 id="block-修饰符"><a href="#block-修饰符" class="headerlink" title="__block 修饰符"></a>__block 修饰符</h2><blockquote>
<ul>
<li>__block 可以用于解决 block 内部无法修改 auto 变量值的问题</li>
<li>__block 不能修饰全局变量、静态变量 (static)</li>
<li>编译器会将 __block 修饰的变量包装成一个对象</li>
</ul>
</blockquote>
<pre class="line-numbers language-objectivec" data-language="objectivec"><code class="language-objectivec">#import &lt;Foundation&#x2F;Foundation.h&gt;

int main(int argc, const char * argv[]) &#123;
    @autoreleasepool &#123;
        __block int a &#x3D; 10;
        void (^block)(void) &#x3D; ^&#123;
            a &#x3D; 20;
        &#125;;
        block();
    &#125;
    return 0;
&#125;</code></pre>

<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">struct __Block_byref_a_0 &#123;
  void *__isa;
  __Block_byref_a_0 *__forwarding;
 int __flags;
 int __size;
 int a;
&#125;;

struct __main_block_impl_0 &#123;
  struct __block_impl impl;
  struct __main_block_desc_0* Desc;
  __Block_byref_a_0 *a; &#x2F;&#x2F; by ref
  __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, __Block_byref_a_0 *_a, int flags&#x3D;0) : a(_a-&gt;__forwarding) &#123;
    impl.isa &#x3D; &amp;_NSConcreteStackBlock;
    impl.Flags &#x3D; flags;
    impl.FuncPtr &#x3D; fp;
    Desc &#x3D; desc;
  &#125;
&#125;;

static void __main_block_func_0(struct __main_block_impl_0 *__cself) &#123;
  __Block_byref_a_0 *a &#x3D; __cself-&gt;a; &#x2F;&#x2F; bound by ref
  (a-&gt;__forwarding-&gt;a) &#x3D; 20;
&#125;

static void __main_block_copy_0(struct __main_block_impl_0*dst, struct __main_block_impl_0*src) &#123;_Block_object_assign((void*)&amp;dst-&gt;a, (void*)src-&gt;a, 8&#x2F;*BLOCK_FIELD_IS_BYREF*&#x2F;);&#125;

static void __main_block_dispose_0(struct __main_block_impl_0*src) &#123;_Block_object_dispose((void*)src-&gt;a, 8&#x2F;*BLOCK_FIELD_IS_BYREF*&#x2F;);&#125;

static struct __main_block_desc_0 &#123;
  size_t reserved;
  size_t Block_size;
  void (*copy)(struct __main_block_impl_0*, struct __main_block_impl_0*);
  void (*dispose)(struct __main_block_impl_0*);
&#125; __main_block_desc_0_DATA &#x3D; &#123; 0, sizeof(struct __main_block_impl_0), __main_block_copy_0, __main_block_dispose_0&#125;;
int main(int argc, const char * argv[]) &#123;
    &#x2F;* @autoreleasepool *&#x2F; &#123; __AtAutoreleasePool __autoreleasepool; 
        __attribute__((__blocks__(byref))) __Block_byref_a_0 a &#x3D; &#123;(void*)0,(__Block_byref_a_0 *)&amp;a, 0, sizeof(__Block_byref_a_0), 10&#125;;
        void (*block)(void) &#x3D; ((void (*)())&amp;__main_block_impl_0((void *)__main_block_func_0, &amp;__main_block_desc_0_DATA, (__Block_byref_a_0 *)&amp;a, 570425344));
        ((void (*)(__block_impl *))((__block_impl *)block)-&gt;FuncPtr)((__block_impl *)block);
    &#125;
    return 0;
&#125;</code></pre>

<h2 id="block-的内存管理"><a href="#block-的内存管理" class="headerlink" title="__block 的内存管理"></a>__block 的内存管理</h2><blockquote>
<ul>
<li>当 block 在栈上时，并不会对 __block 变量产生强引用</li>
<li>当 block 被 copy 到堆时<ul>
<li>会调用 block 内部的 copy 函数</li>
<li>copy 函数内部会调用 _Block_object_assign 函数</li>
<li>_Block_object_assign 函数会对 __block 变量形成强引用（retain）</li>
</ul>
</li>
<li>当block从堆中移除时<ul>
<li>会调用 block 内部的 dispose 函数</li>
<li>dispose 函数内部会调用 _Block_object_dispose 函数</li>
<li>_Block_object_dispose 函数会自动释放引用的 __block 变量（release）</li>
</ul>
</li>
</ul>
</blockquote>
<p><img src="https://image.jqz3.tech/blog/20210829155637.png?imageView2/0/q/75%7Cwatermark/2/text/aHR0cHM6Ly9qcXozLnRlY2g=/font/bWljcm9zb2Z0IHlhaGVp/fontsize/360/fill/I0ZGRkZGRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10"></p>
<p><img src="https://image.jqz3.tech/blog/20210829155710.png?imageView2/0/q/75%7Cwatermark/2/text/aHR0cHM6Ly9qcXozLnRlY2g=/font/bWljcm9zb2Z0IHlhaGVp/fontsize/360/fill/I0ZGRkZGRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10"></p>
<h2 id="block-的-forwarding-指针"><a href="#block-的-forwarding-指针" class="headerlink" title="__block 的 __forwarding 指针"></a>__block 的 __forwarding 指针</h2><img src="https://image.jqz3.tech/blog/20210829155412.png?imageView2/0/q/75|watermark/2/text/aHR0cHM6Ly9qcXozLnRlY2g=/font/bWljcm9zb2Z0IHlhaGVp/fontsize/360/fill/I0ZGRkZGRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" style="zoom:50%;" />

<h2 id="block-的循环引用"><a href="#block-的循环引用" class="headerlink" title="block 的循环引用"></a>block 的循环引用</h2><blockquote>
<ul>
<li>__weak</li>
</ul>
<pre class="line-numbers language-objectivec" data-language="objectivec"><code class="language-objectivec">__weak typeof(self) weakSelf &#x3D; self;
self.block &#x3D; ^&#123;
		NSLog(@&quot;%@&quot;, weakSelf);
&#125;;</code></pre>

<img src="https://image.jqz3.tech/blog/20210829162447.png?imageView2/0/q/75|watermark/2/text/aHR0cHM6Ly9qcXozLnRlY2g=/font/bWljcm9zb2Z0IHlhaGVp/fontsize/360/fill/I0ZGRkZGRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" style="zoom: 25%;" />



<ul>
<li>__block 修饰，并在 block 内手动去除引用（必须要调用 block）</li>
</ul>
<pre class="line-numbers language-objectivec" data-language="objectivec"><code class="language-objectivec">__block id blockSelf &#x3D; self;
self.block &#x3D; ^&#123;
  	NSLog(@&quot;%@&quot;, blockSelf);
  	blockSelf &#x3D; nil;
&#125;;
self.block();</code></pre>

<img src="https://image.jqz3.tech/blog/20210829162448.png?imageView2/0/q/75|watermark/2/text/aHR0cHM6Ly9qcXozLnRlY2g=/font/bWljcm9zb2Z0IHlhaGVp/fontsize/360/fill/I0ZGRkZGRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" style="zoom:25%;" />
</blockquote>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>编程相关</category>
        <category>Objective-C</category>
        <category>面试相关</category>
        <category>runtime</category>
      </categories>
      <tags>
        <tag>block</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac 上将 iPhone 备份存储至移动硬盘</title>
    <url>/2023/02/16/change-iphone-backup-directory/</url>
    <content><![CDATA[<p>Mac 上 iPhone 备份的存储路径默认为： <code>/Library/Application Support/MobileSync/Backup</code>，所以可以通过软连接指向其它目录的方式来欺骗系统，将备份文件存储至移动硬盘等其他外部介质。具体操作如下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 跳转到备份目录
cd ~&#x2F;Library&#x2F;Application\ Support&#x2F;MobileSync&#x2F;

# 移动备份文件至你想要保存的位置（这里我是移动到“Backup(iPhone)”移动硬盘下）
mv Backup &#x2F;Volumes&#x2F;&#39;Backup(iPhone)&#39;

# 生成移动位置软连接以替换原本的 Backup 目录
ln -s &#x2F;Volumes&#x2F;&#39;Backup(iPhone)&#39;&#x2F;Backup&#x2F; ~&#x2F;Library&#x2F;Application\ Support&#x2F;MobileSync&#x2F;Backup</code></pre>

<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
  </entry>
  <entry>
    <title>用 yarn 代替 npm 管理 React-Native 包依赖</title>
    <url>/2016/11/22/change-npm-to-yarn/</url>
    <content><![CDATA[<h3 id="首先得安装-yarn，可参考Yarn-Installation-on-macOS"><a href="#首先得安装-yarn，可参考Yarn-Installation-on-macOS" class="headerlink" title="首先得安装 yarn，可参考Yarn Installation on macOS"></a>首先得安装 yarn，可参考<a href="http://jqz3.tech/2016/10/13/yarn-installation/">Yarn Installation on macOS</a></h3><h3 id="在命令行中输入："><a href="#在命令行中输入：" class="headerlink" title="在命令行中输入："></a>在命令行中输入：</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ yarn global add react-native-cli</code></pre>

<p><img src="https://image.jqz3.tech/blog/2016-11-22-143436.jpg?imageView2/0/q/75%7Cwatermark/2/text/aHR0cHM6Ly9qcXozLnRlY2g=/font/bWljcm9zb2Z0IHlhaGVp/fontsize/360/fill/I0ZGRkZGRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10"></p>
<h3 id="之后使用-react-native-init-就是用-yarn-来下载包："><a href="#之后使用-react-native-init-就是用-yarn-来下载包：" class="headerlink" title="之后使用 react-native init 就是用 yarn 来下载包："></a>之后使用 react-native init 就是用 yarn 来下载包：</h3><p><img src="https://image.jqz3.tech/blog/2016-11-22-143004.jpg?imageView2/0/q/75%7Cwatermark/2/text/aHR0cHM6Ly9qcXozLnRlY2g=/font/bWljcm9zb2Z0IHlhaGVp/fontsize/360/fill/I0ZGRkZGRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10"></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>工具使用</category>
        <category>yarn</category>
      </categories>
      <tags>
        <tag>yarn</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>处理 Chrome 浏览器打不开不安全的 https 链接</title>
    <url>/2019/10/21/chrome-ssl-certificate-issue/</url>
    <content><![CDATA[<ol>
<li>点击页面空白处</li>
<li>键盘输入 <code>thisisunsafe</code></li>
</ol>
<p><img src="https://image.jqz3.tech/blog/20211021104531.png?imageView2/0/q/75%7Cwatermark/2/text/aHR0cHM6Ly9qcXozLnRlY2g=/font/bWljcm9zb2Z0IHlhaGVp/fontsize/360/fill/I0ZGRkZGRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10"></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>问题解决</category>
      </categories>
  </entry>
  <entry>
    <title>利用 U 盘制作 macOS 系统盘</title>
    <url>/2021/06/09/create-macos-install-media/</url>
    <content><![CDATA[<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><a href="macappstores://apps.apple.com/cn/app/macos-monterey/id1576738294?mt=12">macOS Monterey</a>、<a href="macappstores://apps.apple.com/cn/app/macos-big-sur/id1526878132?mt=12">macOS Big Sur</a>、<a href="macappstores://apps.apple.com/cn/app/macos-catalina/id1466841314?mt=12">macOS Catalina</a>、<a href="macappstores://apps.apple.com/cn/app/macos-mojave/id1398502828?mt=12">macOS Mojave</a> 或 <a href="macappstores://apps.apple.com/cn/app/macos-high-sierra/id1246284741?mt=12">macOS High Sierra</a> 的安装器会以 App 的形式下载到应用程序”文件夹，名称为“安装 macOS [版本名称]”。如果安装器在下载后打开，退出不要继续安装。</p>
<h2 id="创建可引导安装器"><a href="#创建可引导安装器" class="headerlink" title="创建可引导安装器"></a>创建可引导安装器</h2><p>打开命令行执行，以 macOS Big Sur 为例：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ sudo &#x2F;Applications&#x2F;Install\ macOS\ Big\ Sur.app&#x2F;Contents&#x2F;Resources&#x2F;createinstallmedia --volume &#x2F;Volumes&#x2F;YourVolume</code></pre>

<p><img src="https://image.jqz3.tech/blog/20210610013539.png?imageView2/0/q/75%7Cwatermark/2/text/aHR0cHM6Ly9qcXozLnRlY2g=/font/bWljcm9zb2Z0IHlhaGVp/fontsize/360/fill/I0ZGRkZGRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10"></p>
<p>参考链接：<a href="https://support.apple.com/zh-cn/HT201372">如何创建可引导的 macOS 安装器</a></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>macOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Cycript 简单使用</title>
    <url>/2020/08/06/cycript/</url>
    <content><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>Cydia 里安装 Cycript:</p>
<img src="https://image.jqz3.tech/blog/20210806140902.png?imageView2/0/q/75|watermark/2/text/aHR0cHM6Ly9qcXozLnRlY2g=/font/bWljcm9zb2Z0IHlhaGVp/fontsize/360/fill/I0ZGRkZGRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" style="zoom: 25%;" />

<span id="more"></span>

<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>连接 iPhone 并登陆，在终端执行：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 查看需要 cycript 进程，以 AppStore 为例
ps -A | grep AppStore

# 通过进程 ID 启动 cycript
cycript -p 9514

# 或者通过进程名启动 cycript
cycript -p AppStore</code></pre>



<h3 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># [UIApplication sharedApplication]
UIApp

# 定义变量：var 变量名 &#x3D; 变量值
var window &#x3D; UIApp.keyWindow
window.rootViewController

# #+内存地址获取对象
#0x148027a00.rootViewController

# 已加载的所有 OC 类
ObjectiveC.classes

# 查看对象的所有成员变量
*window

# 递归打印view的所有子控件（跟LLDB一样的函数）
view.recursiveDescription().toString()

# 筛选出某种类型的对象
choose(UIViewController)</code></pre>



<h3 id="封装方法"><a href="#封装方法" class="headerlink" title="封装方法"></a>封装方法</h3><p>新建 <code>JQ.cy</code> 文件：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">(function(exports) &#123;
	RootVC &#x3D; function() &#123;
		return UIApp.keyWindow.rootViewController;
	&#125;;
&#125;)(exports);</code></pre>



<p>将 <code>JQ.cy</code> 放置 <code>/usr/lib/cycript0.9/</code> 文件夹下：</p>
<img src="https://image.jqz3.tech/blog/20210806144521.png?imageView2/0/q/75|watermark/2/text/aHR0cHM6Ly9qcXozLnRlY2g=/font/bWljcm9zb2Z0IHlhaGVp/fontsize/360/fill/I0ZGRkZGRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" style="zoom: 50%;" />



<p>启动 cycript 导入 <code>JQ.cy</code> 并调用其中定义的方法:</p>
<img src="https://image.jqz3.tech/blog/20210806144853.png?imageView2/0/q/75|watermark/2/text/aHR0cHM6Ly9qcXozLnRlY2g=/font/bWljcm9zb2Z0IHlhaGVp/fontsize/360/fill/I0ZGRkZGRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" style="zoom:50%;" />



<h3 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h3><p><code>ctrl</code> + <code>c</code>: 取消输入</p>
<p><code>ctrl</code> + <code>d</code>: 退出 cycript</p>
<p><code>command</code> + <code>r</code>: 清空屏幕</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>工具使用</category>
        <category>逆向安全</category>
      </categories>
      <tags>
        <tag>Cycript</tag>
      </tags>
  </entry>
  <entry>
    <title>Cydia 安装 Frida 16.0.8 版本时报错</title>
    <url>/2023/02/02/cydia-install-frida-16-0-8-error/</url>
    <content><![CDATA[<p>Cydia 在安装 Frida 16.0.8 版本时会有如下报错：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dpkg-deb --control subprocess returned error exit status 2
Sub-process &#x2F;usr&#x2F;libexec&#x2F;cydia&#x2F;cydo returned an error code (1)</code></pre>

<span id="more"></span>

<h3 id="解决："><a href="#解决：" class="headerlink" title="解决："></a>解决：</h3><p>第一种：安装旧版本</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 在 GitHub release 页下载旧版本，比如 frida_16.0.6_iphoneos-arm.deb
# 利用 scp 或者 iFunBox 等工具传输到手机
# 在手机对应目录下执行安装指令
dpkg -i frida_16.0.6_iphoneos-arm.deb</code></pre>

<p>第二种：在电脑上重新打包再传输到手机上安装</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#  在电脑上
FRIDA_VERSION&#x3D;&quot;16.0.8&quot;
wget https:&#x2F;&#x2F;github.com&#x2F;frida&#x2F;frida&#x2F;releases&#x2F;download&#x2F;&quot;$&#123;FRIDA_VERSION&#125;&quot;&#x2F;frida_&quot;$&#123;FRIDA_VERSION&#125;&quot;_iphoneos-arm.deb frida_&quot;$&#123;FRIDA_VERSION&#125;&quot;_iphoneos-arm.deb

mkdir frida_&quot;$&#123;FRIDA_VERSION&#125;&quot;_iphoneos-arm
cd frida_&quot;$&#123;FRIDA_VERSION&#125;&quot;_iphoneos-arm
ar -x ..&#x2F;frida_&quot;$&#123;FRIDA_VERSION&#125;&quot;_iphoneos-arm.deb
zstd -d *.zst
xz *.tar
ar r frida_&quot;$&#123;FRIDA_VERSION&#125;&quot;_iphoneos-arm-repacked.deb debian-binary control.tar.xz data.tar.xz

# 利用 scp 或者 iFunBox 等工具传输到手机

# 在手机对应目录下执行安装指令
FRIDA_VERSION&#x3D;&quot;16.0.8&quot;
dpkg -i  &quot;$&#123;FRIDA_VERSION&#125;&quot;_iphoneos-arm-repacked.deb</code></pre>

<p>参考链接：<a href="https://github.com/frida/frida/issues/2355">Error when installing Frida 16.0.8 on Cydia · Issue #2355 · frida/frida (github.com)</a></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>问题解决</category>
        <category>逆向安全</category>
      </categories>
      <tags>
        <tag>jailbreak</tag>
      </tags>
  </entry>
  <entry>
    <title>Flutter 安装</title>
    <url>/2020/10/17/flutter-install/</url>
    <content><![CDATA[<h3 id="下载-SDK"><a href="#下载-SDK" class="headerlink" title="下载 SDK"></a>下载 SDK</h3><ul>
<li>可以通过下载压缩包来获取最新的 <a href="https://storage.flutter-io.cn/flutter_infra_release/releases/stable/macos/flutter_macos_2.5.3-stable.zip">stable Flutter SDK</a>，然后将压缩包解压至目标路径，例如：</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 将下载的压缩包解压
unzip ~&#x2F;Downloads&#x2F;flutter_macos_2.5.3-stable.zip
# 移动至 ~&#x2F;.flutter 目录
mv flutter ~&#x2F;.flutter</code></pre>

<span id="more"></span>


<ul>
<li>或者通过 git，例如：</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 可指定分支 clone 对应版本 SDK
git clone -b stable https:&#x2F;&#x2F;github.com&#x2F;flutter&#x2F;flutter.git .flutter</code></pre>



<h3 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置</h3><p>下载完成后将 flutter 的可执行文件路径添加至配置文件(<code>.bash_profile</code>, <code>.zshrc</code> 等)中的 PATH 环境变量，例如将 Flutter SDK 下载至 <code>.flutter</code> 目录，则为：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">export PATH&#x3D;&quot;$PATH:~&#x2F;.flutter&#x2F;bin&quot;</code></pre>



<h3 id="设置镜像地址（国内）"><a href="#设置镜像地址（国内）" class="headerlink" title="设置镜像地址（国内）"></a>设置镜像地址（国内）</h3><p>如果是在国内访问可在配置文件（<code>.bash_profile</code>, <code>.zshrc</code> 等）中加入以下环境变量，设置国内镜像地址：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">export PUB_HOSTED_URL&#x3D;https:&#x2F;&#x2F;pub.flutter-io.cn
export FLUTTER_STORAGE_BASE_URL&#x3D;https:&#x2F;&#x2F;storage.flutter-io.cn</code></pre>



<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>编程相关</category>
        <category>Flutter</category>
      </categories>
      <tags>
        <tag>flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>记录一些 flutter 相关资源</title>
    <url>/2021/10/17/flutter-resource/</url>
    <content><![CDATA[<h3 id="Website"><a href="#Website" class="headerlink" title="Website"></a>Website</h3><ul>
<li>Official: <a href="https://flutter.dev/">https://flutter.dev</a></li>
<li>GitHub: <a href="https://github.com/flutter">https://github.com/flutter</a><ul>
<li>Repo: <a href="https://github.com/flutter/flutter">https://github.com/flutter/flutter</a></li>
<li>Gallery: <a href="https://github.com/flutter/gallery">https://github.com/flutter/gallery</a><span id="more"></span></li>
</ul>
</li>
<li>Documentation: <a href="https://docs.flutter.dev/">https://docs.flutter.dev/</a><ul>
<li>Tutorials: <a href="https://docs.flutter.dev/reference/tutorials">https://docs.flutter.dev/reference/tutorials</a></li>
<li>Cookbook: <a href="https://docs.flutter.dev/cookbook">https://docs.flutter.dev/cookbook</a></li>
<li>Codelabs: <a href="https://docs.flutter.dev/codelabs">https://docs.flutter.dev/codelabs</a></li>
<li>Widget Index: <a href="https://docs.flutter.dev/reference/widgets">https://docs.flutter.dev/reference/widgets</a></li>
</ul>
</li>
<li>API reference documentation: <a href="https://api.flutter.dev/">https://api.flutter.dev/</a></li>
<li>Samples: <a href="https://flutter.github.io/samples/#">https://flutter.github.io/samples</a></li>
<li>Packages: <a href="https://pub.dev/flutter/packages">https://pub.dev/flutter/packages</a></li>
<li>Awesome Flutter:<ul>
<li>en: <a href="https://github.com/Solido/awesome-flutter">https://github.com/Solido/awesome-flutter</a></li>
<li>cn: <a href="https://github.com/crazycodeboy/awesome-flutter-cn">https://github.com/crazycodeboy/awesome-flutter-cn</a></li>
<li>tips: <a href="https://github.com/erluxman/awesomefluttertips">https://github.com/erluxman/awesomefluttertips</a></li>
</ul>
</li>
<li>Stack Overflow: <a href="https://stackoverflow.com/questions/tagged/flutter">https://stackoverflow.com/questions/tagged/flutter</a></li>
<li>Twitter: <a href="https://twitter.com/FlutterDev">https://twitter.com/FlutterDev</a></li>
<li>中文网: <a href="https://flutter.cn/">https://flutter.cn</a></li>
</ul>
<h3 id="Video"><a href="#Video" class="headerlink" title="Video"></a>Video</h3><ul>
<li>YouTube: <a href="https://www.youtube.com/flutterdev">https://www.youtube.com/flutterdev</a></li>
<li>Bilibili: <a href="https://space.bilibili.com/344928717">https://space.bilibili.com/344928717</a></li>
</ul>
<h3 id="Book"><a href="#Book" class="headerlink" title="Book"></a>Book</h3><ul>
<li> Flutter Apprentice: <a href="https://store.raywenderlich.com/products/flutter-apprentice-google">https://store.raywenderlich.com/products/flutter-apprentice-google</a></li>
</ul>
<script>
    var style = document.createElement("style");
    style.type = "text/css";
    style.innerHTML = 'p{margin:0;}';
    window.document.head.appendChild(style);
</script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>编程相关</category>
        <category>Flutter</category>
      </categories>
      <tags>
        <tag>flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>通过 Apple Configurator 2 获取 ipa</title>
    <url>/2021/06/10/get-ipa/</url>
    <content><![CDATA[<h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><ul>
<li>手机已安装该应用</li>
<li>电脑安装 <a href="https://apps.apple.com/cn/app/apple-configurator-2/id1037126344?l=en&mt=12">Apple Configurator 2</a></li>
</ul>
<span id="more"></span>

<h4 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h4><p><strong>1. 手机连接电脑并信任，打开 Apple Configurator 2；</strong></p>
<p><strong>2. 选中设备点击添加应用：</strong></p>
<img src="https://image.jqz3.tech/blog/Screen%20Shot%202021-06-10%20at%2018.09.11.png?imageView2/0/q/75|watermark/2/text/aHR0cHM6Ly9qcXozLnRlY2g=/font/bWljcm9zb2Z0IHlhaGVp/fontsize/360/fill/I0ZGRkZGRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" style="zoom:40%;" />

<p><strong>3. 选择需要获取的应用添加：</strong></p>
<img src="https://image.jqz3.tech/blog/20210610181040.png?imageView2/0/q/75|watermark/2/text/aHR0cHM6Ly9qcXozLnRlY2g=/font/bWljcm9zb2Z0IHlhaGVp/fontsize/360/fill/I0ZGRkZGRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" style="zoom:33%;" />

<p><strong>4. 等待下载：</strong></p>
<img src="https://image.jqz3.tech/blog/20210610181138.png?imageView2/0/q/75|watermark/2/text/aHR0cHM6Ly9qcXozLnRlY2g=/font/bWljcm9zb2Z0IHlhaGVp/fontsize/360/fill/I0ZGRkZGRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" style="zoom: 50%;" />

<p><strong>5. 下载成功提示已安装，不要操作：</strong></p>
<img src="https://image.jqz3.tech/blog/20210610181232.png?imageView2/0/q/75|watermark/2/text/aHR0cHM6Ly9qcXozLnRlY2g=/font/bWljcm9zb2Z0IHlhaGVp/fontsize/360/fill/I0ZGRkZGRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" style="zoom:50%;" />

<p><strong>6. 打开下列文件夹：</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ open ~&#x2F;Library&#x2F;Group\ Containers&#x2F;K36BKF7T3D.group.com.apple.configurator&#x2F;Library&#x2F;Caches&#x2F;Assets</code></pre>

<p>即可看到下载的 ipa：</p>
<img src="https://image.jqz3.tech/blog/20210610181336.png?imageView2/0/q/75|watermark/2/text/aHR0cHM6Ly9qcXozLnRlY2g=/font/bWljcm9zb2Z0IHlhaGVp/fontsize/360/fill/I0ZGRkZGRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" style="zoom:50%;" /><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>ipa</tag>
      </tags>
  </entry>
  <entry>
    <title>git cherry-pick</title>
    <url>/2020/05/14/git-cherry-pick/</url>
    <content><![CDATA[<p><img src="https://image.jqz3.tech/blog/20200514142423.png?imageView2/0/q/75%7Cwatermark/2/text/aHR0cHM6Ly9qcXozLnRlY2g=/font/bWljcm9zb2Z0IHlhaGVp/fontsize/360/fill/I0ZGRkZGRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10"></p>
<span id="more"></span>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git cherry-pick C3 C4 C7</code></pre>

<p><img src="https://image.jqz3.tech/blog/20200514142536.png?imageView2/0/q/75%7Cwatermark/2/text/aHR0cHM6Ly9qcXozLnRlY2g=/font/bWljcm9zb2Z0IHlhaGVp/fontsize/360/fill/I0ZGRkZGRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10"></p>
<p><a href="https://learngitbranching.js.org/">https://learngitbranching.js.org/</a></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>工具使用</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 常用指令记录</title>
    <url>/2016/08/16/git-code/</url>
    <content><![CDATA[<h2 id="配置与帮助"><a href="#配置与帮助" class="headerlink" title="配置与帮助"></a>配置与帮助</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 查看 Git 配置信息
$ git config -l

# 修改 Git 配置文件
$ git config -e

# 修改提交时的用户信息
$ git config user.name &quot;[name]&quot;
$ git config user.email &quot;[email]&quot;

# 查看所有指令
$ git help

# 查看某条指令，例如 config
$ git config --help</code></pre>

<span id="more"></span>

<h2 id="版本库创建"><a href="#版本库创建" class="headerlink" title="版本库创建"></a>版本库创建</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 在当前文件夹初始化一个空的版本库，若已存在版本库则将其重新初始化
$ git init

# 新建一个目录并初始化一个空的版本库
$ git init [repo-name]

# 通过 ssh 从远程仓库克隆
$ git clone git@github.com:Coder-ZJQ&#x2F;Test-Git.git

# 通过 https 从远程仓库克隆
$ git clone https:&#x2F;&#x2F;github.com&#x2F;Coder-ZJQ&#x2F;Test-Git.git
</code></pre>

<h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 新建一个文件
$ touch [file-name]

# 新建一个文件夹
$ mkdir [dir-name]

# 查看一个文件
$ cat [file-name]

# 编辑一个文件，编辑完成输入 &quot;:wq&quot; 保存退出
$ vi [file-name]

# 将工作区中已修改的文件，添加到暂存区（可多个文件）
$ git add [file1] [file2] ...

# 将文件夹下已修改的文件添加到暂存区（可多个文件夹）
$ git add [dir1] [dir2] ...

# 将当前目录下的所有已修改文件添加至暂存区
$ git add .&#x2F;

# 删除工作区的文件，并将此次操作放入暂存区
$ git rm [file1] [file2] ...

# 删除文件夹下的所有文件，并将此次操作放入暂存区（并不会删除文件夹）
$ git rm -r [dir]

# 为文件改名，并将此次操作放入暂存区
$ git mv [file-original] [file-renamed]
</code></pre>

<h2 id="修改管理"><a href="#修改管理" class="headerlink" title="修改管理"></a>修改管理</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 查看当前状态
$ git status

# 将暂存区的修改提交至当前分支
$ git commit -m &quot;[message]&quot;

# 将暂存区中的指定文件或文件夹添加到当前分支
$ git commit [file] | [dir] ... -m &quot;[message]&quot;

# 将修改或删除的文件直接提交至当前分支，跳过 add 步骤（新建文件还需先 add ）
$ git commit -a -m &quot;[message]&quot;

# 提交一次新的 commit，重写 message
$ git commit --amend -m &quot;[message]&quot;

# 恢复修改至最近的一次 commit 或者 add，即放弃工作区中的修改
$ git checkout [file] | [dir] ...

# 若是已经将工作区的修改 add 至暂存区，可以先 reset 然后再 checkout
$ git reset HEAD [file] | [dir] ...

# 若是已经 add 并且 commit，可以版本回退，撤销修改
$ git reset --hard [commit-id]

# 保存当前工作区至工作栈
$ git stash

# 恢复工作栈栈顶的工作区，但并不会删除
$ git stash apply

# 删除工作栈栈顶的工作区
$ git stash drop

# 将工作栈栈顶的工作区出栈：恢复工作区并删除
$ git stash pop

# 查看工作栈中保存的工作区
$ git stash list</code></pre>

<h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 查看本地分支
$ git branch

# 查看远程分支
$ git branch -r

# 查看所有分支
$ git branch -a

# 创建一个新的分支
$ git branch [branch-name]

# 在指定 commit 创建一个分支
$ git branch [branch-name] [commit-id]

# 在指定 tag 创建一个分支
$ git branch [branch-name] [tag-name]

# 新建一个分支，并追踪一个远程分支
$ git branch --track [branch-name] [remote-branch-name]

# 在现有分支与指定的远程分支之间建立追踪关系
$ git branch --set-upstream [branch-name] [remote-branch-name]
$ git branch -f --track test [branch-name] [remote-branch-name]

# 切换分支
$ git checkout [branch-name]

# 切换到上一个分支
$ git checkout -

# 创建一个新的分支，并跳转至该分支
$ git checkout -b [branch-name]

# 合并某分支至当前分支，默认是 Fast-forward 模式
$ git merge [branch-name]

# 选择一个commit，合并进当前分支
$ git cherry-pick [commit]

# 删除分支
$ git branch -d [branch-name]

# 删除远程分支
$ git push origin --delete [branch-name]
$ git branch -dr [remote-branch]
</code></pre>

<h2 id="远程仓库操作"><a href="#远程仓库操作" class="headerlink" title="远程仓库操作"></a>远程仓库操作</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 创建 SSH Key
$ ssh-keygen -t rsa -C &quot;youremail@example.com&quot;

# 本地关联远程版本库，并设置简称
$ git remote add [remote-name] [remote-SSG | remote-URL]

# 将远程版本库代码更新至本地，但并不会执行合并操作
$ git fetch [remote-name]

# 从远程版本库获取代码，并与本地分支合并
$ git pull [remote-name] [branch-name]

# 上传本地指定分支到远程仓库
$ git push [remote-name] [branch-name]

# 强行推送当前分支到远程仓库，即使有冲突
$ git push [remote-name] --force

# 推送所有分支到远程仓库
$ git push [remote-name] --all

# 显示所有远程版本库
$ git remote -v

# 显示某个远程版本库信息
$ git remote show [remote-name]</code></pre>

<h2 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 列出所有 tag 
$ git tag

# 查看 tag 信息
$ git show [tag-name]

# 在当前 commit 新建一个 tag
$ git tag [tag-name]

# 在指定 commit 上新建一个 tag
$ git tag [tag-name] [commit-id]

# 创建一个 tag 并指定标签信息
$ git tag -a [tag-name] -m &quot;[message]&quot; [commit-id]

# 删除标签
$ git tag -d [tag-name]

# 推送本地标签至远程版本库
$ git push [remote-name] [tag-name]

# 推送所有尚未推送的本地标签至远程版本库
$ git push [remote-name] --tags

# 删除远程版本库中的标签，先删除本地，再推送删除远程
$ git tag -d [tag-name]
$ git push [remote-name] :refs&#x2F;tags&#x2F;[tag-name]
</code></pre>

<h2 id="信息查看"><a href="#信息查看" class="headerlink" title="信息查看"></a>信息查看</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 显示有变更的文件
$ git status

# 显示当前分支的版本历史
$ git log

# 显示commit历史，以及每次commit发生变更的文件
$ git log --stat

# 搜索提交历史，根据关键词
$ git log -S [keyword]

# 显示某个commit之后的所有变动，每个commit占据一行
$ git log [tag] HEAD --pretty&#x3D;format:%s

# 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件
$ git log [tag] HEAD --grep feature

# 显示某个文件的版本历史，包括文件改名
$ git log --follow [file]
$ git whatchanged [file]

# 显示指定文件相关的每一次diff
$ git log -p [file]

# 显示过去5次提交
$ git log -5 --pretty --oneline

# 显示所有提交过的用户，按提交次数排序
$ git shortlog -sn

# 显示指定文件是什么人在什么时间修改过
$ git blame [file]

# 显示暂存区和工作区的差异
$ git diff

# 显示暂存区和上一个commit的差异
$ git diff --cached [file]

# 显示工作区与当前分支最新commit之间的差异
$ git diff HEAD

# 显示两次提交之间的差异
$ git diff [first-branch]...[second-branch]

# 显示今天你写了多少行代码
$ git diff --shortstat &quot;@&#123;0 day ago&#125;&quot;

# 显示某次提交的元数据和内容变化
$ git show [commit]

# 显示某次提交发生变化的文件
$ git show --name-only [commit]

# 显示某次提交时，某个文件的内容
$ git show [commit]:[filename]

# 显示当前分支的最近几次提交
$ git reflog</code></pre>

<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 生成一个可供发布的压缩包
$ git archive</code></pre>
<hr>
<p> 参考资料：<br><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000">廖雪峰的官方网站 - Git 教程</a><br><a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html?utm_source=tool.lu">阮一峰 - 常用 Git 清单</a><br><a href="https://git-scm.com/docs">git-scm</a></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>工具使用</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>git rebase</title>
    <url>/2020/05/14/git-rebase/</url>
    <content><![CDATA[<h3 id="0-Rebase-Introduction"><a href="#0-Rebase-Introduction" class="headerlink" title="0. Rebase Introduction"></a>0. Rebase Introduction</h3><p><img src="https://image.jqz3.tech/blog/20200514112614.png?imageView2/0/q/75%7Cwatermark/2/text/aHR0cHM6Ly9qcXozLnRlY2g=/font/bWljcm9zb2Z0IHlhaGVp/fontsize/360/fill/I0ZGRkZGRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10"></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git checkout -b bugFix
# edit and add
git commit
git checkout master
# edit and add
git commit
git checkout bugFix
git rebase master</code></pre>
<span id="more"></span>

<p><img src="https://image.jqz3.tech/blog/20200514112519.png?imageView2/0/q/75%7Cwatermark/2/text/aHR0cHM6Ly9qcXozLnRlY2g=/font/bWljcm9zb2Z0IHlhaGVp/fontsize/360/fill/I0ZGRkZGRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10"></p>
<h3 id="1-Rebasing-over-9000-times"><a href="#1-Rebasing-over-9000-times" class="headerlink" title="1. Rebasing over 9000 times"></a>1. Rebasing over 9000 times</h3><p><img src="https://image.jqz3.tech/blog/20200514140400.png?imageView2/0/q/75%7Cwatermark/2/text/aHR0cHM6Ly9qcXozLnRlY2g=/font/bWljcm9zb2Z0IHlhaGVp/fontsize/360/fill/I0ZGRkZGRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10"></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git rebase master bugFix
git rebase bugFix side
git rebase side another
git rebase another master</code></pre>
<p><img src="https://image.jqz3.tech/blog/20200514140248.png?imageView2/0/q/75%7Cwatermark/2/text/aHR0cHM6Ly9qcXozLnRlY2g=/font/bWljcm9zb2Z0IHlhaGVp/fontsize/360/fill/I0ZGRkZGRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10"></p>
<h3 id="2-Interactive-Rebase"><a href="#2-Interactive-Rebase" class="headerlink" title="2. Interactive Rebase"></a>2. Interactive Rebase</h3><p><img src="https://image.jqz3.tech/blog/20200514141649.png?imageView2/0/q/75%7Cwatermark/2/text/aHR0cHM6Ly9qcXozLnRlY2g=/font/bWljcm9zb2Z0IHlhaGVp/fontsize/360/fill/I0ZGRkZGRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10"></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git rebase -i overHere --solution-ordering C3,C5,C4</code></pre>

<p><img src="https://image.jqz3.tech/blog/20200514141738.png?imageView2/0/q/75%7Cwatermark/2/text/aHR0cHM6Ly9qcXozLnRlY2g=/font/bWljcm9zb2Z0IHlhaGVp/fontsize/360/fill/I0ZGRkZGRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10"></p>
<p><a href="https://learngitbranching.js.org/">https://learngitbranching.js.org/</a></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>工具使用</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 的简单使用</title>
    <url>/2016/07/16/git-use/</url>
    <content><![CDATA[<h2 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h2><ul>
<li>创建一个空文件夹作为 Git 版本库，可以以 <code>pwd</code> 查看当前目录：<pre class="line-numbers language-c" data-language="c"><code class="language-c">$ mkdir repository   
$ cd repository&#x2F;   
$ pwd   
&#x2F;Users&#x2F;Joker&#x2F;repository</code></pre></li>
</ul>
<span id="more"></span>

<ul>
<li><p>初始化 Git ，会在目录下生成一个 .git 的隐藏文件夹，可以以 <code>ls -ah</code> 查看：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">$ git init   
Initialized empty Git repository in &#x2F;Users&#x2F;Joker&#x2F;repository&#x2F;.git&#x2F;   
$ ls -ah   
.　　　　..　　　　.git</code></pre></li>
<li><p>新建一个 readme.txt 文件，并输入 “This is a readme file.” ，<code>:wq</code> 保存并退出，以 <code>cat</code> 查看文件：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">$ vi readme.txt   
$ cat readme.txt   
This is a readme file.</code></pre></li>
<li><p>将新建的 readme.txt 文件添加到工作区：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">$ git add readme.txt</code></pre></li>
<li><p>用 <code>git commit</code> 告诉 Git ，把文件提交到仓库：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">$ git commit -m &quot;Add a readme file.&quot;   
[master (root-commit) 10593c0] Add a readme file.   
 1 file changed, 1 insertion(+)   
 create mode 100644 readme.txt   </code></pre></li>
</ul>
<h2 id="查看修改状态"><a href="#查看修改状态" class="headerlink" title="查看修改状态"></a>查看修改状态</h2><ul>
<li><p>继续修改 readme.txt 文件，添加 “Learn how to view the current status.”：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">$ vi readme.txt   </code></pre></li>
<li><p>查看当前状态：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">$ git status   
On branch master   
Changes not staged for commit:   
  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)   
  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)

  modified:   readme.txt

no changes added to commit (use &quot;git add&quot; and&#x2F;or &quot;git commit -a&quot;)</code></pre></li>
<li><p>可以清楚地看到 Git 告诉我们 readme.txt 文件被修改了，<code>git diff</code> 查看具体修改内容：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">$ git diff   
diff --git a&#x2F;readme.txt b&#x2F;readme.txt   
index d344129..cff7032 100644   
--- a&#x2F;readme.txt   
+++ b&#x2F;readme.txt   
@@ -1 +1,3 @@   
 This is a readme file.   
+   
+Learn how to view the current status.</code></pre></li>
<li><p>将 readme.text 提交到工作区：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">$ git add readme.txt   </code></pre></li>
<li><p>再次查看状态：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">$ git status   
On branch master   
Changes to be committed:   
  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)   

   modified:   readme.txt</code></pre></li>
<li><p>提示告知我们提交修改：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">$ git commit -m &quot;Learn how to view the current status.&quot;   
[master 1410245] Learn how to view the current status.   
 1 file changed, 2 insertions(+)  </code></pre></li>
</ul>
<h2 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h2><ul>
<li><p>再次修改 readme.txt 文件，添加 “Learn how to rollback the version.” 并提交：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">$ vi readme.txt   
$ git add readme.txt   
$ git commit -m &quot;Learn how to rollback the version&quot;.  
[master c2ae0fb] Learn how to rollback the version.   
 1 file changed, 2 insertions(+)</code></pre></li>
<li><p>查看日记：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">$ git log   
commit c2ae0fbc27acf5463417d4ee2f3b1258337fe26f   
Author: ZJQ-Joker &lt;zjq_joker@163.com&gt;   
Date:   Wed Aug 10 19:57:22 2016 +0800   

   Learn how to rollback the version.

commit 14102454a9156d43b13838f0c8a8dc5e5db417dd   
Author: ZJQ-Joker &lt;zjq_joker@163.com&gt;   
Date:   Wed Aug 10 19:52:36 2016 +0800

   Learn how to view the current status.

commit 10593c028451209db0fea36598e21e51294a92bf   
Author: ZJQ-Joker &lt;zjq_joker@163.com&gt;   
Date:   Wed Aug 10 14:56:37 2016 +0800

   Add a readme file.</code></pre></li>
<li><p>查看单行日记：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">$ git log --pretty&#x3D;oneline   
c2ae0fbc27acf5463417d4ee2f3b1258337fe26f Learn how to rollback the version.   
14102454a9156d43b13838f0c8a8dc5e5db417dd Learn how to view the current status.   
10593c028451209db0fea36598e21e51294a92bf Add a readme file.</code></pre>
<p>前面的一大串数字是 <code>commit id</code> 而后面的则是你 commit 时添加的描述。</p>
</li>
<li><p>回退至上一版本：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">$ git reset --hard HEAD^
HEAD is now at 1410245 Learn how to view the current status.</code></pre></li>
<li><p>查看是否回退至上一版本：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">$ cat readme.txt 
This is a readme file.

Learn how to view the current status.</code></pre></li>
<li><p>再查看日志，之前的日志已经消失：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">$ git log
commit 14102454a9156d43b13838f0c8a8dc5e5db417dd
Author: ZJQ &lt;Joker@a110-232-153-192.deploy.akamaitechnologies.com&gt;
Date:   Wed Aug 10 19:52:36 2016 +0800

    Learn how to view the current status.

commit 10593c028451209db0fea36598e21e51294a92bf
Author: ZJQ-Joker &lt;zjq_joker@163.com&gt;
Date:   Wed Aug 10 14:56:37 2016 +0800

    Add a readme file.
</code></pre></li>
<li><p>通过 commit id 回退至指定版本，commit id 可以简写：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">$ git reset --hard 10593
HEAD is now at 10593c0 Add a readme file.</code></pre></li>
<li><p>再查看是否已回退至指定 commit id 的版本：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">$ cat readme.txt 
This is a readme file.
$ git log
commit 10593c028451209db0fea36598e21e51294a92bf
Author: ZJQ-Joker &lt;zjq_joker@163.com&gt;
Date:   Wed Aug 10 14:56:37 2016 +0800

    Add a readme file.
</code></pre></li>
<li><p>若是想看之前的 commit id ，回退至后面修改的版本可以：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">$ git reflog
10593c0 HEAD@&#123;0&#125;: reset: moving to 10593
1410245 HEAD@&#123;1&#125;: reset: moving to HEAD^
c2ae0fb HEAD@&#123;2&#125;: commit: Learn how to rollback the version.
1410245 HEAD@&#123;3&#125;: commit: Learn how to view the current status.
10593c0 HEAD@&#123;4&#125;: commit (initial): Add a readme file.</code></pre></li>
<li><p>回退至 commit id 为 c2ae0 的版本：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">$ git reset --hard c2ae0
HEAD is now at c2ae0fb Learn how to rollback the version.</code></pre></li>
</ul>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>工具使用</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>处理 GitHub 更新 RSA SSH host key 导致的问题</title>
    <url>/2023/03/28/handle-github-update-rsa-ssh-host-key/</url>
    <content><![CDATA[<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>在 2023-03-23 GitHub 出于安全原因更新了他们的 RSA SSH host key，如果你使用的是 ECDSA 或者 Ed25519 keys 则不需要任何操作，如果你是通过 RSA key SSH 连接的 GitHub 则可能会显示类似以下信息：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!
github.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl
Someone could be eavesdropping on you right now (man-in-the-middle attack)!
It is also possible that a host key has just been changed.
The fingerprint for the RSA key sent by the remote host is
SHA256:uNiVztksCsDhcc0u9e8BujQXVUpKZIDTMczCvj3tD2s.
Please contact your system administrator.
Add correct host key in &#x2F;Users&#x2F;Joker&#x2F;.ssh&#x2F;known_hosts to get rid of this message.
Offending RSA key in &#x2F;Users&#x2F;Joker&#x2F;.ssh&#x2F;known_hosts:1
Host key for github.com has changed and you have requested strict checking.
Host key verification failed.</code></pre>

<span id="more"></span>

<h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><p>如果显示以上信息则需要更新 <code>~/.ssh/known_hosts</code> 中 <code>github.com</code> 旧的 RSA host key。</p>
<p>可以通过执行以下命令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 移除旧的 github.com RSA key
ssh-keygen -R github.com
# 通过 GitHub 接口更新 github.com RSA key
curl -L https:&#x2F;&#x2F;api.github.com&#x2F;meta | jq -r &#39;.ssh_keys | .[]&#39; | sed -e &#39;s&#x2F;^&#x2F;github.com &#x2F;&#39; &gt;&gt; ~&#x2F;.ssh&#x2F;known_hosts</code></pre>

<p>或者手动编辑 <code>~/.ssh/known_hosts</code> 中 <code>github.com</code> RSA key 为以下：</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">github.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCj7ndNxQowgcQnjshcLrqPEiiphnt+VTTvDP6mHBL9j1aNUkY4Ue1gvwnGLVlOhGeYrnZaMgRK6+PKCUXaDbC7qtbW8gIkhL7aGCsOr&#x2F;C56SJMy&#x2F;BCZfxd1nWzAOxSDPgVsmerOBYfNqltV9&#x2F;hWCqBywINIR+5dIg6JTJ72pcEpEjcYgXkE2YEFXV1JHnsKgbLWNlhScqb2UmyRkQyytRLtL+38TGxkxCflmO+5Z8CSSNY7GidjMIZ7Q4zMjA2n1nGrlTDkzwDCsw+wqFPGQA179cnfGWOWRVruj16z6XyvxvjJwbz0wQZ75XK5tKSb7FNyeIEs4TT4jk+S4dhPeAUC5y+bDYirYgM4GC7uEnztnZyaVWQ7B381AK4Qdrwt51ZqExKbQpTUNn+EjqoTwvqNj4kqx5QUCI0ThS&#x2F;YkOxJCXmPUWZbhjpCg56i+2aB6CmK2JGhn57K5mj0MNdBXA4&#x2F;WnwH6XoPWJzK5Nyu2zB3nAZp+S5hpQs+p1vN1&#x2F;wsjk&#x3D;</code></pre>

<h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p>如果你完成以上操作可以执行以下指令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh -T git@github.com -o VisualHostKey&#x3D;yes</code></pre>

<p>查看显示的 fingerprint 是否是以下值：</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">SHA256:uNiVztksCsDhcc0u9e8BujQXVUpKZIDTMczCvj3tD2s</code></pre>

<p>如果是则表示你更新成功，使用的是新的 RSA SSH key。</p>
<h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><ul>
<li><a href="https://stackoverflow.com/questions/75830783/warning-remote-host-identification-has-changed-did-github-change-their-rsa">ssh - “Warning: Remote Host Identification Has Changed” — Did GitHub change their RSA key? - Stack Overflow</a></li>
<li><a href="https://github.blog/2023-03-23-we-updated-our-rsa-ssh-host-key">We updated our RSA SSH host key | The GitHub Blog</a></li>
</ul>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>问题解决</category>
      </categories>
  </entry>
  <entry>
    <title>vscode 更改显示语言</title>
    <url>/2016/10/23/how-to-change-vscode-language/</url>
    <content><![CDATA[<h2 id="Configure-Language-指令"><a href="#Configure-Language-指令" class="headerlink" title="Configure Language 指令"></a>Configure Language 指令</h2><ol>
<li><code>shift</code> + <code>command</code> 唤出 <strong>Command Palette</strong></li>
<li>输入 <code>Configure Language</code> 确定</li>
<li>编辑 <code>locale.json</code> 文件<pre class="line-numbers language-json" data-language="json"><code class="language-json">&#123;
    &#x2F;&#x2F; 定义 VSCode 的显示语言。
    &#x2F;&#x2F; 请参阅 https:&#x2F;&#x2F;go.microsoft.com&#x2F;fwlink&#x2F;?LinkId&#x3D;761051，了解支持的语言列表。
    &#x2F;&#x2F; 要更改值需要重启 VSCode。
    &quot;locale&quot;:&quot;en&quot;
&#125;</code></pre>
<span id="more"></span></li>
</ol>
<h2 id="可选的语言环境"><a href="#可选的语言环境" class="headerlink" title="可选的语言环境"></a>可选的语言环境</h2><table>
<thead>
<tr>
<th>Display Language</th>
<th>Locale</th>
</tr>
</thead>
<tbody><tr>
<td>English (US)</td>
<td><code>en</code></td>
</tr>
<tr>
<td>Simplified Chinese</td>
<td><code>zh-CN</code></td>
</tr>
<tr>
<td>Traditional Chinese</td>
<td><code>zh-TW</code></td>
</tr>
<tr>
<td>French</td>
<td><code>fr</code></td>
</tr>
<tr>
<td>German</td>
<td><code>de</code></td>
</tr>
<tr>
<td>Italian</td>
<td><code>it</code></td>
</tr>
<tr>
<td>Japanese</td>
<td><code>ja</code></td>
</tr>
<tr>
<td>Korean</td>
<td><code>ko</code></td>
</tr>
<tr>
<td>Russian</td>
<td><code>ru</code></td>
</tr>
<tr>
<td>Spanish</td>
<td><code>es</code></td>
</tr>
</tbody></table>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>工具使用</category>
        <category>VSCode</category>
      </categories>
      <tags>
        <tag>VSCode</tag>
      </tags>
  </entry>
  <entry>
    <title>【面试题】+initialize 相关</title>
    <url>/2019/08/28/initialize/</url>
    <content><![CDATA[<h2 id="initialize-方法会在什么时候调用？"><a href="#initialize-方法会在什么时候调用？" class="headerlink" title="+ initialize 方法会在什么时候调用？"></a><code>+ initialize</code> 方法会在什么时候调用？</h2><p><code>+ initialize</code> 方法会在类第一次接收到消息时调用。</p>
<span id="more"></span>

<h2 id="initialize-方法是否会被多次调用？"><a href="#initialize-方法是否会被多次调用？" class="headerlink" title="+ initialize 方法是否会被多次调用？"></a><code>+ initialize</code> 方法是否会被多次调用？</h2><p><code>+ initialize</code> 方法是通过 <code>objc_msgSend</code> 函数进行调用的，所以如果子类未实现 <code>+ initialize</code> 方法，则父类会调用多次。</p>
<h2 id="initialize-方法的调用顺序"><a href="#initialize-方法的调用顺序" class="headerlink" title="+ initialize 方法的调用顺序"></a><code>+ initialize</code> 方法的调用顺序</h2><p>先调用父类的 <code>+ initialize</code> 方法，再调用子类的（先初始化父类，再初始化子类，每个类只会初始化一次）。如果分类实现了 <code>+ initialize</code> 方法，则会覆盖类本身的 <code>+ initialize</code> 方法。</p>
<h2 id="objc4-源码分析"><a href="#objc4-源码分析" class="headerlink" title="objc4 源码分析"></a>objc4 源码分析</h2><pre class="mermaid">
graph TB
subgraph objc-runtime-new.mm
    A[class_getInstanceMethod]
    B[lookUpImpOrForward]
    C[realizeAndInitializeIfNeeded_locked]
    D[initializeAndLeaveLocked]
    E[initializeAndMaybeRelock]
end
subgraph objc-initialize.mm
    F[initializeNonMetaClass]
    G[callInitialize]
    H(&quot;((void(*)(Class, SEL))objc_msgSend)(cls, @selector(initialize));&quot;)
end

A--&gt;B
B--&gt;C
C--&gt;D
D--&gt;E
E--&gt;F
F--&gt;G
F--&gt;|&quot;supercls &#x3D; cls-&gt;getSuperclass();&lt;br&gt;if (supercls &amp;&amp; !supercls-&gt;isInitialized())&quot;|F
G--&gt;H

</pre><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>编程相关</category>
        <category>Objective-C</category>
        <category>面试相关</category>
        <category>runtime</category>
      </categories>
      <tags>
        <tag>initialize</tag>
      </tags>
  </entry>
  <entry>
    <title>安装 Quick Look 插件</title>
    <url>/2021/11/28/install-quick-look-plugin/</url>
    <content><![CDATA[<h2 id="brew"><a href="#brew" class="headerlink" title="brew"></a>brew</h2><p>如果有上传至 brew 可以通过 brew 安装：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 查找是否有插件
brew search 插件名
# 安装该插件
brew install 插件名</code></pre>
<span id="more"></span>

<h2 id="手动"><a href="#手动" class="headerlink" title="手动"></a>手动</h2><p>如果 brew 上没有可以通过手动的方式：</p>
<ol>
<li>下载插件，一般为 <code>.qlgenerator</code> 文件；</li>
<li>将下载的插件移动至 <code>~/Library/QuickLook</code> 文件夹下；</li>
<li>终端执行 <code>qlmanage -r</code> 重载插件列表。</li>
</ol>
<p>参考资料：<a href="https://github.com/sindresorhus/quick-look-plugins">https://github.com/sindresorhus/quick-look-plugins</a></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
  </entry>
  <entry>
    <title>brew 安装 Xcode 管理工具 xcodes 时报错</title>
    <url>/2021/06/09/install-xcodes-error/</url>
    <content><![CDATA[<p>brew 安装 <a href="https://github.com/RobotsAndPencils/XcodesApp">xcodes</a> 时报错：<code>Error: Permission denied @ dir_s_mkdir - /usr/local/Caskroom/xcodes</code></p>
<span id="more"></span>

<p><img src="https://image.jqz3.tech/blog/20210609145808.png?imageView2/0/q/75%7Cwatermark/2/text/aHR0cHM6Ly9qcXozLnRlY2g=/font/bWljcm9zb2Z0IHlhaGVp/fontsize/360/fill/I0ZGRkZGRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10"></p>
<p>解决：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sudo chown -R $(whoami):staff ~&#x2F;Library&#x2F;Caches&#x2F;Homebrew &#x2F;usr&#x2F;local&#x2F;Caskroom&#x2F;</code></pre>

<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>问题解决</category>
      </categories>
      <tags>
        <tag>Xcode</tag>
      </tags>
  </entry>
  <entry>
    <title>【面试题】Category 相关</title>
    <url>/2019/08/27/interview-category/</url>
    <content><![CDATA[<h2 id="Category-的实现原理"><a href="#Category-的实现原理" class="headerlink" title="Category 的实现原理"></a>Category 的实现原理</h2><pre class="mermaid">
graph TB
subgraph objc4
    subgraph objc-os.mm
        A[_objc_init]
        D[map_images_nolock]
    end
    subgraph objc-runtime-new.mm
        C[map_images]
        E[_read_images]
        F[load_categories_nolock]
        G[attachCategories]
    end
    subgraph objc-runtime-new.h
        H[attachLists]
        I[struct category_t]
    end
end
subgraph dyld
    B[_dyld_objc_notify_register]
end

A--&gt;B
B--&gt;C
C--&gt;D
D--&gt;E
E--&gt;F
F--&gt;G
G--&gt;H

</pre>

<span id="more"></span>

<pre class="line-numbers language-cpp" data-language="cpp" data-start="2194" data-line="" data-line-offset="2193"><div class="caption"><span>&nbsp;</span><a href="https://github.com/Coder-ZJQ/objc4-818.2/blob/main/runtime/objc-runtime-new.h#L2194-L2215">objc-runtime-new.h#L2194-L2215</a></div><code class="language-cpp">struct category_t &#123;
    const char *name;
    classref_t cls;
    WrappedPtr&lt;method_list_t, PtrauthStrip&gt; instanceMethods;
    WrappedPtr&lt;method_list_t, PtrauthStrip&gt; classMethods;
    struct protocol_list_t *protocols;
    struct property_list_t *instanceProperties;
    &#x2F;&#x2F; Fields below this point are not always present on disk.
    struct property_list_t *_classProperties;

    method_list_t *methodsForMeta(bool isMeta) &#123;
        if (isMeta) return classMethods;
        else return instanceMethods;
    &#125;
    
    property_list_t *propertiesForMeta(bool isMeta, struct header_info *hi);
    
    protocol_list_t *protocolsForMeta(bool isMeta) &#123;
        if (isMeta) return nullptr;
        else return protocols;
    &#125;
&#125;;</code></pre>


<pre class="language-cpp" data-language="cpp" data-line="939" data-line-offset="913"><div class="caption"><span>&nbsp;</span><a href="https://github.com/Coder-ZJQ/objc4-818.2/blob/main/runtime/objc-os.mm#L916-L944">objc-os.mm#L916-L944</a></div><code class="language-cpp">&#x2F;***********************************************************************
* _objc_init
* Bootstrap initialization. Registers our image notifier with dyld.
* Called by libSystem BEFORE library initialization time
**********************************************************************&#x2F;

void _objc_init(void)
&#123;
    static bool initialized &#x3D; false;
    if (initialized) return;
    initialized &#x3D; true;
    
    &#x2F;&#x2F; fixme defer initialization until an objc-using image is found?
    environ_init();
    tls_init();
    static_init();
    runtime_init();
    exception_init();
#if __OBJC2__
    cache_t::init();
#endif
    _imp_implementationWithBlock_init();
    
    _dyld_objc_notify_register(&amp;map_images, load_images, unmap_image);

#if __OBJC2__
    didCallDyldNotifyRegister &#x3D; true;
#endif
&#125;</code></pre>


<pre class="language-cpp" data-language="cpp" data-line="65,66,67" data-line-offset="52"><div class="caption"><span>&nbsp;</span><a href="https://github.com/Coder-ZJQ/dyld-852.2/blob/main/include/mach-o/dyld_priv.h#L55-L67">dyld_priv.h#L55-L67</a></div><code class="language-cpp">&#x2F;&#x2F;
&#x2F;&#x2F; Note: only for use by objc runtime
&#x2F;&#x2F; Register handlers to be called when objc images are mapped, unmapped, and initialized.
&#x2F;&#x2F; Dyld will call back the &quot;mapped&quot; function with an array of images that contain an objc-image-info section.
&#x2F;&#x2F; Those images that are dylibs will have the ref-counts automatically bumped, so objc will no longer need to
&#x2F;&#x2F; call dlopen() on them to keep them from being unloaded.  During the call to _dyld_objc_notify_register(),
&#x2F;&#x2F; dyld will call the &quot;mapped&quot; function with already loaded objc images.  During any later dlopen() call,
&#x2F;&#x2F; dyld will also call the &quot;mapped&quot; function.  Dyld will call the &quot;init&quot; function when dyld would be called
&#x2F;&#x2F; initializers in that image.  This is when objc calls any +load methods in that image.
&#x2F;&#x2F;
void _dyld_objc_notify_register(_dyld_objc_notify_mapped    mapped,
                                _dyld_objc_notify_init      init,
                                _dyld_objc_notify_unmapped  unmapped);</code></pre>


<pre class="language-cpp" data-language="cpp" data-line="3123" data-line-offset="3108"><div class="caption"><span>&nbsp;</span><a href="https://github.com/Coder-ZJQ/objc4-818.2/blob/main/runtime/objc-runtime-new.mm#L3111-L3124">objc-runtime-new.mm#L3111-L3124</a></div><code class="language-cpp">&#x2F;***********************************************************************
* map_images
* Process the given images which are being mapped in by dyld.
* Calls ABI-agnostic code after taking ABI-specific locks.
*
* Locking: write-locks runtimeLock
**********************************************************************&#x2F;
void
map_images(unsigned count, const char * const paths[],
           const struct mach_header * const mhdrs[])
&#123;
    mutex_locker_t lock(runtimeLock);
    return map_images_nolock(count, paths, mhdrs);
&#125;</code></pre>


<pre class="language-cpp" data-language="cpp" data-line="596" data-line-offset="569"><div class="caption"><span>&nbsp;</span><a href="https://github.com/Coder-ZJQ/objc4-818.2/blob/main/runtime/objc-os.mm#L437-L607">objc-os.mm#L437-L607</a></div><code class="language-cpp">&#x2F;***********************************************************************
* map_images_nolock
* Process the given images which are being mapped in by dyld.
* All class registration and fixups are performed (or deferred pending
* discovery of missing superclasses etc), and +load methods are called.
*
* info[] is in bottom-up order i.e. libobjc will be earlier in the 
* array than any library that links to libobjc.
*
* Locking: loadMethodLock(old) or runtimeLock(new) acquired by map_images.
**********************************************************************&#x2F;
#if __OBJC2__
#include &quot;objc-file.h&quot;
#else
#include &quot;objc-file-old.h&quot;
#endif

void 
map_images_nolock(unsigned mhCount, const char * const mhPaths[],
                  const struct mach_header * const mhdrs[])
&#123;
    &#x2F;&#x2F; ......

    if (hCount &gt; 0) &#123;
        _read_images(hList, hCount, totalClasses, unoptimizedTotalClasses);
    &#125;
    
    firstTime &#x3D; NO;
    
    &#x2F;&#x2F; Call image load funcs after everything is set up.
    for (auto func : loadImageFuncs) &#123;
        for (uint32_t i &#x3D; 0; i &lt; mhCount; i++) &#123;
            func(mhdrs[i]);
        &#125;
    &#125;
&#125;</code></pre>


<pre class="language-cpp" data-language="cpp" data-line="3744" data-line-offset="3721"><div class="caption"><span>&nbsp;</span><a href="https://github.com/Coder-ZJQ/objc4-818.2/blob/main/runtime/objc-runtime-new.mm#L3492-L3861">objc-runtime-new.mm#L3492-L3861</a></div><code class="language-cpp">&#x2F;***********************************************************************
* _read_images
* Perform initial processing of the headers in the linked 
* list beginning with headerList. 
*
* Called by: map_images_nolock
*
* Locking: runtimeLock acquired by map_images
  **********************************************************************&#x2F;
  void _read_images(header_info **hList, uint32_t hCount, int totalClasses, int unoptimizedTotalClasses)
  &#123;

    &#x2F;&#x2F; ......

    &#x2F;&#x2F; Discover categories. Only do this after the initial category
    &#x2F;&#x2F; attachment has been done. For categories present at startup,
    &#x2F;&#x2F; discovery is deferred until the first load_images call after
    &#x2F;&#x2F; the call to _dyld_objc_notify_register completes. rdar:&#x2F;&#x2F;problem&#x2F;53119145
    if (didInitialAttachCategories) &#123;
        for (EACH_HEADER) &#123;
            load_categories_nolock(hi);
        &#125;
    &#125;

    &#x2F;&#x2F; ......

&#125;</code></pre>


<pre class="language-cpp" data-language="cpp" data-line="3173,3183" data-line-offset="3124"><div class="caption"><span>&nbsp;</span><a href="https://github.com/Coder-ZJQ/objc4-818.2/blob/main/runtime/objc-runtime-new.mm#L3127-L3194">objc-runtime-new.mm#L3127-L3194</a></div><code class="language-cpp">static void load_categories_nolock(header_info *hi) &#123;
    bool hasClassProperties &#x3D; hi-&gt;info()-&gt;hasCategoryClassProperties();

    size_t count;
    auto processCatlist &#x3D; [&amp;](category_t * const *catlist) &#123;
        for (unsigned i &#x3D; 0; i &lt; count; i++) &#123;
            category_t *cat &#x3D; catlist[i];
            Class cls &#x3D; remapClass(cat-&gt;cls);
            locstamped_category_t lc&#123;cat, hi&#125;;
    
            if (!cls) &#123;
                &#x2F;&#x2F; Category&#39;s target class is missing (probably weak-linked).
                &#x2F;&#x2F; Ignore the category.
                if (PrintConnecting) &#123;
                    _objc_inform(&quot;CLASS: IGNORING category \?\?\?(%s) %p with &quot;
                                 &quot;missing weak-linked target class&quot;,
                                 cat-&gt;name, cat);
                &#125;
                continue;
            &#125;
    
            &#x2F;&#x2F; Process this category.
            if (cls-&gt;isStubClass()) &#123;
                &#x2F;&#x2F; Stub classes are never realized. Stub classes
                &#x2F;&#x2F; don&#39;t know their metaclass until they&#39;re
                &#x2F;&#x2F; initialized, so we have to add categories with
                &#x2F;&#x2F; class methods or properties to the stub itself.
                &#x2F;&#x2F; methodizeClass() will find them and add them to
                &#x2F;&#x2F; the metaclass as appropriate.
                if (cat-&gt;instanceMethods ||
                    cat-&gt;protocols ||
                    cat-&gt;instanceProperties ||
                    cat-&gt;classMethods ||
                    cat-&gt;protocols ||
                    (hasClassProperties &amp;&amp; cat-&gt;_classProperties))
                &#123;
                    objc::unattachedCategories.addForClass(lc, cls);
                &#125;
            &#125; else &#123;
                &#x2F;&#x2F; First, register the category with its target class.
                &#x2F;&#x2F; Then, rebuild the class&#39;s method lists (etc) if
                &#x2F;&#x2F; the class is realized.
                if (cat-&gt;instanceMethods ||  cat-&gt;protocols
                    ||  cat-&gt;instanceProperties)
                &#123;
                    if (cls-&gt;isRealized()) &#123;
                        attachCategories(cls, &amp;lc, 1, ATTACH_EXISTING);
                    &#125; else &#123;
                        objc::unattachedCategories.addForClass(lc, cls);
                    &#125;
                &#125;
    
                if (cat-&gt;classMethods  ||  cat-&gt;protocols
                    ||  (hasClassProperties &amp;&amp; cat-&gt;_classProperties))
                &#123;
                    if (cls-&gt;ISA()-&gt;isRealized()) &#123;
                        attachCategories(cls-&gt;ISA(), &amp;lc, 1, ATTACH_EXISTING | ATTACH_METACLASS);
                    &#125; else &#123;
                        objc::unattachedCategories.addForClass(lc, cls-&gt;ISA());
                    &#125;
                &#125;
            &#125;
        &#125;
    &#125;;
    
    processCatlist(hi-&gt;catlist(&amp;count));
    processCatlist(hi-&gt;catlist2(&amp;count));
&#125;</code></pre>


<pre class="line-numbers language-cpp" data-language="cpp" data-start="1377" data-line="" data-line-offset="1376"><div class="caption"><span>&nbsp;</span><a href="https://github.com/Coder-ZJQ/objc4-818.2/blob/main/runtime/objc-runtime-new.mm#L1377-L1465">objc-runtime-new.mm#L1377-L1465</a></div><code class="language-cpp">&#x2F;&#x2F; Attach method lists and properties and protocols from categories to a class.
&#x2F;&#x2F; Assumes the categories in cats are all loaded and sorted by load order, 
&#x2F;&#x2F; oldest categories first.
static void
attachCategories(Class cls, const locstamped_category_t *cats_list, uint32_t cats_count,
                 int flags)
&#123;
    if (slowpath(PrintReplacedMethods)) &#123;
        printReplacements(cls, cats_list, cats_count);
    &#125;
    if (slowpath(PrintConnecting)) &#123;
        _objc_inform(&quot;CLASS: attaching %d categories to%s class &#39;%s&#39;%s&quot;,
                     cats_count, (flags &amp; ATTACH_EXISTING) ? &quot; existing&quot; : &quot;&quot;,
                     cls-&gt;nameForLogging(), (flags &amp; ATTACH_METACLASS) ? &quot; (meta)&quot; : &quot;&quot;);
    &#125;

    &#x2F;*
     * Only a few classes have more than 64 categories during launch.
     * This uses a little stack, and avoids malloc.
     *
     * Categories must be added in the proper order, which is back
     * to front. To do that with the chunking, we iterate cats_list
     * from front to back, build up the local buffers backwards,
     * and call attachLists on the chunks. attachLists prepends the
     * lists, so the final result is in the expected order.
     *&#x2F;
    constexpr uint32_t ATTACH_BUFSIZ &#x3D; 64;
    method_list_t   *mlists[ATTACH_BUFSIZ];
    property_list_t *proplists[ATTACH_BUFSIZ];
    protocol_list_t *protolists[ATTACH_BUFSIZ];
    
    uint32_t mcount &#x3D; 0;
    uint32_t propcount &#x3D; 0;
    uint32_t protocount &#x3D; 0;
    bool fromBundle &#x3D; NO;
    bool isMeta &#x3D; (flags &amp; ATTACH_METACLASS);
    auto rwe &#x3D; cls-&gt;data()-&gt;extAllocIfNeeded();
    
    for (uint32_t i &#x3D; 0; i &lt; cats_count; i++) &#123;
        auto&amp; entry &#x3D; cats_list[i];
    
        method_list_t *mlist &#x3D; entry.cat-&gt;methodsForMeta(isMeta);
        if (mlist) &#123;
            if (mcount &#x3D;&#x3D; ATTACH_BUFSIZ) &#123;
                prepareMethodLists(cls, mlists, mcount, NO, fromBundle, __func__);
                rwe-&gt;methods.attachLists(mlists, mcount);
                mcount &#x3D; 0;
            &#125;
            mlists[ATTACH_BUFSIZ - ++mcount] &#x3D; mlist;
            fromBundle |&#x3D; entry.hi-&gt;isBundle();
        &#125;
    
        property_list_t *proplist &#x3D;
            entry.cat-&gt;propertiesForMeta(isMeta, entry.hi);
        if (proplist) &#123;
            if (propcount &#x3D;&#x3D; ATTACH_BUFSIZ) &#123;
                rwe-&gt;properties.attachLists(proplists, propcount);
                propcount &#x3D; 0;
            &#125;
            proplists[ATTACH_BUFSIZ - ++propcount] &#x3D; proplist;
        &#125;
    
        protocol_list_t *protolist &#x3D; entry.cat-&gt;protocolsForMeta(isMeta);
        if (protolist) &#123;
            if (protocount &#x3D;&#x3D; ATTACH_BUFSIZ) &#123;
                rwe-&gt;protocols.attachLists(protolists, protocount);
                protocount &#x3D; 0;
            &#125;
            protolists[ATTACH_BUFSIZ - ++protocount] &#x3D; protolist;
        &#125;
    &#125;
    
    if (mcount &gt; 0) &#123;
        prepareMethodLists(cls, mlists + ATTACH_BUFSIZ - mcount, mcount,
                           NO, fromBundle, __func__);
        rwe-&gt;methods.attachLists(mlists + ATTACH_BUFSIZ - mcount, mcount);
        if (flags &amp; ATTACH_EXISTING) &#123;
            flushCaches(cls, __func__, [](Class c)&#123;
                &#x2F;&#x2F; constant caches have been dealt with in prepareMethodLists
                &#x2F;&#x2F; if the class still is constant here, it&#39;s fine to keep
                return !c-&gt;cache.isConstantOptimizedCache();
            &#125;);
        &#125;
    &#125;
    
    rwe-&gt;properties.attachLists(proplists + ATTACH_BUFSIZ - propcount, propcount);
    
    rwe-&gt;protocols.attachLists(protolists + ATTACH_BUFSIZ - protocount, protocount);
&#125;</code></pre>


<pre class="line-numbers language-cpp" data-language="cpp" data-start="1341" data-line="" data-line-offset="1340"><div class="caption"><span>&nbsp;</span><a href="https://github.com/Coder-ZJQ/objc4-818.2/blob/main/runtime/objc-runtime-new.h#L1341-L1377">objc-runtime-new.h#L1341-L1377</a></div><code class="language-cpp">void attachLists(List* const * addedLists, uint32_t addedCount) &#123;
    if (addedCount &#x3D;&#x3D; 0) return;

    if (hasArray()) &#123;
        &#x2F;&#x2F; many lists -&gt; many lists
        uint32_t oldCount &#x3D; array()-&gt;count;
        uint32_t newCount &#x3D; oldCount + addedCount;
        array_t *newArray &#x3D; (array_t *)malloc(array_t::byteSize(newCount));
        newArray-&gt;count &#x3D; newCount;
        array()-&gt;count &#x3D; newCount;
    
        for (int i &#x3D; oldCount - 1; i &gt;&#x3D; 0; i--)
            newArray-&gt;lists[i + addedCount] &#x3D; array()-&gt;lists[i];
        for (unsigned i &#x3D; 0; i &lt; addedCount; i++)
            newArray-&gt;lists[i] &#x3D; addedLists[i];
        free(array());
        setArray(newArray);
        validate();
    &#125;
    else if (!list  &amp;&amp;  addedCount &#x3D;&#x3D; 1) &#123;
        &#x2F;&#x2F; 0 lists -&gt; 1 list
        list &#x3D; addedLists[0];
        validate();
    &#125; 
    else &#123;
        &#x2F;&#x2F; 1 list -&gt; many lists
        Ptr&lt;List&gt; oldList &#x3D; list;
        uint32_t oldCount &#x3D; oldList ? 1 : 0;
        uint32_t newCount &#x3D; oldCount + addedCount;
        setArray((array_t *)malloc(array_t::byteSize(newCount)));
        array()-&gt;count &#x3D; newCount;
        if (oldList) array()-&gt;lists[addedCount] &#x3D; oldList;
        for (unsigned i &#x3D; 0; i &lt; addedCount; i++)
            array()-&gt;lists[i] &#x3D; addedLists[i];
        validate();
    &#125;
&#125;</code></pre>

<h2 id="如何给-Category-添加成员变量？"><a href="#如何给-Category-添加成员变量？" class="headerlink" title="如何给 Category 添加成员变量？"></a>如何给 Category 添加成员变量？</h2><p>通过关联对象：</p>
<pre class="line-numbers language-objectivec" data-language="objectivec"><code class="language-objectivec">&#x2F;** 
 * Sets an associated value for a given object using a given key and association policy.
 * 
 * @param object The source object for the association.
 * @param key The key for the association.
 * @param value The value to associate with the key key for object. Pass nil to clear an existing association.
 * @param policy The policy for the association. For possible values, see “Associative Object Behaviors.”
 * 
 * @see objc_setAssociatedObject
 * @see objc_removeAssociatedObjects
 *&#x2F;
OBJC_EXPORT void
objc_setAssociatedObject(id _Nonnull object, const void * _Nonnull key,
                         id _Nullable value, objc_AssociationPolicy policy)
    OBJC_AVAILABLE(10.6, 3.1, 9.0, 1.0, 2.0);

&#x2F;** 
 * Returns the value associated with a given object for a given key.
 * 
 * @param object The source object for the association.
 * @param key The key for the association.
 * 
 * @return The value associated with the key \e key for \e object.
 * 
 * @see objc_setAssociatedObject
 *&#x2F;
OBJC_EXPORT id _Nullable
objc_getAssociatedObject(id _Nonnull object, const void * _Nonnull key)
    OBJC_AVAILABLE(10.6, 3.1, 9.0, 1.0, 2.0);

&#x2F;** 
 * Removes all associations for a given object.
 * 
 * @param object An object that maintains associated objects.
 * 
 * @note The main purpose of this function is to make it easy to return an object 
 *  to a &quot;pristine state”. You should not use this function for general removal of
 *  associations from objects, since it also removes associations that other clients
 *  may have added to the object. Typically you should use \c objc_setAssociatedObject 
 *  with a nil value to clear an association.
 * 
 * @see objc_setAssociatedObject
 * @see objc_getAssociatedObject
 *&#x2F;
OBJC_EXPORT void
objc_removeAssociatedObjects(id _Nonnull object)
    OBJC_AVAILABLE(10.6, 3.1, 9.0, 1.0, 2.0);</code></pre>

<h3 id="key"><a href="#key" class="headerlink" title="key"></a>key</h3><pre class="line-numbers language-objectivec" data-language="objectivec"><code class="language-objectivec">static void *MyKey &#x3D; &amp;MyKey;

objc_setAssociatedObject(obj, MyKey, value, OBJC_ASSOCIATION_RETAIN_NONATOMIC)
objc_getAssociatedObject(obj, MyKey)</code></pre>

<pre class="line-numbers language-objectivec" data-language="objectivec"><code class="language-objectivec">static char MyKey;

objc_setAssociatedObject(obj, &amp;MyKey, value, OBJC_ASSOCIATION_RETAIN_NONATOMIC)
objc_getAssociatedObject(obj, &amp;MyKey)</code></pre>

<pre class="line-numbers language-objectivec" data-language="objectivec"><code class="language-objectivec">&#x2F;&#x2F; 使用属性名作为 key
objc_setAssociatedObject(obj, @&quot;property&quot;, value, OBJC_ASSOCIATION_RETAIN_NONATOMIC);
objc_getAssociatedObject(obj, @&quot;property&quot;);</code></pre>

<pre class="line-numbers language-objectivec" data-language="objectivec"><code class="language-objectivec">&#x2F;&#x2F; 使用get方法的 @selector 作为 key
objc_setAssociatedObject(obj, @selector(getter), value, OBJC_ASSOCIATION_RETAIN_NONATOMIC)
objc_getAssociatedObject(obj, @selector(getter))
</code></pre>


<h3 id="objc-AssociationPolicy"><a href="#objc-AssociationPolicy" class="headerlink" title="objc_AssociationPolicy"></a>objc_AssociationPolicy</h3><pre class="line-numbers language-objectivec" data-language="objectivec"><code class="language-objectivec">&#x2F;* Associative References *&#x2F;

&#x2F;**
 * Policies related to associative references.
 * These are options to objc_setAssociatedObject()
 *&#x2F;
typedef OBJC_ENUM(uintptr_t, objc_AssociationPolicy) &#123;
    OBJC_ASSOCIATION_ASSIGN &#x3D; 0,           &#x2F;**&lt; Specifies a weak reference to the associated object. *&#x2F;
    OBJC_ASSOCIATION_RETAIN_NONATOMIC &#x3D; 1, &#x2F;**&lt; Specifies a strong reference to the associated object. 
                                            *   The association is not made atomically. *&#x2F;
    OBJC_ASSOCIATION_COPY_NONATOMIC &#x3D; 3,   &#x2F;**&lt; Specifies that the associated object is copied. 
                                            *   The association is not made atomically. *&#x2F;
    OBJC_ASSOCIATION_RETAIN &#x3D; 01401,       &#x2F;**&lt; Specifies a strong reference to the associated object.
                                            *   The association is made atomically. *&#x2F;
    OBJC_ASSOCIATION_COPY &#x3D; 01403          &#x2F;**&lt; Specifies that the associated object is copied.
                                            *   The association is made atomically. *&#x2F;
&#125;;</code></pre>



<h2 id="关联对象的实现原理"><a href="#关联对象的实现原理" class="headerlink" title="关联对象的实现原理"></a>关联对象的实现原理</h2><pre class="mermaid">
flowchart LR

subgraph AssociationsManager
    A[&quot;AssociationsHashMap &amp;get()&quot;]
end

subgraph AssociationsHashMap
    B[&quot;DisguisedPtr＜objc_object＞&quot;]
    C[&quot;ObjectAssociationMap&quot;]
end

subgraph ObjectAssociationMap
    D[&quot;const void *&quot;]
    E[&quot;ObjcAssociation&quot;]
end

subgraph ObjcAssociation
    direction LR
    F[&quot;uintptr_t _policy&quot;]
    G[&quot;id _value&quot;]
end

A--&gt;|object|AssociationsHashMap
B--&gt;C
C--&gt;|key|ObjectAssociationMap
D--&gt;E
E--&gt;ObjcAssociation

</pre>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>编程相关</category>
        <category>Objective-C</category>
        <category>面试相关</category>
        <category>runtime</category>
      </categories>
      <tags>
        <tag>Category</tag>
      </tags>
  </entry>
  <entry>
    <title>【面试题】KVC 相关</title>
    <url>/2019/08/22/interview-kvc/</url>
    <content><![CDATA[<h2 id="KVC-的实现原理"><a href="#KVC-的实现原理" class="headerlink" title="KVC 的实现原理"></a>KVC 的实现原理</h2><h3 id="setValue-forKey"><a href="#setValue-forKey" class="headerlink" title="setValue:forKey:"></a>setValue:forKey:</h3><h4 id="利用-hopper-分析-setValue-forKey-实现："><a href="#利用-hopper-分析-setValue-forKey-实现：" class="headerlink" title="利用 hopper 分析 setValue:forKey: 实现："></a>利用 hopper 分析 <code>setValue:forKey:</code> 实现：</h4><p><img src="https://image.jqz3.tech/blog/image-20210824114625891.png?imageView2/0/q/75%7Cwatermark/2/text/aHR0cHM6Ly9qcXozLnRlY2g=/font/bWljcm9zb2Z0IHlhaGVp/fontsize/360/fill/I0ZGRkZGRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10"></p>
<span id="more"></span>

<p><img src="https://image.jqz3.tech/blog/20210824114727.png?imageView2/0/q/75%7Cwatermark/2/text/aHR0cHM6Ly9qcXozLnRlY2g=/font/bWljcm9zb2Z0IHlhaGVp/fontsize/360/fill/I0ZGRkZGRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10"></p>
<p><img src="https://image.jqz3.tech/blog/20210824115106.png?imageView2/0/q/75%7Cwatermark/2/text/aHR0cHM6Ly9qcXozLnRlY2g=/font/bWljcm9zb2Z0IHlhaGVp/fontsize/360/fill/I0ZGRkZGRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10"></p>
<h4 id="大概实现流程："><a href="#大概实现流程：" class="headerlink" title="大概实现流程："></a>大概实现流程：</h4><pre class="mermaid">
graph TB
A[setValue:forKey:] --&gt; B[_createValueSetterWithContainerClassID:key:]
B--&gt;C[按顺序查找 set 方法&lt;br&#x2F;&gt;setKey:&lt;br&#x2F;&gt;_setKey:&lt;br&#x2F;&gt; setIsKey:]
C--&gt;D{是否查找到方法}
D--&gt;|是|E[调用该方法]
D--&gt;|否|F{accessInstanceVariablesDirectly}
F--&gt;|YES|G[按顺序查找实例变量&lt;br&gt;_key&lt;br&gt;_isKey&lt;br&gt;key&lt;br&gt;isKey]
F--&gt;|NO|H[NSUnknownKeyException:&lt;br&gt;&#39;setValue:forUndefinedKey:&#39;&lt;br&gt; this class is not key value coding-compliant for the key foo.]
G--&gt;I{是否查找到实例变量}
I--&gt;|是|J[修改实例变量]
I--&gt;|否|K[NSUnknownKeyException:&lt;br&gt;&#39;setValue:forUndefinedKey:&#39;&lt;br&gt; this class is not key value coding-compliant for the key foo.]
</pre>

<h3 id="valueForKey"><a href="#valueForKey" class="headerlink" title="valueForKey:"></a>valueForKey:</h3><h4 id="利用-hopper-分析-valueforKey-实现："><a href="#利用-hopper-分析-valueforKey-实现：" class="headerlink" title="利用 hopper 分析 valueforKey: 实现："></a>利用 hopper 分析 <code>valueforKey:</code> 实现：</h4><p><img src="https://image.jqz3.tech/blog/20210824115318.png?imageView2/0/q/75%7Cwatermark/2/text/aHR0cHM6Ly9qcXozLnRlY2g=/font/bWljcm9zb2Z0IHlhaGVp/fontsize/360/fill/I0ZGRkZGRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10"></p>
<p><img src="https://image.jqz3.tech/blog/20210824115442.png?imageView2/0/q/75%7Cwatermark/2/text/aHR0cHM6Ly9qcXozLnRlY2g=/font/bWljcm9zb2Z0IHlhaGVp/fontsize/360/fill/I0ZGRkZGRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10"></p>
<p><img src="https://image.jqz3.tech/blog/20210824115601.png?imageView2/0/q/75%7Cwatermark/2/text/aHR0cHM6Ly9qcXozLnRlY2g=/font/bWljcm9zb2Z0IHlhaGVp/fontsize/360/fill/I0ZGRkZGRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10"></p>
<h4 id="大概实现流程：-1"><a href="#大概实现流程：-1" class="headerlink" title="大概实现流程："></a>大概实现流程：</h4><pre class="mermaid">
graph TB
A[valueforKey:] --&gt; B[_createValueGetterWithContainerClassID:key:]
B--&gt;C[按顺序查找 get 方法&lt;br&#x2F;&gt;getKey&lt;br&#x2F;&gt;key&lt;br&#x2F;&gt; isKey&lt;br&#x2F;&gt;_getKey&lt;br&#x2F;&gt;_key]
C--&gt;D{是否查找到方法}
D--&gt;|是|E[调用该方法]
D--&gt;|否|F{accessInstanceVariablesDirectly}
F--&gt;|YES|G[按顺序查找实例变量&lt;br&gt;_key&lt;br&gt;_isKey&lt;br&gt;key&lt;br&gt;isKey]
F--&gt;|NO|H[NSUnknownKeyException:&lt;br&gt;&#39;setValue:forUndefinedKey:&#39;&lt;br&gt; this class is not key value coding-compliant for the key foo.]
G--&gt;I{是否查找到实例变量}
I--&gt;|是|J[获得实例变量]
I--&gt;|否|K[NSUnknownKeyException:&lt;br&gt;&#39;setValue:forUndefinedKey:&#39;&lt;br&gt; this class is not key value coding-compliant for the key foo.]
</pre>

<h3 id="accessInstanceVariablesDirectly"><a href="#accessInstanceVariablesDirectly" class="headerlink" title="accessInstanceVariablesDirectly"></a>accessInstanceVariablesDirectly</h3><p><code>accessInstanceVariablesDirectly</code> 默认返回 YES：<br><img src="https://image.jqz3.tech/blog/20210824121651.png?imageView2/0/q/75%7Cwatermark/2/text/aHR0cHM6Ly9qcXozLnRlY2g=/font/bWljcm9zb2Z0IHlhaGVp/fontsize/360/fill/I0ZGRkZGRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10"></p>
<h3 id="示例项目"><a href="#示例项目" class="headerlink" title="示例项目"></a>示例项目</h3><p><a href="https://github.com/Coder-ZJQ/demos/tree/master/interview/oc-kvc-impl">https://github.com/Coder-ZJQ/demos/tree/master/interview/oc-kvc-impl</a></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>面试相关</category>
      </categories>
  </entry>
  <entry>
    <title>【面试题】KVO 相关</title>
    <url>/2019/08/22/interview-kvo/</url>
    <content><![CDATA[<h2 id="KVO-的实现原理"><a href="#KVO-的实现原理" class="headerlink" title="KVO 的实现原理"></a>KVO 的实现原理</h2><p>以对 <code>JQObject</code> 对象的 <code>foo</code> 属性进行 <code> KVO</code> 监听为例：</p>
<ul>
<li><p>KVO 会在运行时生成 <code>NSKVONotifying_JQObject</code> 类：</p>
<ul>
<li><code>NSKVONotifying_JQObject</code> 类继承自 <code>JQObject</code>；</li>
<li>并替换父类 <code>JQObject</code> 的 <code>setFoo:</code> 方法实现为 <code>(Foundation __NSSetXXXValueAndNotify)</code> 其中 XXX 为监听属性类型；</li>
<li>然后重写 <code>class</code> 方法，返回 <code>JQObject</code>；</li>
<li>重写 <code>dealloc</code> 方法，在对象销毁时做一些清理操作；</li>
<li>重写 <code>NSObject</code> 的 <code>_isKVOA</code> 方法，并返回 YES。</li>
</ul>
</li>
<li><p>将监听对象的 isa 指针指向 <code>NSKVONotifying_JQObject</code> 类对象；</p>
</li>
<li><p>将监听对象的 superclass 指针指向 <code>JQObject</code> 对象；</p>
</li>
</ul>
<span id="more"></span>

<p>Foundation 框架中相关 <code>__NSSetXXXValueAndNotify</code> 方法：</p>
<p><img src="https://image.jqz3.tech/blog/20210824094514.png?imageView2/0/q/75%7Cwatermark/2/text/aHR0cHM6Ly9qcXozLnRlY2g=/font/bWljcm9zb2Z0IHlhaGVp/fontsize/360/fill/I0ZGRkZGRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt="Foundation 框架中的 __NSSetXXXValueAndNotify 方法"></p>
<p>Foundation 框架中 _isKVOA 实现（默认返回 NO ）：</p>
<p><img src="https://image.jqz3.tech/blog/20210824095516.png?imageView2/0/q/75%7Cwatermark/2/text/aHR0cHM6Ly9qcXozLnRlY2g=/font/bWljcm9zb2Z0IHlhaGVp/fontsize/360/fill/I0ZGRkZGRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10"></p>
<h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><pre class="line-numbers language-objectivec" data-language="objectivec"><code class="language-objectivec">#import &quot;ViewController.h&quot;
#import &lt;objc&#x2F;runtime.h&gt;

@interface JQObject : NSObject

@property (nonatomic, assign) int foo;

@end

@implementation JQObject

@end


@interface ViewController ()

@end

NSString *getMethods(Class cls) &#123;
    unsigned int count;
    Method *methodList &#x3D; class_copyMethodList(cls, &amp;count);
    NSMutableString *methodNames &#x3D; @&quot;&quot;.mutableCopy;
    for (int i &#x3D; 0; i &lt; count; i++) &#123;
        Method method &#x3D; methodList[i];
        [methodNames appendFormat:@&quot;%@, &quot;, NSStringFromSelector(method_getName(method))];
    &#125;
    free(methodList);
    return methodNames;
&#125;

@implementation ViewController

- (void)viewDidLoad &#123;
    [super viewDidLoad];
    
    JQObject *obj1 &#x3D; [[JQObject alloc] init];
    JQObject *obj2 &#x3D; [[JQObject alloc] init];
    obj1.foo &#x3D; 10;
    
    &#x2F;&#x2F; 未添加 KVO 监听前
    Class obj1Isa &#x3D; object_getClass(obj1);
    Class obj2Isa &#x3D; object_getClass(obj2);
    NSString *obj1Methods &#x3D; getMethods(obj1Isa);
    NSString *obj2Methods &#x3D; getMethods(obj2Isa);
    Class obj1SuperClass &#x3D; class_getSuperclass(obj1Isa);
    Class obj2SuperClass &#x3D; class_getSuperclass(obj2Isa);
    IMP obj1IMP &#x3D; [obj1 methodForSelector:@selector(setFoo:)];
    IMP obj2IMP &#x3D; [obj2 methodForSelector:@selector(setFoo:)];
    NSLog(@&quot;\n\n未添加 KVO 监听前:\n&quot;
          &quot;obj1 isa: %@\n&quot;
          &quot;obj2 isa: %@\n&quot;
          &quot;obj1 的实例方法：%@\n&quot;
          &quot;obj2 的实例方法：%@\n&quot;
          &quot;obj1 superclass: %@\n&quot;
          &quot;obj2 superclass: %@\n&quot;
          &quot;obj1 &#39;setFoo:&#39; 方法地址: %p\n&quot;
          &quot;obj2 &#39;setFoo:&#39; 方法地址: %p\n&quot;
          , obj1Isa, obj2Isa, obj1Methods, obj2Methods, obj1SuperClass, obj2SuperClass, obj1IMP, obj2IMP);
    
    &#x2F;&#x2F; 添加 KVO 监听
    [obj2 addObserver:self forKeyPath:@&quot;foo&quot; options:NSKeyValueObservingOptionNew | NSKeyValueObservingOptionOld context:NULL];
    
    &#x2F;&#x2F; 添加 KVO 监听后
    obj1Isa &#x3D; object_getClass(obj1);
    obj2Isa &#x3D; object_getClass(obj2);
    obj1Methods &#x3D; getMethods(obj1Isa);
    obj2Methods &#x3D; getMethods(obj2Isa);
    obj1IMP &#x3D; [obj1 methodForSelector:@selector(setFoo:)];
    obj2IMP &#x3D; [obj2 methodForSelector:@selector(setFoo:)];
    obj1SuperClass &#x3D; class_getSuperclass(obj1Isa);
    obj2SuperClass &#x3D; class_getSuperclass(obj2Isa);
    NSLog(@&quot;\n\n添加 KVO 监听之后:\n&quot;
          &quot;obj1 isa: %@\n&quot;
          &quot;obj2 isa: %@\n&quot;
          &quot;obj1 的实例方法：%@\n&quot;
          &quot;obj2 的实例方法：%@\n&quot;
          &quot;obj1 superclass: %@\n&quot;
          &quot;obj2 superclass: %@\n&quot;
          &quot;obj1 &#39;setFoo:&#39; 方法地址: %p\n&quot;
          &quot;obj2 &#39;setFoo:&#39; 方法地址: %p\n&quot;
          , obj1Isa, obj2Isa, obj1Methods, obj2Methods, obj1SuperClass, obj2SuperClass, obj1IMP, obj2IMP);

    &#x2F;&#x2F; 断点 LLDB 打印 obj2IMP:
    &#x2F;&#x2F; p obj2IMP;
    &#x2F;&#x2F; (IMP) $0 &#x3D; 0x00007fff207bf79f (Foundation&#96;_NSSetIntValueAndNotify)
    
&#125;

- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary&lt;NSKeyValueChangeKey,id&gt; *)change context:(void *)context &#123;
    NSLog(@&quot;%@: %@&quot;, keyPath, change);
&#125;

@end</code></pre>

<p>打印：</p>
<img src="https://image.jqz3.tech/blog/20210824113129.png?imageView2/0/q/75|watermark/2/text/aHR0cHM6Ly9qcXozLnRlY2g=/font/bWljcm9zb2Z0IHlhaGVp/fontsize/360/fill/I0ZGRkZGRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" style="zoom:50%;" />

<p>示例项目地址：<br><a href="https://github.com/Coder-ZJQ/demos/tree/master/interview/oc-kvo-impl">https://github.com/Coder-ZJQ/demos/tree/master/interview/oc-kvo-impl</a></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>编程相关</category>
        <category>Objective-C</category>
        <category>面试相关</category>
      </categories>
  </entry>
  <entry>
    <title>【面试题】Objective-C 相关</title>
    <url>/2016/08/16/interview-objc/</url>
    <content><![CDATA[<h2 id="＠property-、-＠synthesize-与-＠dynamic-的作用"><a href="#＠property-、-＠synthesize-与-＠dynamic-的作用" class="headerlink" title="＠property 、 ＠synthesize 与 ＠dynamic 的作用"></a>＠property 、 ＠synthesize 与 ＠dynamic 的作用</h2><ul>
<li><strong>@property</strong>: 用于声明成员变量的 getter/setter 方法</li>
<li><strong>@synthesize</strong>: 与 @property 配套使用，@synthesize 会自动生成一个<code>_</code>开头的成员变量（若是不指定的话），并实现 @property 声明的 getter/setter 方法。</li>
<li><strong>@dynamic</strong>: 不会自动生成成员变量，程序员需自己添加成员变量并实现 getter/setter 方法。    </li>
</ul>
<span id="more"></span>

<p><strong>具体细节详见以下代码：</strong></p>
<pre class="line-numbers language-objectivec" data-language="objectivec"><code class="language-objectivec">#import &lt;Foundation&#x2F;Foundation.h&gt;

@interface JQPerson : NSObject
&#123;
    &#x2F;&#x2F;  3.1 由于 @dynamic 并不会自动生成成员变量，因此需自主添加成员变量用于 getter&#x2F;setter 方法，否则会报 “Use undeclared identifier” 错误。
    NSInteger _weight;
&#125;

&#x2F;&#x2F;  1. @property 的简单使用
@property (nonatomic, copy) NSString *name;
@property (nonatomic, assign) NSInteger age;
@property (nonatomic, assign) NSInteger height;
@property (nonatomic, assign) NSInteger weight;

@end

@implementation JQPerson

&#x2F;&#x2F;  2. @synthesize 的使用
&#x2F;&#x2F;  2.1 默认生成&quot;_&quot;开头的成员变量， 即：
@synthesize name &#x3D; _name;
&#x2F;&#x2F;  2.2 生成与 @property 相同的不带下划线的成员变量：
@synthesize age;
&#x2F;&#x2F;  2.3 指定生成的成员变量名：
@synthesize height &#x3D; H;

&#x2F;&#x2F;  3. @dynamic 的使用
@dynamic weight;
&#x2F;&#x2F;  3.2 实现 getter&#x2F;setter 方法（这里只是简单的实现）：
- (void)setWeight:(NSInteger)weight &#123;
    _weight &#x3D; weight;
&#125;
- (NSInteger)weight &#123;
    return _weight;
&#125;

@end</code></pre>
<p><em><strong>（Tips：在都没有使用 @synthesize 以及 @dynamic 时，默认为 <code>@synthesize propertyName = _propertyName;</code>。但若是同时实现了 getter&amp;setter 方法，则隐含表示为 <code>@dynamic propertyName;</code> 因此编译器并不会自动生成成员变量，此时若是使用成员变量则会出现 “Use undeclared identifier” 错误。解决方法可以在类的声明中自主添加私有的成员变量，或者使用 @synthesize，告知编译器自动生成成员变量。）</strong></em></p>
<h2 id="property-有哪些关键字？"><a href="#property-有哪些关键字？" class="headerlink" title="@property 有哪些关键字？"></a>@property 有哪些关键字？</h2><p><code>@property</code>的关键字主要分为以下几类：   </p>
<ul>
<li><strong>原子性</strong>（<code>nonatomic/atomic</code>）：<ul>
<li><strong>atomic</strong>: atomic 是线程安全的，但是执行效率不高。使用 atomic 关键字，编译器会自动为属性的 getter&amp;setter 方法中加入一些互斥加锁代码，以保证在多个线程的情况下，不会出现一条线程调用 setter 方法但未执行完之前，另一条线程也调用 setter 方法，保证数据的有效性。也正是因为加锁的原因，会消耗一定的性能，影响效率。</li>
<li><strong>nonatomic</strong>: nonatomic 不是线程安全的，如果对象无需考虑多线程的情况，可以使用 nonatomic 关键字，编译器便不会生成多余的加锁代码，可以提高执行效率。开发中一般常用 nonatomic 关键字。</li>
</ul>
</li>
<li><strong>读写权限</strong>（<code>readonly/readwrite</code>）：<ul>
<li><strong>readonly</strong>: 只读关键字，只可调用对象的 getter 方法。</li>
<li><strong>readwrite</strong>: 可读可写关键字，对象的 getter&amp;setter 方法均可调用。</li>
</ul>
</li>
<li><strong>内存管理语义</strong>（<code>assign/strong/weak/unsafe_unretained/copy/retain</code>）：<ul>
<li><strong>assign</strong>: 常用于基本数据类型（CGFloat、NSInteger等）。用于直接赋值，不必考虑内存管理，因为基本数据类型一般是分配在栈上的，而栈的内存会由系统自动处理。</li>
<li><strong>strong</strong>: 强引用，引用存在对象即存在。</li>
<li><strong>weak</strong>: 弱引用，只要对象没有强引用指向便会被释放，且 dealloc 会将指针置为 nil。</li>
<li><strong>unsafe_unretained</strong>: 与 assign 及 weak 相似，但 unsafe_unretained 一般用于对象，且被释放后指针并不会被置为 nil，比较少用。</li>
<li><strong>copy</strong>: 与 retain 相似，成员变量的 setter 方法会先 release 旧值， 再 copy 新值，retainCount 为 1。一般用于 NSString、block 等。内容拷贝。</li>
<li><strong>retain</strong>: 在非ARC环境中，成员变量的 setter 方法会先 release 旧值，再 retain 新值，retainCount + 1。指针拷贝。</li>
</ul>
</li>
<li><strong><code>getter&amp;setter</code>方法名</strong>：<br>自定义属性的 getter&amp;setter 方法名，一般常用于 <code>BOOL</code> 类型属性的 getter 方法，如：<code>@property (getter=isOpen)BOOL *open;</code>。</li>
<li>**可否为空<code>Nullability Annotation</code>**（<code>nullable/nonnull/null_resettable/null_unspecified</code>）：为了与 swift 混编，适配 swift 中的 optional 可选类型而新增的关键字，比较少用到。</li>
</ul>
<h2 id="以下代码的打印结果是什么？为什么？"><a href="#以下代码的打印结果是什么？为什么？" class="headerlink" title="以下代码的打印结果是什么？为什么？"></a>以下代码的打印结果是什么？为什么？</h2><pre class="line-numbers language-objectivec" data-language="objectivec"><code class="language-objectivec">@interface JQApple : JQFruit
@end

@implementation JQApple
- (instancetype)init&#123;
    self &#x3D; [super init];
    if (self) &#123;
        NSLog(@&quot;%@&quot;, NSStringFromClass([self class]));
        NSLog(@&quot;%@&quot;, NSStringFromClass([super class]));
    &#125;
    return self;
&#125;
@end</code></pre>

<!-- more -->

<p>按照面向对象的思想应该是分别打印<code>JQApple</code>和<code>JQFruit</code><br>然而运行结果却出乎我们的意料，最终均都打印“JQApple”。这是为什么？</p>
<p>因为<code>self</code>是类的隐藏参数，指向当前调用方法的对象。而<code>super</code>并不是如我们所想是指向当前对象父类的指针。其实<code>super</code>是一个编译器标识符，在运行时中与<code>self</code>相同，指向同一个消息接受者，只是<code>self</code>会优先在当前类的<code>methodLists</code>中查找方法，而<code>super</code>则是优先从父类中查找。验证如下：<br>在终端运行：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ clang -rewrite-objc main.m</code></pre>
<p>可以看到运行时代码如下：</p>
<pre class="line-numbers language-objectivec" data-language="objectivec"><code class="language-objectivec">NSLog((NSString *)&amp;__NSConstantStringImpl__var_folders_ld_03322m393b5cyvhz2zhv2c100000gn_T_main_97554f_mi_0, NSStringFromClass(((Class (*)(id, SEL))(void *)objc_msgSend)((id)self, sel_registerName(&quot;class&quot;))));
NSLog((NSString *)&amp;__NSConstantStringImpl__var_folders_ld_03322m393b5cyvhz2zhv2c100000gn_T_main_97554f_mi_1, NSStringFromClass(((Class (*)(__rw_objc_super *, SEL))(void *)objc_msgSendSuper)((__rw_objc_super)&#123;(id)self, (id)class_getSuperclass(objc_getClass(&quot;JQApple&quot;))&#125;, sel_registerName(&quot;class&quot;))));</code></pre>
<p>删除相关无关类型及方法后代码如下：</p>
<pre class="line-numbers language-objectivec" data-language="objectivec"><code class="language-objectivec">objc_msgSend((id)self, sel_registerName(&quot;class&quot;));
objc_msgSendSuper((__rw_objc_super)&#123;(id)self, (id)class_getSuperclass(objc_getClass(&quot;JQApple&quot;))&#125;, sel_registerName(&quot;class&quot;));</code></pre>
<p>查看函数定义：</p>
<pre class="line-numbers language-objectivec" data-language="objectivec"><code class="language-objectivec">&#x2F;** 
 * Sends a message with a simple return value to an instance of a class.
 * 
 * @param self A pointer to the instance of the class that is to receive the message.
 * @param op The selector of the method that handles the message.
 * @param ... 
 *   A variable argument list containing the arguments to the method.
 * 
 * @return The return value of the method.
 * 
 * @note When it encounters a method call, the compiler generates a call to one of the
 *  functions \c objc_msgSend, \c objc_msgSend_stret, \c objc_msgSendSuper, or \c objc_msgSendSuper_stret.
 *  Messages sent to an object’s superclass (using the \c super keyword) are sent using \c objc_msgSendSuper; 
 *  other messages are sent using \c objc_msgSend. Methods that have data structures as return values
 *  are sent using \c objc_msgSendSuper_stret and \c objc_msgSend_stret.
 *&#x2F;
OBJC_EXPORT id objc_msgSend(id self, SEL op, ...)
    __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_2_0);
&#x2F;** 
 * Sends a message with a simple return value to the superclass of an instance of a class.
 * 
 * @param super A pointer to an \c objc_super data structure. Pass values identifying the
 *  context the message was sent to, including the instance of the class that is to receive the
 *  message and the superclass at which to start searching for the method implementation.
 * @param op A pointer of type SEL. Pass the selector of the method that will handle the message.
 * @param ...
 *   A variable argument list containing the arguments to the method.
 * 
 * @return The return value of the method identified by \e op.
 * 
 * @see objc_msgSend
 *&#x2F;
OBJC_EXPORT id objc_msgSendSuper(struct objc_super *super, SEL op, ...)
    __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_2_0);</code></pre>
<p>可知<code>objc_msgSend</code>函数中的<code>self</code>参数是指指向接收消息的类的实例的指针，即消息接受者，而<code>op</code>参数则是指处理该消息的<code>selector</code>；<code>objc_msgSendSuper</code>函数中的参数<code>super</code>则是一个<code>objc_super</code>结构体，<code>objc_super</code>结构体定义如下：</p>
<pre class="line-numbers language-objectivec" data-language="objectivec"><code class="language-objectivec">&#x2F;&#x2F;&#x2F; Specifies the superclass of an instance. 
struct objc_super &#123;
    &#x2F;&#x2F;&#x2F; Specifies an instance of a class.
    __unsafe_unretained id receiver;

    &#x2F;&#x2F;&#x2F; Specifies the particular superclass of the instance to message. 
    __unsafe_unretained Class super_class;

    &#x2F;* super_class is the first class to search *&#x2F;
&#125;;</code></pre>
<p>其中<code>receiver</code>是指类的实例，<code>super_class</code>则是指该实例的父类。可以看到在编译后的<code>C++</code>代码中有个<code>__rw_objc_super</code>结构体：</p>
<pre class="line-numbers language-objectivec" data-language="objectivec"><code class="language-objectivec">struct __rw_objc_super &#123; 
    struct objc_object *object; 
    struct objc_object *superClass; 
    __rw_objc_super(struct objc_object *o, struct objc_object *s) : object(o), superClass(s) &#123;&#125; 
&#125;;</code></pre>
<p>其实即为<code>objc_super</code>结构体。通过<code>(__rw_objc_super)&#123;(id)self, (id)class_getSuperclass(objc_getClass(&quot;JQApple&quot;))&#125;</code>该段代码可知：我们把<code>self</code>以及<code>JQApple</code>的父类通过结构体的构造方法构造了一个<code>__rw_objc_super</code>结构体，也就是<code>objc_super</code>。因此<code>objc_super</code>结构体中的<code>receiver</code>既是<code>self</code>。所以<code>[self class]</code>和<code>[super class]</code>指向的是同一个消息接受者，只是<code>self</code>会优先从当前类的实现中寻找方法处理消息，而<code>super</code>则是会优先从<code>objc_super</code>结构体中的<code>super_class</code>也就是父类的实现中查找。<code>JQFruit</code>及<code>JQApple</code>中均未实现<code>- (Class)class;</code>方法，因此会逐级向上查找最终调用基类<code>NSObject</code>的<code>- (Class)class;</code>方法，通过官方开源的<code>NSObject</code>的<code>- (Class)class;</code>方法代码：</p>
<pre class="line-numbers language-objectivec" data-language="objectivec"><code class="language-objectivec">- (Class)class&#123;
    return object_getClass(self);
&#125;</code></pre>
<p>可知，消息接受者是<code>self</code>，而<code>[self class]</code>和<code>[super class]</code>指向的是同一个消息接受者，因此该段代码均打印<code>JQApple</code>。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>编程相关</category>
        <category>Objective-C</category>
        <category>面试相关</category>
        <category>runtime</category>
      </categories>
      <tags>
        <tag>runtime</tag>
      </tags>
  </entry>
  <entry>
    <title>【面试题】runtime 相关</title>
    <url>/2018/07/18/interview-runtime/</url>
    <content><![CDATA[<h2 id="一个-NSObject-对象占用多少内存？"><a href="#一个-NSObject-对象占用多少内存？" class="headerlink" title="一个 NSObject 对象占用多少内存？"></a>一个 NSObject 对象占用多少内存？</h2><h3 id="objc4-源码"><a href="#objc4-源码" class="headerlink" title="objc4 源码"></a>objc4 源码</h3><pre class="line-numbers language-objectivec" data-language="objectivec" data-start="2543" data-line="2544" data-line-offset="2542"><div class="caption"><span>&nbsp;</span><a href="https://github.com/Coder-ZJQ/objc4-818.2/blob/main/runtime/NSObject.mm#L2543-L2545">NSObject.mm#L2543-L2545</a></div><code class="language-objectivec">+ (id)alloc &#123;
    return _objc_rootAlloc(self);
    &#125;
    </code></pre>

<pre class="line-numbers language-objectivec" data-language="objectivec" data-start="1941" data-line="1946" data-line-offset="1940"><div class="caption"><span>&nbsp;</span><a href="https://github.com/Coder-ZJQ/objc4-818.2/blob/main/runtime/NSObject.mm#L1941-L1947">NSObject.mm#L1941-L1947</a></div><code class="language-objectivec">&#x2F;&#x2F; Base class implementation of +alloc. cls is not nil.
&#x2F;&#x2F; Calls [cls allocWithZone:nil].
id
_objc_rootAlloc(Class cls)
&#123;
    return callAlloc(cls, false&#x2F;*checkNil*&#x2F;, true&#x2F;*allocWithZone*&#x2F;);
&#125;</code></pre>

<span id="more"></span>

<pre class="line-numbers language-objectivec" data-language="objectivec" data-start="1921" data-line="1929" data-line-offset="1920"><div class="caption"><span>&nbsp;</span><a href="https://github.com/Coder-ZJQ/objc4-818.2/blob/main/runtime/NSObject.mm#L1921-L1938">NSObject.mm#L1921-L1938</a></div><code class="language-objectivec">&#x2F;&#x2F; Call [cls alloc] or [cls allocWithZone:nil], with appropriate
&#x2F;&#x2F; shortcutting optimizations.
static ALWAYS_INLINE id
callAlloc(Class cls, bool checkNil, bool allocWithZone&#x3D;false)
&#123;
#if __OBJC2__
    if (slowpath(checkNil &amp;&amp; !cls)) return nil;
    if (fastpath(!cls-&gt;ISA()-&gt;hasCustomAWZ())) &#123;
        return _objc_rootAllocWithZone(cls, nil);
    &#125;
#endif

    &#x2F;&#x2F; No shortcuts available.
    if (allocWithZone) &#123;
        return ((id(*)(id, SEL, struct _NSZone *))objc_msgSend)(cls, @selector(allocWithZone:), nil);
    &#125;
    return ((id(*)(id, SEL))objc_msgSend)(cls, @selector(alloc));
&#125;</code></pre>


<pre class="line-numbers language-objectivec" data-language="objectivec" data-start="8016" data-line="8021" data-line-offset="8015"><div class="caption"><span>&nbsp;</span><a href="https://github.com/Coder-ZJQ/objc4-818.2/blob/main/runtime/objc-runtime-new.mm#L8016-L8023">objc-runtime-new.mm#L8016-L8023</a></div><code class="language-objectivec">NEVER_INLINE
id
_objc_rootAllocWithZone(Class cls, malloc_zone_t *zone __unused)
&#123;
    &#x2F;&#x2F; allocWithZone under __OBJC2__ ignores the zone parameter
    return _class_createInstanceFromZone(cls, 0, nil,
                                         OBJECT_CONSTRUCT_CALL_BADALLOC);
&#125;</code></pre>


<pre class="line-numbers language-objectivec" data-language="objectivec" data-start="7955" data-line="7975,7976,7977" data-line-offset="7954"><div class="caption"><span>&nbsp;</span><a href="https://github.com/Coder-ZJQ/objc4-818.2/blob/main/runtime/objc-runtime-new.mm#L7955-L8007">objc-runtime-new.mm#L7955-L8007</a></div><code class="language-objectivec">&#x2F;***********************************************************************
* class_createInstance
* fixme
* Locking: none
*
* Note: this function has been carefully written so that the fastpath
* takes no branch.
**********************************************************************&#x2F;
static ALWAYS_INLINE id
_class_createInstanceFromZone(Class cls, size_t extraBytes, void *zone,
                              int construct_flags &#x3D; OBJECT_CONSTRUCT_NONE,
                              bool cxxConstruct &#x3D; true,
                              size_t *outAllocatedSize &#x3D; nil)
&#123;
    ASSERT(cls-&gt;isRealized());

    &#x2F;&#x2F; Read class&#39;s info bits all at once for performance
    bool hasCxxCtor &#x3D; cxxConstruct &amp;&amp; cls-&gt;hasCxxCtor();
    bool hasCxxDtor &#x3D; cls-&gt;hasCxxDtor();
    bool fast &#x3D; cls-&gt;canAllocNonpointer();
    size_t size;

    size &#x3D; cls-&gt;instanceSize(extraBytes);
    if (outAllocatedSize) *outAllocatedSize &#x3D; size;

    id obj;
    if (zone) &#123;
        obj &#x3D; (id)malloc_zone_calloc((malloc_zone_t *)zone, 1, size);
    &#125; else &#123;
        obj &#x3D; (id)calloc(1, size);
    &#125;
    if (slowpath(!obj)) &#123;
        if (construct_flags &amp; OBJECT_CONSTRUCT_CALL_BADALLOC) &#123;
            return _objc_callBadAllocHandler(cls);
        &#125;
        return nil;
    &#125;

    if (!zone &amp;&amp; fast) &#123;
        obj-&gt;initInstanceIsa(cls, hasCxxDtor);
    &#125; else &#123;
        &#x2F;&#x2F; Use raw pointer isa on the assumption that they might be
        &#x2F;&#x2F; doing something weird with the zone or RR.
        obj-&gt;initIsa(cls);
    &#125;

    if (fastpath(!hasCxxCtor)) &#123;
        return obj;
    &#125;

    construct_flags |&#x3D; OBJECT_CONSTRUCT_FREE_ONFAILURE;
    return object_cxxConstructFromClass(obj, cls, construct_flags);
&#125;</code></pre>


<pre class="line-numbers language-objectivec" data-language="objectivec" data-start="2142" data-line="2147,2148,2149" data-line-offset="2141"><div class="caption"><span>&nbsp;</span><a href="https://github.com/Coder-ZJQ/objc4-818.2/blob/main/runtime/objc-runtime-new.h#L2142-L2151">objc-runtime-new.h#L2142-L2151</a></div><code class="language-objectivec">inline size_t instanceSize(size_t extraBytes) const &#123;
    if (fastpath(cache.hasFastInstanceSize(extraBytes))) &#123;
        return cache.fastInstanceSize(extraBytes);
    &#125;

    size_t size &#x3D; alignedInstanceSize() + extraBytes;
    &#x2F;&#x2F; CF requires all objects be at least 16 bytes.
    if (size &lt; 16) size &#x3D; 16;
    return size;
&#125;</code></pre>


<pre class="line-numbers language-objectivec" data-language="objectivec" data-start="2137" data-line="2139" data-line-offset="2136"><div class="caption"><span>&nbsp;</span><a href="https://github.com/Coder-ZJQ/objc4-818.2/blob/main/runtime/objc-runtime-new.h#L2137-L2140">objc-runtime-new.h#L2137-L2140</a></div><code class="language-objectivec">&#x2F;&#x2F; Class&#39;s ivar size rounded up to a pointer-size boundary.
uint32_t alignedInstanceSize() const &#123;
    return word_align(unalignedInstanceSize());
&#125;</code></pre>


<pre class="line-numbers language-objectivec" data-language="objectivec" data-start="37" data-line="48" data-line-offset="36"><div class="caption"><span>&nbsp;</span><a href="https://github.com/Coder-ZJQ/objc4-818.2/blob/main/runtime/objc-os.h#L37-L52">objc-os.h#L37-L52</a></div><code class="language-objectivec">#ifdef __LP64__
#   define WORD_SHIFT 3UL
#   define WORD_MASK 7UL
#   define WORD_BITS 64
#else
#   define WORD_SHIFT 2UL
#   define WORD_MASK 3UL
#   define WORD_BITS 32
#endif

static inline uint32_t word_align(uint32_t x) &#123;
    return (x + WORD_MASK) &amp; ~WORD_MASK;
&#125;
static inline size_t word_align(size_t x) &#123;
    return (x + WORD_MASK) &amp; ~WORD_MASK;
&#125;</code></pre>

<p><a href="https://unix.org/version2/whatsnew/lp64_wp.html">https://unix.org/version2/whatsnew/lp64_wp.html</a><br>LP64 (also known as 4/8/8) denotes long and pointer as 64 bit types</p>
<pre class="line-numbers language-objectivec" data-language="objectivec" data-start="2131" data-line="2134" data-line-offset="2130"><div class="caption"><span>&nbsp;</span><a href="https://github.com/Coder-ZJQ/objc4-818.2/blob/main/runtime/objc-runtime-new.h#L2131-L2135">objc-runtime-new.h#L2131-L2135</a></div><code class="language-objectivec">&#x2F;&#x2F; May be unaligned depending on class&#39;s ivars.
uint32_t unalignedInstanceSize() const &#123;
    ASSERT(isRealized());
    return data()-&gt;ro()-&gt;instanceSize;
&#125;</code></pre>


<pre class="line-numbers language-objectivec" data-language="objectivec" data-start="2153" data-line="" data-line-offset="2152"><div class="caption"><span>&nbsp;</span><a href="https://github.com/Coder-ZJQ/objc4-818.2/blob/main/runtime/objc-runtime-new.h#L2153-L2162">objc-runtime-new.h#L2153-L2162</a></div><code class="language-objectivec">void setInstanceSize(uint32_t newSize) &#123;
    ASSERT(isRealized());
    ASSERT(data()-&gt;flags &amp; RW_REALIZING);
    auto ro &#x3D; data()-&gt;ro();
    if (newSize !&#x3D; ro-&gt;instanceSize) &#123;
        ASSERT(data()-&gt;flags &amp; RW_COPIED_RO);
        *const_cast&lt;uint32_t *&gt;(&amp;ro-&gt;instanceSize) &#x3D; newSize;
    &#125;
    cache.setFastInstanceSize(newSize);
&#125;</code></pre>


<pre class="line-numbers language-objectivec" data-language="objectivec" data-start="7546" data-line="7570,7571,7572,7573,7574,7575,7576,7577,7578,7579,7580,7581,7582,7583,7584" data-line-offset="7545"><div class="caption"><span>&nbsp;</span><a href="https://github.com/Coder-ZJQ/objc4-818.2/blob/main/runtime/objc-runtime-new.mm#L7546-L7623">objc-runtime-new.mm#L7546-L7623</a></div><code class="language-objectivec">static void objc_initializeClassPair_internal(Class superclass, const char *name, Class cls, Class meta)
&#123;
    runtimeLock.assertLocked();

    class_ro_t *cls_ro_w, *meta_ro_w;
    class_rw_t *cls_rw_w, *meta_rw_w;
    
    cls_rw_w   &#x3D; objc::zalloc&lt;class_rw_t&gt;();
    meta_rw_w  &#x3D; objc::zalloc&lt;class_rw_t&gt;();
    cls_ro_w   &#x3D; (class_ro_t *)calloc(sizeof(class_ro_t), 1);
    meta_ro_w  &#x3D; (class_ro_t *)calloc(sizeof(class_ro_t), 1);
    
    cls-&gt;setData(cls_rw_w);
    cls_rw_w-&gt;set_ro(cls_ro_w);
    meta-&gt;setData(meta_rw_w);
    meta_rw_w-&gt;set_ro(meta_ro_w);
    
    &#x2F;&#x2F; Set basic info
    
    cls_rw_w-&gt;flags &#x3D; RW_CONSTRUCTING | RW_COPIED_RO | RW_REALIZED | RW_REALIZING;
    meta_rw_w-&gt;flags &#x3D; RW_CONSTRUCTING | RW_COPIED_RO | RW_REALIZED | RW_REALIZING | RW_META;
    
    cls_ro_w-&gt;flags &#x3D; 0;
    meta_ro_w-&gt;flags &#x3D; RO_META;
    if (superclass) &#123;
        uint32_t flagsToCopy &#x3D; RW_FORBIDS_ASSOCIATED_OBJECTS;
        cls_rw_w-&gt;flags |&#x3D; superclass-&gt;data()-&gt;flags &amp; flagsToCopy;
        cls_ro_w-&gt;instanceStart &#x3D; superclass-&gt;unalignedInstanceSize();
        meta_ro_w-&gt;instanceStart &#x3D; superclass-&gt;ISA()-&gt;unalignedInstanceSize();
        cls-&gt;setInstanceSize(cls_ro_w-&gt;instanceStart);
        meta-&gt;setInstanceSize(meta_ro_w-&gt;instanceStart);
    &#125; else &#123;
        cls_ro_w-&gt;flags |&#x3D; RO_ROOT;
        meta_ro_w-&gt;flags |&#x3D; RO_ROOT;
        cls_ro_w-&gt;instanceStart &#x3D; 0;
        meta_ro_w-&gt;instanceStart &#x3D; (uint32_t)sizeof(objc_class);
        cls-&gt;setInstanceSize((uint32_t)sizeof(id));  &#x2F;&#x2F; just an isa
        meta-&gt;setInstanceSize(meta_ro_w-&gt;instanceStart);
    &#125;
    
    cls_ro_w-&gt;name.store(strdupIfMutable(name), std::memory_order_release);
    meta_ro_w-&gt;name.store(strdupIfMutable(name), std::memory_order_release);
    
    cls_ro_w-&gt;ivarLayout &#x3D; &amp;UnsetLayout;
    cls_ro_w-&gt;weakIvarLayout &#x3D; &amp;UnsetLayout;
    
    meta-&gt;chooseClassArrayIndex();
    cls-&gt;chooseClassArrayIndex();
    
    &#x2F;&#x2F; This absolutely needs to be done before addSubclass
    &#x2F;&#x2F; as initializeToEmpty() clobbers the FAST_CACHE bits
    cls-&gt;cache.initializeToEmpty();
    meta-&gt;cache.initializeToEmpty();

#if FAST_CACHE_META
    meta-&gt;cache.setBit(FAST_CACHE_META);
#endif
    meta-&gt;setInstancesRequireRawIsa();
    
    &#x2F;&#x2F; Connect to superclasses and metaclasses
    cls-&gt;initClassIsa(meta);
    
    if (superclass) &#123;
        meta-&gt;initClassIsa(superclass-&gt;ISA()-&gt;ISA());
        cls-&gt;setSuperclass(superclass);
        meta-&gt;setSuperclass(superclass-&gt;ISA());
        addSubclass(superclass, cls);
        addSubclass(superclass-&gt;ISA(), meta);
    &#125; else &#123;
        meta-&gt;initClassIsa(meta);
        cls-&gt;setSuperclass(Nil);
        meta-&gt;setSuperclass(cls);
        addRootClass(cls);
        addSubclass(cls, meta);
    &#125;
    
    addClassTableEntry(cls);
&#125;</code></pre>


<pre class="line-numbers language-objectivec" data-language="objectivec" data-start="53" data-line="56" data-line-offset="52"><div class="caption"><span>&nbsp;</span><a href="https://github.com/Coder-ZJQ/objc4-818.2/blob/main/runtime/NSObject.h#L53-L58">NSObject.h#L53-L58</a></div><code class="language-objectivec">@interface NSObject &lt;NSObject&gt; &#123;
#pragma clang diagnostic push
#pragma clang diagnostic ignored &quot;-Wobjc-interface-ivars&quot;
    Class isa  OBJC_ISA_AVAILABILITY;
#pragma clang diagnostic pop
&#125;</code></pre>


<pre class="line-numbers language-objectivec" data-language="objectivec" data-start="37" data-line="38" data-line-offset="36"><div class="caption"><span>&nbsp;</span><a href="https://github.com/Coder-ZJQ/objc4-818.2/blob/main/runtime/objc.h#L37-L38">objc.h#L37-L38</a></div><code class="language-objectivec">&#x2F;&#x2F;&#x2F; An opaque type that represents an Objective-C class.
typedef struct objc_class *Class;</code></pre>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>NSObject 对象只有一个 isa 指针成员变量</li>
<li><strong>LP64</strong> 指针类型内存中占 8 个字节</li>
<li>8 个字节 word_align 后返回 8 个字节</li>
<li>而 instanceSize 方法中限制所有对象至少 16 字节(CF requires all objects be at least 16 bytes)</li>
<li>所以一个 NSObject 对象占用 16 字节内存（但只使用了 8 字节存储 isa 指针）</li>
</ul>
<h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-objectivec" data-language="objectivec"><code class="language-objectivec">#import &lt;Foundation&#x2F;Foundation.h&gt;
#import &lt;objc&#x2F;runtime.h&gt;
#import &lt;malloc&#x2F;malloc.h&gt;

int main(int argc, const char * argv[]) &#123;
    @autoreleasepool &#123;
        NSObject *obj &#x3D; [[NSObject alloc] init];

        &#x2F;&#x2F; 获得 NSObject 类的实例对象的成员变量所占用的大小
        size_t instanceSize &#x3D; class_getInstanceSize([NSObject class]);
        &#x2F;&#x2F; 获得 obj 指针所指向内存大小
        size_t mallocSize &#x3D; malloc_size((__bridge const void *)(obj));

        NSLog(@&quot;instance size:%zu&quot;, instanceSize);  &#x2F;&#x2F; 8
        NSLog(@&quot;malloc size:%zu&quot;, mallocSize);      &#x2F;&#x2F; 16
    &#125;
    return 0;
&#125;</code></pre>

<h4 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h4><p>Debug -&gt; Debug Workflow -&gt; View Memory</p>
<img src="https://image.jqz3.tech/blog/20210821161518.png?imageView2/0/q/75|watermark/2/text/aHR0cHM6Ly9qcXozLnRlY2g=/font/bWljcm9zb2Z0IHlhaGVp/fontsize/360/fill/I0ZGRkZGRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" style="zoom: 50%;" />

<h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><h4 id="将-Objective-C-代码转换为-C-C-代码"><a href="#将-Objective-C-代码转换为-C-C-代码" class="headerlink" title="将 Objective-C 代码转换为 C\C++ 代码"></a>将 Objective-C 代码转换为 C\C++ 代码</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">xcrun -sdk iphoneos clang -arch arm64 -rewrite-objc 源文件 -o 输出文件</code></pre>
<p>如果需要链接其它框架，使用 -framework 参数：-framework UIKit</p>
<h4 id="常用-LLDB-指令"><a href="#常用-LLDB-指令" class="headerlink" title="常用 LLDB 指令"></a>常用 LLDB 指令</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 打印
print
p
# 打印对象
po

# 读取内存
# memory read&#x2F;数量格式字节数 内存地址
# x&#x2F;数量格式字节数 内存地址
x&#x2F;3xw 0x10011001

# 写入内存（修改内存中的值）
# memory write 内存地址 数值
memory write 0x10011001 10

# 格式
# x: 16 进制
# d: 10 进制
# f: 浮点
# s: 字符串

# 字节大小（单位）
# b: byte       1 字节
# h: half word  2 字节
# w: word       4 字节
# g: giant word 8 字节</code></pre>



<h2 id="对象的-isa-指针指向哪里？"><a href="#对象的-isa-指针指向哪里？" class="headerlink" title="对象的 isa 指针指向哪里？"></a>对象的 isa 指针指向哪里？</h2><p>OC 中对象分为：</p>
<ul>
<li>实例对象(instance object)</li>
<li>类对象(class object)</li>
<li>元类对象(meta-class object)</li>
</ul>
<p>其中：</p>
<ul>
<li>实例对象的 isa 指针指向类对象；</li>
<li>类对象的 isa 指针指向元类对象；</li>
<li>元类对象的 isa 指针指向基类的元类对象。</li>
</ul>
<img src="https://image.jqz3.tech/blog/Picture1.png?imageView2/0/q/75|watermark/2/text/aHR0cHM6Ly9qcXozLnRlY2g=/font/bWljcm9zb2Z0IHlhaGVp/fontsize/360/fill/I0ZGRkZGRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" style="zoom: 50%;" />

<h3 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h3><p>执行代码：</p>
<pre class="line-numbers language-objectivec" data-language="objectivec"><code class="language-objectivec">#import &lt;Foundation&#x2F;Foundation.h&gt;
#import &lt;objc&#x2F;runtime.h&gt;

&#x2F;*
 objc4 源码中 isa.h L57-L113 宏定义（省略部分）
 https:&#x2F;&#x2F;github.com&#x2F;Coder-ZJQ&#x2F;objc4-818.2&#x2F;blob&#x2F;main&#x2F;runtime&#x2F;isa.h#L57-L113
 *&#x2F;
# if __arm64__
&#x2F;&#x2F; ARM64 simulators have a larger address space, so use the ARM64e
&#x2F;&#x2F; scheme even when simulators build for ARM64-not-e.
#   if __has_feature(ptrauth_calls) || TARGET_OS_SIMULATOR
#     define ISA_MASK        0x007ffffffffffff8ULL
#   else
#     define ISA_MASK        0x0000000ffffffff8ULL
#   endif
# elif __x86_64__
#   define ISA_MASK        0x00007ffffffffff8ULL
# else
#   error unknown architecture for packed isa
# endif

@interface JQObject : NSObject

@end

@implementation JQObject

@end

int main(int argc, const char * argv[]) &#123;
    @autoreleasepool &#123;

        &#x2F;&#x2F; 创建实例对象
        JQObject *obj &#x3D; [[JQObject alloc] init];
        &#x2F;&#x2F; 获取类对象
        Class class &#x3D; object_getClass(obj);
        &#x2F;&#x2F; 获取元类对象
        Class metaClass &#x3D; objc_getMetaClass(&quot;JQObject&quot;);
        &#x2F;&#x2F; 获取基类的元类对象
        Class rootMetaClass &#x3D; objc_getMetaClass(&quot;NSObject&quot;);

&#x2F;&#x2F;        &#39;obj-&gt;isa&#39; 方法已过期，使用 &#39;object_getClass(obj)&#39; 替代获取 isa 指针
&#x2F;&#x2F;        Direct access to Objective-C&#39;s isa is deprecated in favor of object_getClass()
&#x2F;&#x2F;        Replace &#39;obj-&gt;isa&#39; with &#39;object_getClass(obj)&#39;
&#x2F;&#x2F;        long isa &#x3D; (long)obj-&gt;isa;
        
        &#x2F;&#x2F; 将指针地址转换为长整型供计算
        long objIsaAddress &#x3D; (long)object_getClass(obj);
        long classAddress &#x3D; (long)class;
        long classIsaAddress &#x3D; (long)object_getClass(class);
        long metaClassAddress &#x3D; (long)metaClass;
        long metaClassIsaAddress &#x3D; (long)object_getClass(metaClass);
        long rootClassAddress &#x3D; (long)rootMetaClass;
        
        &#x2F;&#x2F; OC 运行时会对 isa 指针进行 ISA_MASK 与操作
        &#x2F;&#x2F; https:&#x2F;&#x2F;github.com&#x2F;Coder-ZJQ&#x2F;objc4-818.2&#x2F;blob&#x2F;main&#x2F;runtime&#x2F;objc-object.h#L260
        if ((objIsaAddress &amp; ISA_MASK) &#x3D;&#x3D; classAddress) &#123;
            NSLog(@&quot;实例对象的 isa 指针指向类对象&quot;);
        &#125;
        if ((classIsaAddress &amp; ISA_MASK) &#x3D;&#x3D; metaClassAddress) &#123;
            NSLog(@&quot;类对象的 isa 指针指向元类对象&quot;);
        &#125;
        if ((metaClassIsaAddress &amp; ISA_MASK) &#x3D;&#x3D; rootClassAddress) &#123;
            NSLog(@&quot;元类对象的 isa 指针指向基类的元类对象&quot;);
        &#125;
    &#125;
    return 0;
&#125;</code></pre>

<p>输出：</p>
<img src="https://image.jqz3.tech/blog/20210822105949.png?imageView2/0/q/75|watermark/2/text/aHR0cHM6Ly9qcXozLnRlY2g=/font/bWljcm9zb2Z0IHlhaGVp/fontsize/360/fill/I0ZGRkZGRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" style="zoom:50%;" />

<p>示例项目地址：<br><a href="https://github.com/Coder-ZJQ/demos/tree/master/interview/oc-isa-to">https://github.com/Coder-ZJQ/demos/tree/master/interview/oc-isa-to</a></p>
<h2 id="OC-的类信息存放在哪里？"><a href="#OC-的类信息存放在哪里？" class="headerlink" title="OC 的类信息存放在哪里？"></a>OC 的类信息存放在哪里？</h2><h3 id="objc4-源码-1"><a href="#objc4-源码-1" class="headerlink" title="objc4 源码"></a>objc4 源码</h3><pre class="line-numbers language-objectivec" data-language="objectivec" data-start="53" data-line="56" data-line-offset="52"><div class="caption"><span>&nbsp;</span><a href="https://github.com/Coder-ZJQ/objc4-818.2/blob/main/runtime/NSObject.h#L53-L58">NSObject.h#L53-L58</a></div><code class="language-objectivec">@interface NSObject &lt;NSObject&gt; &#123;
#pragma clang diagnostic push
#pragma clang diagnostic ignored &quot;-Wobjc-interface-ivars&quot;
    Class isa  OBJC_ISA_AVAILABILITY;
#pragma clang diagnostic pop
&#125;</code></pre>



<pre class="line-numbers language-objectivec" data-language="objectivec" data-start="37" data-line="38" data-line-offset="36"><div class="caption"><span>&nbsp;</span><a href="https://github.com/Coder-ZJQ/objc4-818.2/blob/main/runtime/objc.h#L37-L38">objc.h#L37-L38</a></div><code class="language-objectivec">&#x2F;&#x2F;&#x2F; An opaque type that represents an Objective-C class.
typedef struct objc_class *Class;</code></pre>


<pre class="line-numbers language-objectivec" data-language="objectivec" data-start="1688" data-line="1694,1695,1696" data-line-offset="1687"><div class="caption"><span>&nbsp;</span><a href="https://github.com/Coder-ZJQ/objc4-818.2/blob/main/runtime/objc-runtime-new.h#L1688-L1696">objc-runtime-new.h#L1688-L1696</a></div><code class="language-objectivec">struct objc_class : objc_object &#123;
  objc_class(const objc_class&amp;) &#x3D; delete;
  objc_class(objc_class&amp;&amp;) &#x3D; delete;
  void operator&#x3D;(const objc_class&amp;) &#x3D; delete;
  void operator&#x3D;(objc_class&amp;&amp;) &#x3D; delete;
    &#x2F;&#x2F; Class ISA;
    Class superclass;
    cache_t cache;             &#x2F;&#x2F; formerly cache pointer and vtable
    class_data_bits_t bits;    &#x2F;&#x2F; class_rw_t * plus custom rr&#x2F;alloc flags</code></pre>

<pre class="line-numbers language-objectivec" data-language="objectivec" data-start="40" data-line="42" data-line-offset="39"><div class="caption"><span>&nbsp;</span><a href="https://github.com/Coder-ZJQ/objc4-818.2/blob/main/runtime/objc.h#L40-L43">objc.h#L40-L43</a></div><code class="language-objectivec">&#x2F;&#x2F;&#x2F; Represents an instance of a class.
struct objc_object &#123;
    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;
&#125;;</code></pre>


<pre class="language-objectivec" data-language="objectivec" data-line="1609,1610,1611" data-line-offset="1602"><div class="caption"><span>&nbsp;</span><a href="https://github.com/Coder-ZJQ/objc4-818.2/blob/main/runtime/objc-runtime-new.h#L1609-L1611">objc-runtime-new.h#L1609-L1611</a></div><code class="language-objectivec">struct class_data_bits_t &#123;
&#x2F;&#x2F; ......
public:

    class_rw_t* data() const &#123;
        return (class_rw_t *)(bits &amp; FAST_DATA_MASK);
    &#125;
&#x2F;&#x2F; ......
&#125;</code></pre>


<pre class="language-objectivec" data-language="objectivec" data-line="1531,1532,1533,1534,1535,1536,1537,1548,1549,1550,1551,1552,1553,1554,1555,1557,1558,1559,1560,1561,1562,1563,1564,1566,1567,1568,1569,1570,1571,1572,1573" data-line-offset="1524"><div class="caption"><span>&nbsp;</span><a href="https://github.com/Coder-ZJQ/objc4-818.2/blob/main/runtime/objc-runtime-new.h#L1458-L1574">objc-runtime-new.h#L1458-L1574</a></div><code class="language-objectivec">struct class_rw_t &#123;

    &#x2F;&#x2F; ......
    
    const class_ro_t *ro() const &#123;
        auto v &#x3D; get_ro_or_rwe();
        if (slowpath(v.is&lt;class_rw_ext_t *&gt;())) &#123;
            return v.get&lt;class_rw_ext_t *&gt;(&amp;ro_or_rw_ext)-&gt;ro;
        &#125;
        return v.get&lt;const class_ro_t *&gt;(&amp;ro_or_rw_ext);
    &#125;
    
    void set_ro(const class_ro_t *ro) &#123;
        auto v &#x3D; get_ro_or_rwe();
        if (v.is&lt;class_rw_ext_t *&gt;()) &#123;
            v.get&lt;class_rw_ext_t *&gt;(&amp;ro_or_rw_ext)-&gt;ro &#x3D; ro;
        &#125; else &#123;
            set_ro_or_rwe(ro);
        &#125;
    &#125;
    
    const method_array_t methods() const &#123;
        auto v &#x3D; get_ro_or_rwe();
        if (v.is&lt;class_rw_ext_t *&gt;()) &#123;
            return v.get&lt;class_rw_ext_t *&gt;(&amp;ro_or_rw_ext)-&gt;methods;
        &#125; else &#123;
            return method_array_t&#123;v.get&lt;const class_ro_t *&gt;(&amp;ro_or_rw_ext)-&gt;baseMethods()&#125;;
        &#125;
    &#125;
    
    const property_array_t properties() const &#123;
        auto v &#x3D; get_ro_or_rwe();
        if (v.is&lt;class_rw_ext_t *&gt;()) &#123;
            return v.get&lt;class_rw_ext_t *&gt;(&amp;ro_or_rw_ext)-&gt;properties;
        &#125; else &#123;
            return property_array_t&#123;v.get&lt;const class_ro_t *&gt;(&amp;ro_or_rw_ext)-&gt;baseProperties&#125;;
        &#125;
    &#125;
    
    const protocol_array_t protocols() const &#123;
        auto v &#x3D; get_ro_or_rwe();
        if (v.is&lt;class_rw_ext_t *&gt;()) &#123;
            return v.get&lt;class_rw_ext_t *&gt;(&amp;ro_or_rw_ext)-&gt;protocols;
        &#125; else &#123;
            return protocol_array_t&#123;v.get&lt;const class_ro_t *&gt;(&amp;ro_or_rw_ext)-&gt;baseProtocols&#125;;
        &#125;
    &#125;
&#125;;</code></pre>


<pre class="language-objectivec" data-language="objectivec" data-line="1039,1040,1055" data-line-offset="1034"><div class="caption"><span>&nbsp;</span><a href="https://github.com/Coder-ZJQ/objc4-818.2/blob/main/runtime/objc-runtime-new.h#L1037-L1171">objc-runtime-new.h#L1037-L1171</a></div><code class="language-objectivec">struct class_ro_t &#123;
    uint32_t flags;
    uint32_t instanceStart;
    uint32_t instanceSize;
#ifdef __LP64__
    uint32_t reserved;
#endif

    union &#123;
        const uint8_t * ivarLayout;
        Class nonMetaclass;
    &#125;;
    
    explicit_atomic&lt;const char *&gt; name;
    &#x2F;&#x2F; With ptrauth, this is signed if it points to a small list, but
    &#x2F;&#x2F; may be unsigned if it points to a big list.
    void *baseMethodList;
    protocol_list_t * baseProtocols;
    const ivar_list_t * ivars;
    
    &#x2F;&#x2F; ......

&#125;</code></pre>

<h3 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h3><pre class="mermaid">
classDiagram

class Class
class objc_class {
  Class superclass
  cache_t cache
  class_data_bits_t bits
}
class objc_object {
  Class isa
}
class NSObject {
  Class isa
}
class class_data_bits_t {
  class_rw_t* data
}
class class_rw_t {
  class_ro_t *ro
  method_array_t methods
  property_array_t properties
  protocol_array_t protocols
}
class class_ro_t {
  uint32_t instanceStart
  uint32_t instanceSize
  ivar_list_t * ivars
}

NSObject..&gt;Class
objc_object..&gt;Class
objc_class..&gt;Class
Class--&gt;objc_class : typedef
objc_class--|&gt;objc_object
objc_class..&gt;class_data_bits_t
class_data_bits_t..&gt;class_rw_t
class_rw_t..&gt;class_ro_t

link NSObject &quot;https:&#x2F;&#x2F;github.com&#x2F;Coder-ZJQ&#x2F;objc4-818.2&#x2F;blob&#x2F;main&#x2F;runtime&#x2F;NSObject.h#L53-L58&quot;
link Class &quot;https:&#x2F;&#x2F;github.com&#x2F;Coder-ZJQ&#x2F;objc4-818.2&#x2F;blob&#x2F;main&#x2F;runtime&#x2F;objc.h#L37-L38&quot;
link objc_class &quot;https:&#x2F;&#x2F;github.com&#x2F;Coder-ZJQ&#x2F;objc4-818.2&#x2F;blob&#x2F;main&#x2F;runtime&#x2F;objc-runtime-new.h#L1688-L1696&quot;
link objc_object &quot;https:&#x2F;&#x2F;github.com&#x2F;Coder-ZJQ&#x2F;objc4-818.2&#x2F;blob&#x2F;main&#x2F;runtime&#x2F;objc.h#L40-L43&quot;
link class_data_bits_t &quot;https:&#x2F;&#x2F;github.com&#x2F;Coder-ZJQ&#x2F;objc4-818.2&#x2F;blob&#x2F;main&#x2F;runtime&#x2F;objc-runtime-new.h#L1609-L1611&quot;
link class_rw_t &quot;https:&#x2F;&#x2F;github.com&#x2F;Coder-ZJQ&#x2F;objc4-818.2&#x2F;blob&#x2F;main&#x2F;runtime&#x2F;objc-runtime-new.h#L1458-L1574&quot;
link class_ro_t &quot;https:&#x2F;&#x2F;github.com&#x2F;Coder-ZJQ&#x2F;objc4-818.2&#x2F;blob&#x2F;main&#x2F;runtime&#x2F;objc-runtime-new.h#L1037-L1171&quot;


</pre>



<h2 id="cache-t-方法缓存"><a href="#cache-t-方法缓存" class="headerlink" title="cache_t 方法缓存"></a>cache_t 方法缓存</h2><h3 id="cache-t-相关快捷方法"><a href="#cache-t-相关快捷方法" class="headerlink" title="cache_t 相关快捷方法"></a>cache_t 相关快捷方法</h3><pre class="language-cpp" data-language="cpp" data-line="" data-line-offset="0"><div class="caption"><span>&nbsp;</span><a href="https://github.com/Coder-ZJQ/objc4-818.2/blob/main/runtime/objc-runtime-new.h#L338-L550">objc-runtime-new.h#L338-L550</a></div><code class="language-cpp">struct cache_t &#123;
    struct bucket_t *buckets() const; &#x2F;&#x2F; 散列表
    unsigned capacity() const;        &#x2F;&#x2F; 散列表的长度
    mask_t mask() const;              &#x2F;&#x2F; 散列表的长度 - 1
    mask_t occupied() const;          &#x2F;&#x2F; 已缓存的方法数量
&#125;</code></pre>

<h3 id="bucket-t-相关数据结构及方法"><a href="#bucket-t-相关数据结构及方法" class="headerlink" title="bucket_t 相关数据结构及方法"></a>bucket_t 相关数据结构及方法</h3><pre class="language-cpp" data-language="cpp" data-line="" data-line-offset="0"><div class="caption"><span>&nbsp;</span><a href="https://github.com/Coder-ZJQ/objc4-818.2/blob/main/runtime/objc-runtime-new.h#L212-L290">objc-runtime-new.h#L212-L290</a></div><code class="language-cpp">struct bucket_t &#123;
private:
    explicit_atomic&lt;uintptr_t&gt; _imp;
    explicit_atomic&lt;SEL&gt; _sel;

public:
    inline SEL sel() const &#123; return _sel.load(memory_order_relaxed); &#125;
#if CACHE_IMP_ENCODING &#x3D;&#x3D; CACHE_IMP_ENCODING_ISA_XOR
#define MAYBE_UNUSED_ISA
#else
#define MAYBE_UNUSED_ISA __attribute__((unused))
#endif
    inline IMP rawImp(MAYBE_UNUSED_ISA objc_class *cls) const &#123;
        uintptr_t imp &#x3D; _imp.load(memory_order_relaxed);
        if (!imp) return nil;
#if CACHE_IMP_ENCODING &#x3D;&#x3D; CACHE_IMP_ENCODING_PTRAUTH
#elif CACHE_IMP_ENCODING &#x3D;&#x3D; CACHE_IMP_ENCODING_ISA_XOR
        imp ^&#x3D; (uintptr_t)cls;
#elif CACHE_IMP_ENCODING &#x3D;&#x3D; CACHE_IMP_ENCODING_NONE
#else
#error Unknown method cache IMP encoding.
#endif
        return (IMP)imp;
    &#125;
    
    inline IMP imp(UNUSED_WITHOUT_PTRAUTH bucket_t *base, Class cls) const &#123;
        uintptr_t imp &#x3D; _imp.load(memory_order_relaxed);
        if (!imp) return nil;
#if CACHE_IMP_ENCODING &#x3D;&#x3D; CACHE_IMP_ENCODING_PTRAUTH
        SEL sel &#x3D; _sel.load(memory_order_relaxed);
        return (IMP)
            ptrauth_auth_and_resign((const void *)imp,
                                    ptrauth_key_process_dependent_code,
                                    modifierForSEL(base, sel, cls),
                                    ptrauth_key_function_pointer, 0);
#elif CACHE_IMP_ENCODING &#x3D;&#x3D; CACHE_IMP_ENCODING_ISA_XOR
        return (IMP)(imp ^ (uintptr_t)cls);
#elif CACHE_IMP_ENCODING &#x3D;&#x3D; CACHE_IMP_ENCODING_NONE
        return (IMP)imp;
#else
#error Unknown method cache IMP encoding.
#endif
    &#125;

&#125;</code></pre>

<h3 id="向散列表中插入方法"><a href="#向散列表中插入方法" class="headerlink" title="向散列表中插入方法"></a>向散列表中插入方法</h3><pre class="language-cpp" data-language="cpp" data-line="" data-line-offset="0"><div class="caption"><span>&nbsp;</span><a href="https://github.com/Coder-ZJQ/objc4-818.2/blob/main/runtime/objc-cache.mm#L826-L895">objc-cache.mm#L826-L895</a></div><code class="language-cpp">void cache_t::insert(SEL sel, IMP imp, id receiver)
&#123;
    runtimeLock.assertLocked();

    &#x2F;&#x2F; Never cache before +initialize is done
    if (slowpath(!cls()-&gt;isInitialized())) &#123;
        return;
    &#125;
    
    if (isConstantOptimizedCache()) &#123;
        _objc_fatal(&quot;cache_t::insert() called with a preoptimized cache for %s&quot;,
                    cls()-&gt;nameForLogging());
    &#125;

#if DEBUG_TASK_THREADS
    return _collecting_in_critical();
#else
#if CONFIG_USE_CACHE_LOCK
    mutex_locker_t lock(cacheUpdateLock);
#endif

    ASSERT(sel !&#x3D; 0 &amp;&amp; cls()-&gt;isInitialized());
    
    &#x2F;&#x2F; Use the cache as-is if until we exceed our expected fill ratio.
    mask_t newOccupied &#x3D; occupied() + 1;
    unsigned oldCapacity &#x3D; capacity(), capacity &#x3D; oldCapacity;
    if (slowpath(isConstantEmptyCache())) &#123;
        &#x2F;&#x2F; Cache is read-only. Replace it.
        if (!capacity) capacity &#x3D; INIT_CACHE_SIZE;
        reallocate(oldCapacity, capacity, &#x2F;* freeOld *&#x2F;false);
    &#125;
    else if (fastpath(newOccupied + CACHE_END_MARKER &lt;&#x3D; cache_fill_ratio(capacity))) &#123;
        &#x2F;&#x2F; Cache is less than 3&#x2F;4 or 7&#x2F;8 full. Use it as-is.
    &#125;
#if CACHE_ALLOW_FULL_UTILIZATION
    else if (capacity &lt;&#x3D; FULL_UTILIZATION_CACHE_SIZE &amp;&amp; newOccupied + CACHE_END_MARKER &lt;&#x3D; capacity) &#123;
        &#x2F;&#x2F; Allow 100% cache utilization for small buckets. Use it as-is.
    &#125;
#endif
    else &#123;
        capacity &#x3D; capacity ? capacity * 2 : INIT_CACHE_SIZE;
        if (capacity &gt; MAX_CACHE_SIZE) &#123;
            capacity &#x3D; MAX_CACHE_SIZE;
        &#125;
        reallocate(oldCapacity, capacity, true);
    &#125;
    
    bucket_t *b &#x3D; buckets();
    mask_t m &#x3D; capacity - 1;
    mask_t begin &#x3D; cache_hash(sel, m);
    mask_t i &#x3D; begin;
    
    &#x2F;&#x2F; Scan for the first unused slot and insert there.
    &#x2F;&#x2F; There is guaranteed to be an empty slot.
    do &#123;
        if (fastpath(b[i].sel() &#x3D;&#x3D; 0)) &#123;
            incrementOccupied();
            b[i].set&lt;Atomic, Encoded&gt;(b, sel, imp, cls());
            return;
        &#125;
        if (b[i].sel() &#x3D;&#x3D; sel) &#123;
            &#x2F;&#x2F; The entry was added to the cache by some other thread
            &#x2F;&#x2F; before we grabbed the cacheUpdateLock.
            return;
        &#125;
    &#125; while (fastpath((i &#x3D; cache_next(i, m)) !&#x3D; begin));
    
    bad_cache(receiver, (SEL)sel);
#endif &#x2F;&#x2F; !DEBUG_TASK_THREADS
&#125;</code></pre>

<h3 id="散列表-hash-算法实现"><a href="#散列表-hash-算法实现" class="headerlink" title="散列表 hash 算法实现"></a>散列表 hash 算法实现</h3><pre class="language-cpp" data-language="cpp" data-line="" data-line-offset="0"><div class="caption"><span>&nbsp;</span><a href="https://github.com/Coder-ZJQ/objc4-818.2/blob/main/runtime/objc-cache.mm#L304-L314">objc-cache.mm#L304-L314</a></div><code class="language-cpp">&#x2F;&#x2F; Class points to cache. SEL is key. Cache buckets store SEL+IMP.
&#x2F;&#x2F; Caches are never built in the dyld shared cache.

static inline mask_t cache_hash(SEL sel, mask_t mask) 
&#123;
    uintptr_t value &#x3D; (uintptr_t)sel;
#if CONFIG_USE_PREOPT_CACHES
    value ^&#x3D; value &gt;&gt; 7;
#endif
    return (mask_t)(value &amp; mask);
&#125;</code></pre>

<h2 id="class-rw-t-与-class-ro-t"><a href="#class-rw-t-与-class-ro-t" class="headerlink" title="class_rw_t 与 class_ro_t"></a>class_rw_t 与 class_ro_t</h2><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p>通过阅读 obj4 源码可以得出 <code>class_rw_t</code> 与 <code>class_ro_t</code> 结构（部分省略），如下：<br>(objc4 源码版本：<a href="https://opensource.apple.com/source/objc4/objc4-818.2/">objc4-818.2</a>)</p>
<pre class="mermaid">
flowchart LR

subgraph class_rw_t
    A[&quot;class_ro_t *ro()&quot;]
    B[&quot;method_array_t methods()&quot;]
    C[&quot;property_array_t properties()&quot;]
    D[&quot;protocol_array_t protocols()&quot;]
    DD[&quot;......&quot;]
end

subgraph class_ro_t
    E[&quot;uint32_t instanceSize;&quot;]
    F[&quot;method_list_t *baseMethods()&quot;]
    G[&quot;property_list_t *baseProperties;&quot;]
    H[&quot;protocol_list_t *baseProtocols;&quot;]
    I[&quot;const ivar_list_t * ivars;&quot;]
    II[&quot;......&quot;]
end

J[&quot;method_array_t&quot;]
K[&quot;property_array_t&quot;]
L[&quot;protocol_array_t&quot;]
M[method_list_t]
N[property_list_t]
O[protocol_list_t]
P[ivar_list_t]

subgraph method_t
    direction LR
    U[&quot;SEL name;&quot;]
    V[&quot;const char *types;&quot;]
    W[&quot;IMP imp;&quot;]
    WW[&quot;......&quot;]
end

subgraph property_t
    direction LR
    Q[&quot;const char *name;&quot;]
    R[&quot;const char *attributes;&quot;]
end

subgraph protocol_t
    direction LR
    X[&quot;struct protocol_list_t *protocols;&quot;]
    Y[&quot;method_list_t *instanceMethods;&quot;]
    Z[&quot;method_list_t *classMethods;&quot;]
    ZZ[&quot;property_list_t *instanceProperties;&quot;]
    ZZZ[&quot;......&quot;]
end

subgraph ivar_t
    direction LR
    S[&quot;const char *name;&quot;]
    T[&quot;const char *type;&quot;]
    TT[&quot;......&quot;]
end

A--&gt;class_ro_t
B--&gt;J
C--&gt;K
D--&gt;L
F--&gt;M
G--&gt;N
H--&gt;O
I--&gt;P
J--&gt;M
K--&gt;N
L--&gt;O
M--&gt;method_t
N--&gt;property_t
O--&gt;protocol_t
P--&gt;ivar_t

</pre>

<h3 id="class-ro-t"><a href="#class-ro-t" class="headerlink" title="class_ro_t"></a>class_ro_t</h3><ul>
<li>class_ro_t 里面的 baseMethodList、baseProtocols、ivars、baseProperties 是一维数组，是只读的，包含了类的初始内容；</li>
<li>class_ro_t 编译时即确定；</li>
</ul>
<h3 id="class-rw-t"><a href="#class-rw-t" class="headerlink" title="class_rw_t"></a>class_rw_t</h3><ul>
<li>class_rw_t 里面的 methods、properties、protocols 是二维数组，是可读可写的，包含了类的初始内容、分类的内容；</li>
<li>class_rw_t 运行时才确定，且会先拷贝 class_ro_t 中的内容；</li>
<li>class_rw_t 中已包含 class_ro_t 的相关内容，所以访问类的方法属性协议等主要通过 class_rw_t，不通过 class_ro_t。</li>
</ul>
<p>拷贝 class_ro_t 中内容至 class_rw_t 源码：</p>
<pre class="line-numbers language-objectivec" data-language="objectivec" data-start="1468" data-line="1489,1490,1491,1492,1493,1494,1495,1496,1497,1498,1499,1500,1501,1502,1503,1504" data-line-offset="1467"><div class="caption"><span>&nbsp;</span><a href="https://github.com/Coder-ZJQ/objc4-818.2/blob/main/runtime/objc-runtime-new.mm#L1468-L1539">objc-runtime-new.mm#L1468-L1539</a></div><code class="language-objectivec">&#x2F;***********************************************************************
* methodizeClass
* Fixes up cls&#39;s method list, protocol list, and property list.
* Attaches any outstanding categories.
* Locking: runtimeLock must be held by the caller
  **********************************************************************&#x2F;
  static void methodizeClass(Class cls, Class previously)
  &#123;
    runtimeLock.assertLocked();

    bool isMeta &#x3D; cls-&gt;isMetaClass();
    auto rw &#x3D; cls-&gt;data();
    auto ro &#x3D; rw-&gt;ro();
    auto rwe &#x3D; rw-&gt;ext();

    &#x2F;&#x2F; Methodizing for the first time
    if (PrintConnecting) &#123;
        _objc_inform(&quot;CLASS: methodizing class &#39;%s&#39; %s&quot;, 
                     cls-&gt;nameForLogging(), isMeta ? &quot;(meta)&quot; : &quot;&quot;);
    &#125;

    &#x2F;&#x2F; Install methods and properties that the class implements itself.
    method_list_t *list &#x3D; ro-&gt;baseMethods();
    if (list) &#123;
        prepareMethodLists(cls, &amp;list, 1, YES, isBundleClass(cls), nullptr);
        if (rwe) rwe-&gt;methods.attachLists(&amp;list, 1);
    &#125;

    property_list_t *proplist &#x3D; ro-&gt;baseProperties;
    if (rwe &amp;&amp; proplist) &#123;
        rwe-&gt;properties.attachLists(&amp;proplist, 1);
    &#125;

    protocol_list_t *protolist &#x3D; ro-&gt;baseProtocols;
    if (rwe &amp;&amp; protolist) &#123;
        rwe-&gt;protocols.attachLists(&amp;protolist, 1);
    &#125;

    &#x2F;&#x2F; Root classes get bonus method implementations if they don&#39;t have 
    &#x2F;&#x2F; them already. These apply before category replacements.
    if (cls-&gt;isRootMetaclass()) &#123;
        &#x2F;&#x2F; root metaclass
        addMethod(cls, @selector(initialize), (IMP)&amp;objc_noop_imp, &quot;&quot;, NO);
    &#125;

    &#x2F;&#x2F; Attach categories.
    if (previously) &#123;
        if (isMeta) &#123;
            objc::unattachedCategories.attachToClass(cls, previously,
                                                     ATTACH_METACLASS);
        &#125; else &#123;
            &#x2F;&#x2F; When a class relocates, categories with class methods
            &#x2F;&#x2F; may be registered on the class itself rather than on
            &#x2F;&#x2F; the metaclass. Tell attachToClass to look for those.
            objc::unattachedCategories.attachToClass(cls, previously,
                                                     ATTACH_CLASS_AND_METACLASS);
        &#125;
    &#125;
    objc::unattachedCategories.attachToClass(cls, cls,
                                             isMeta ? ATTACH_METACLASS : ATTACH_CLASS);

#if DEBUG
    &#x2F;&#x2F; Debug: sanity-check all SELs; log method list contents
    for (const auto&amp; meth : rw-&gt;methods()) &#123;
        if (PrintConnecting) &#123;
            _objc_inform(&quot;METHOD %c[%s %s]&quot;, isMeta ? &#39;+&#39; : &#39;-&#39;, 
                         cls-&gt;nameForLogging(), sel_getName(meth.name()));
        &#125;
        ASSERT(sel_registerName(sel_getName(meth.name())) &#x3D;&#x3D; meth.name());
    &#125;
#endif
&#125;</code></pre>



<h2 id="objc-msgSend-执行流程"><a href="#objc-msgSend-执行流程" class="headerlink" title="objc_msgSend 执行流程"></a>objc_msgSend 执行流程</h2><!-- 汇编源码

ENTRY _objc_msgSend

b.le LNilOrTagged

b    LGetIsaDone

CacheLookup NORMAL, _objc_msgSend, __objc_msgSend_uncached

.macro CacheLookup Mode, Function, MissLabelDynamic, MissLabelConstant

CacheHit

__objc_msgSend_uncached

MethodTableLookup

_lookUpImpOrForward

_objc_msgForward_impcache

getMethodNoSuper_nolock

search_method_list_inline

log_and_fill_cache

__objc_msgForward

_objc_forward_handler

objc_defaultForwardHandler

_objc_msgForward

objc_setForwardHandler

 -->

<pre class="mermaid">
flowchart TB
 A(objc_msgSend)
 B{消息接收者是否为nil}
 C([退出])
 D{在 cache 中查找}
 E{在 class_rw_t 中查找}
 F{在 cache 中查找}
 G{在 class_rw_t 中查找}
 H{superclass &#x3D;&#x3D; nil}
 I{是否动态方法解析}
 J([调用方法结束查找])
 K([调用方法结束查找并将方法缓存至 cache])
 L[+resolveInstanceMethod:]
 M[+resolveClassMethod:]
N{类对象还是实例对象}
O{+&#x2F;- forwardingTargetForSelector:}
P{+&#x2F;- methodSignatureForSelector:}
Q[调用 +&#x2F;- forwardInvocation: 方法]
R[调用 doesNotRecognizeSelector: 方法抛出异常]
S[&quot;调用 objc_msgSend(返回值, selector)&quot;]

 subgraph 消息发送
   subgraph &quot;消息接受者的类对象(isa)&quot;
		D
		E
   end
   subgraph &quot;消息接受者的父类对象(superclass)&quot;
		F
		G
   end
   B
   C
   H
   J
   K
 end
 subgraph 动态方法解析
   I
   L
   M
   N
 end
 subgraph 消息转发
   O
   P
   Q
   R
   S
 end
 A--&gt;B
 B--&gt;|是|C
 B--&gt;|否|D
 D--&gt;|未找到|E
 E--&gt;|未找到|H
 H--&gt;|否|F
 H--&gt;|是|I
 F--&gt;|未找到|G
 G--&gt;|未找到|H
 D--&gt;|找到了|J
 E--&gt;|找到了|K
 F--&gt;|找到了|J
 G--&gt;|找到了|K
 I--&gt;|否|N
 I--&gt;|是|O
 N--&gt;|实例对象|L
 N--&gt;|类对象|M
 L--&gt;|返回YES|D
 M--&gt;|返回YES|D
 O--&gt;|返回值不为nil|S
 O--&gt;|返回值为nil|P
 P--&gt;|返回值不为nil|Q
 P--&gt;|返回值为nil|R

</pre>



<pre class="line-numbers language-objectivec" data-language="objectivec"><code class="language-objectivec">#import &lt;Foundation&#x2F;Foundation.h&gt;
#import &lt;objc&#x2F;runtime.h&gt;

@interface JQForwardObject : NSObject

- (void)test;
+ (void)test;

@end

@implementation JQForwardObject

- (void)test &#123;
    NSLog(@&quot;\nfunc: %s\nreceiver: %@\nsel: %@&quot;, __func__, self, NSStringFromSelector(_cmd));
&#125;

+ (void)test &#123;
    NSLog(@&quot;\nfunc: %s\nreceiver: %@\nsel: %@&quot;, __func__, self, NSStringFromSelector(_cmd));
&#125;

@end

@interface JQObject : NSObject

- (void)test;
+ (void)test;

@end

@implementation JQObject
&#x2F;* 1. 动态消息解析
+ (BOOL)resolveClassMethod:(SEL)sel &#123;
    if (sel &#x3D;&#x3D; @selector(test)) &#123;
        Method met &#x3D; class_getInstanceMethod(self, @selector(resolveMethod));
        class_addMethod(object_getClass(self), sel, method_getImplementation(met), method_getTypeEncoding(met));
        return YES;
    &#125;
    return [super resolveClassMethod:sel];
&#125;

+ (BOOL)resolveInstanceMethod:(SEL)sel &#123;
    if (sel &#x3D;&#x3D; @selector(test)) &#123;
        class_addMethod(self, sel, (IMP)resolveMethod, &quot;v@:&quot;);
        return YES;
    &#125;
    return [super resolveInstanceMethod:sel];
&#125;

- (void)resolveMethod &#123;
    NSLog(@&quot;\nfunc: %s\nreceiver: %@\nsel: %@&quot;, __func__, self, NSStringFromSelector(_cmd));
&#125;

void resolveMethod(id self, SEL _cmd) &#123;
    NSLog(@&quot;\nfunc: %s\nreceiver: %@\nsel: %@&quot;, __func__, self, NSStringFromSelector(_cmd));
&#125;
*&#x2F;

&#x2F;*
- (id)forwardingTargetForSelector:(SEL)aSelector &#123;
    if (aSelector &#x3D;&#x3D; @selector(test)) &#123;
        return [[JQForwardObject alloc] init];
    &#125;
    return [super forwardingTargetForSelector:aSelector];
&#125;

+ (id)forwardingTargetForSelector:(SEL)aSelector &#123;
    if (aSelector &#x3D;&#x3D; @selector(test)) &#123;
        return [JQForwardObject class];
    &#125;
    return [super forwardingTargetForSelector:aSelector];
&#125;
*&#x2F;

- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector &#123;
    if (aSelector &#x3D;&#x3D; @selector(test)) &#123;
        return [NSMethodSignature signatureWithObjCTypes:&quot;v@:&quot;];
    &#125;
    return [super methodSignatureForSelector:aSelector];
&#125;

- (void)forwardInvocation:(NSInvocation *)anInvocation &#123;
&#x2F;&#x2F;    anInvocation getReturnValue:&lt;#(nonnull void *)#&gt;
&#x2F;&#x2F;    anInvocation getArgument:&lt;#(nonnull void *)#&gt; atIndex:&lt;#(NSInteger)#&gt;
&#x2F;&#x2F;    anInvocation invoke
&#x2F;&#x2F;    [anInvocation invokeWithTarget:&lt;#(nonnull id)#&gt;];
    NSLog(@&quot;%@&quot;, anInvocation);
&#125;

+ (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector &#123;
    if (aSelector &#x3D;&#x3D; @selector(test)) &#123;
        return [NSMethodSignature signatureWithObjCTypes:&quot;v@:&quot;];
    &#125;
    return [super methodSignatureForSelector:aSelector];
&#125;

+ (void)forwardInvocation:(NSInvocation *)anInvocation &#123;
    NSLog(@&quot;%@&quot;, anInvocation);
&#125;

@end



int main(int argc, const char * argv[]) &#123;
    @autoreleasepool &#123;
        [[[JQObject alloc] init] test];
        [JQObject test];
    &#125;
    return 0;
&#125;</code></pre>









<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>编程相关</category>
        <category>Objective-C</category>
        <category>面试相关</category>
        <category>runtime</category>
      </categories>
  </entry>
  <entry>
    <title>ipa 砸壳工具</title>
    <url>/2022/10/11/ipa-decrypt-tools/</url>
    <content><![CDATA[<p><strong>记录一些 ipa 砸壳工具：</strong></p>
<table>
<thead>
<tr>
<th align="center">工具</th>
<th align="center">类型</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><a href="https://github.com/Lakr233/Iridium">Iridium</a></td>
<td align="center">iOS 应用</td>
</tr>
<tr>
<td align="center">CrackerXI</td>
<td align="center">iOS 应用</td>
</tr>
<tr>
<td align="center"><a href="https://github.com/JohnCoates/flexdecrypt">flexdecrypt</a></td>
<td align="center">iOS 命令行</td>
</tr>
<tr>
<td align="center"><a href="https://github.com/paradiseduo/appdecrypt">appdecrypt</a></td>
<td align="center">iOS 命令行</td>
</tr>
<tr>
<td align="center"><a href="https://github.com/NyaMisty/fouldecrypt">fouldecrypt</a></td>
<td align="center">iOS 命令行</td>
</tr>
<tr>
<td align="center"><a href="https://github.com/ChiChou/bagbak">bagbak</a></td>
<td align="center">mac 命令行</td>
</tr>
<tr>
<td align="center"><a href="https://github.com/AloneMonkey/frida-ios-dump">frida-ios-dump</a></td>
<td align="center">mac 命令行</td>
</tr>
<tr>
<td align="center"><a href="https://github.com/stefanesser/dumpdecrypted">dumpdecrypted</a></td>
<td align="center">代码（需自行编译）</td>
</tr>
<tr>
<td align="center"><a href="https://github.com/KJCracks/Clutch">Clutch</a></td>
<td align="center">iOS 命令行</td>
</tr>
<tr>
<td align="center"><a href="https://github.com/Nightbringer21/fridump">fridump</a></td>
<td align="center">python 脚本</td>
</tr>
</tbody></table>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>工具使用</category>
        <category>逆向安全</category>
      </categories>
      <tags>
        <tag>ipa</tag>
        <tag>decrypt</tag>
      </tags>
  </entry>
  <entry>
    <title>利用 ipatool 下载 ipa 包</title>
    <url>/2021/07/14/ipatool/</url>
    <content><![CDATA[<h3 id="ipatool"><a href="#ipatool" class="headerlink" title="ipatool"></a>ipatool</h3><p><a href="https://github.com/majd/ipatool">ipatool</a> 是一个命令行工具，可以让你搜索下载 <a href="https://apps.apple.com/">App Store</a> 上的 iOS 应用（下载需输入 Apple ID 及密码，且该 Apple ID 下载过该应用）。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ brew tap majd&#x2F;repo
$ brew install ipatool</code></pre>

<span id="more"></span>

<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 搜索应用，以 Apple 为例
$ ipatool search -C CN Apple

# 根据应用 ID 下载 ipa，以 com.apple.supportapp 为例
$ ipatool download com.apple.supportapp

# 查看更多使用
$ ipatool --help</code></pre>

<p>如下图所示：</p>
<p><img src="https://image.jqz3.tech/blog/20210714144116.png?imageView2/0/q/75%7Cwatermark/2/text/aHR0cHM6Ly9qcXozLnRlY2g=/font/bWljcm9zb2Z0IHlhaGVp/fontsize/360/fill/I0ZGRkZGRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10"></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>ipa</tag>
      </tags>
  </entry>
  <entry>
    <title>isa_t</title>
    <url>/2019/08/30/isa_t/</url>
    <content><![CDATA[<h3 id="isa"><a href="#isa" class="headerlink" title="isa"></a>isa</h3><ul>
<li>在 arm64 架构之前，isa 就是一个普通的指针，存储着 Class、Meta-Class 对象的内存地址</li>
<li>从 arm64 架构开始，对 isa 进行了优化，变成了一个共用体 (union) 结构，还使用位域来存储更多的信息</li>
</ul>
<span id="more"></span>

<h3 id="isa-t-共用体"><a href="#isa-t-共用体" class="headerlink" title="isa_t 共用体"></a>isa_t 共用体</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">union isa_t &#123;
    uintptr_t bits;

private:
    &#x2F;&#x2F; Accessing the class requires custom ptrauth operations, so
    &#x2F;&#x2F; force clients to go through setClass&#x2F;getClass by making this
    &#x2F;&#x2F; private.
    Class cls;

public:
    struct &#123;
        uintptr_t nonpointer        : 1;                                       
        uintptr_t has_assoc         : 1;                                       
        uintptr_t has_cxx_dtor      : 1;                                       
        uintptr_t shiftcls          : 33; &#x2F;*MACH_VM_MAX_ADDRESS 0x1000000000*&#x2F; 
        uintptr_t magic             : 6;                                       
        uintptr_t weakly_referenced : 1;                                       
        uintptr_t unused            : 1;                                       
        uintptr_t has_sidetable_rc  : 1;                                       
        uintptr_t extra_rc          : 19
    &#125;;

&#125;;</code></pre>

<h3 id="相关位域"><a href="#相关位域" class="headerlink" title="相关位域"></a>相关位域</h3><ul>
<li>nonpointer<ul>
<li>0：代表普通的指针，存储着 Class、Meta-Class 对象的内存地址</li>
<li>1：代表优化过，使用位域存储更多的信息</li>
</ul>
</li>
<li>has_assoc<ul>
<li>是否有设置过关联对象，如果没有，释放时会更快</li>
</ul>
</li>
<li>has_cxx_dtor<ul>
<li>是否有 C++ 的析构函数（.cxx_destruct），如果没有，释放时会更快</li>
</ul>
</li>
<li>shiftcls<ul>
<li>存储着 Class、Meta-Class 对象的内存地址信息</li>
</ul>
</li>
<li>magic<ul>
<li>用于在调试时分辨对象是否未完成初始化</li>
</ul>
</li>
<li>weakly_referenced<ul>
<li>是否有被弱引用指向过，如果没有，释放时会更快</li>
</ul>
</li>
<li>deallocating<ul>
<li>对象是否正在释放</li>
</ul>
</li>
<li>extra_rc<ul>
<li>里面存储的值是引用计数器减1</li>
</ul>
</li>
<li>has_sidetable_rc<ul>
<li>引用计数器是否过大无法存储在isa中。如果为1，那么引用计数会存储在一个叫SideTable的类的属性中</li>
</ul>
</li>
</ul>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>编程相关</category>
        <category>Objective-C</category>
        <category>runtime</category>
      </categories>
      <tags>
        <tag>runtime</tag>
      </tags>
  </entry>
  <entry>
    <title>越狱问题记录</title>
    <url>/2021/12/30/jailbreak-issue/</url>
    <content><![CDATA[<h4 id="使用-checkra1n-越狱无法进入-DFU-模式"><a href="#使用-checkra1n-越狱无法进入-DFU-模式" class="headerlink" title="使用 checkra1n 越狱无法进入 DFU 模式"></a>使用 <a href="https://checkra.in/">checkra1n</a> 越狱无法进入 DFU 模式</h4><blockquote>
<p>进入 DFU 模式需用 USB - a 数据线连接，USB - a 连接扩展坞也可以，直接使用 USB - c 不可以。</p>
<p>参考链接：<a href="https://github.com/checkra1n/BugTracker/issues/2148#issuecomment-902139014">issue-2148-comment</a></p>
</blockquote>
<span id="more"></span>

<h4 id="安装-AltStore-1-4-8-启动崩溃"><a href="#安装-AltStore-1-4-8-启动崩溃" class="headerlink" title="安装 AltStore 1.4.8 启动崩溃"></a>安装 <a href="https://www.altstore.io/">AltStore 1.4.8</a> 启动崩溃</h4><blockquote>
<p>下载 v1.4.7 ipa 文件，然后利用 Sideloadly 之类的工具重签名并安装</p>
<p>参考链接: <a href="https://github.com/rileytestut/AltStore/issues/874#issuecomment-955632012">issue-874-comment</a></p>
</blockquote>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>问题解决</category>
        <category>逆向安全</category>
      </categories>
      <tags>
        <tag>jailbreak</tag>
      </tags>
  </entry>
  <entry>
    <title>【面试题】+load 相关</title>
    <url>/2019/08/27/load/</url>
    <content><![CDATA[<h2 id="load-方法的调用顺序？"><a href="#load-方法的调用顺序？" class="headerlink" title="+load 方法的调用顺序？"></a><code>+load</code> 方法的调用顺序？</h2><ul>
<li>先调用类的 <code>+load</code> 方法；<ul>
<li>按照编译先后顺序 (Build Phases -&gt; Compile Sources) 调用（先编译先调用）；</li>
<li>调用子类的 <code>+load</code> 方法会先调用父类的；</li>
</ul>
</li>
<li>然后调用分类的 <code>+load</code> 方法；<ul>
<li>按照编译先后顺序 (Build Phases -&gt; Compile Sources) 调用（先编译先调用）。</li>
</ul>
</li>
</ul>
<span id="more"></span>

<h2 id="为什么子类重写覆盖父类的-load-方法后还会先调用父类的-load-方法？"><a href="#为什么子类重写覆盖父类的-load-方法后还会先调用父类的-load-方法？" class="headerlink" title="为什么子类重写覆盖父类的 +load 方法后还会先调用父类的 +load 方法？"></a>为什么子类重写覆盖父类的 <code>+load</code> 方法后还会先调用父类的 <code>+load</code> 方法？</h2><p>因为 <code>+load</code> 方法的调用不是通过 <code>objc_msgSend</code> 函数，而是通过获取方法地址直接调用。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">(*load_method)(cls, @selector(load));</code></pre>

<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><h3 id="调用流程"><a href="#调用流程" class="headerlink" title="调用流程"></a>调用流程</h3><pre class="mermaid">
graph TB
subgraph objc4
    subgraph objc-os.mm
        A[_objc_init]
    end
    subgraph objc-runtime-new.mm
        C[load_images]
        D[prepare_load_methods]
        E[schedule_class_load]
    end
    subgraph objc-loadmethod.mm
        F[add_class_to_loadable_list]
        G[add_category_to_loadable_list]
        H[call_load_methods]
        I[call_class_loads]
        J[call_category_loads]
        K(&quot;(*load_method)(cls, @selector(load));&quot;)
    end
end
subgraph dyld
    B[_dyld_objc_notify_register]
end

A--&gt;B
B--&gt;C
C--&gt;D
C--&gt;H
D--&gt;E
E--&gt;F
E--&gt;|&quot;cls-&gt;getSuperclass()&quot;|E
D--&gt;G

H--&gt;I
H--&gt;J

I &amp; J--&gt;K

</pre>

<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><pre class="language-cpp" data-language="cpp" data-line="939" data-line-offset="913"><div class="caption"><span>&nbsp;</span><a href="https://github.com/Coder-ZJQ/objc4-818.2/blob/main/runtime/objc-os.mm#L916-L944">objc-os.mm#L916-L944</a></div><code class="language-cpp">&#x2F;***********************************************************************
* _objc_init
* Bootstrap initialization. Registers our image notifier with dyld.
* Called by libSystem BEFORE library initialization time
**********************************************************************&#x2F;

void _objc_init(void)
&#123;
    static bool initialized &#x3D; false;
    if (initialized) return;
    initialized &#x3D; true;
    
    &#x2F;&#x2F; fixme defer initialization until an objc-using image is found?
    environ_init();
    tls_init();
    static_init();
    runtime_init();
    exception_init();
#if __OBJC2__
    cache_t::init();
#endif
    _imp_implementationWithBlock_init();
    
    _dyld_objc_notify_register(&amp;map_images, load_images, unmap_image);

#if __OBJC2__
    didCallDyldNotifyRegister &#x3D; true;
#endif
&#125;</code></pre>


<pre class="language-cpp" data-language="cpp" data-line="65,66,67" data-line-offset="52"><div class="caption"><span>&nbsp;</span><a href="https://github.com/Coder-ZJQ/dyld-852.2/blob/main/include/mach-o/dyld_priv.h#L55-L67">dyld_priv.h#L55-L67</a></div><code class="language-cpp">&#x2F;&#x2F;
&#x2F;&#x2F; Note: only for use by objc runtime
&#x2F;&#x2F; Register handlers to be called when objc images are mapped, unmapped, and initialized.
&#x2F;&#x2F; Dyld will call back the &quot;mapped&quot; function with an array of images that contain an objc-image-info section.
&#x2F;&#x2F; Those images that are dylibs will have the ref-counts automatically bumped, so objc will no longer need to
&#x2F;&#x2F; call dlopen() on them to keep them from being unloaded.  During the call to _dyld_objc_notify_register(),
&#x2F;&#x2F; dyld will call the &quot;mapped&quot; function with already loaded objc images.  During any later dlopen() call,
&#x2F;&#x2F; dyld will also call the &quot;mapped&quot; function.  Dyld will call the &quot;init&quot; function when dyld would be called
&#x2F;&#x2F; initializers in that image.  This is when objc calls any +load methods in that image.
&#x2F;&#x2F;
void _dyld_objc_notify_register(_dyld_objc_notify_mapped    mapped,
                                _dyld_objc_notify_init      init,
                                _dyld_objc_notify_unmapped  unmapped);</code></pre>


<pre class="language-cpp" data-language="cpp" data-line="3229,3233" data-line-offset="3210"><div class="caption"><span>&nbsp;</span><a href="https://github.com/Coder-ZJQ/objc4-818.2/blob/main/runtime/objc-runtime-new.mm#L3213-L3234">objc-runtime-new.mm#L3213-L3234</a></div><code class="language-cpp">void
load_images(const char *path __unused, const struct mach_header *mh)
&#123;
    if (!didInitialAttachCategories &amp;&amp; didCallDyldNotifyRegister) &#123;
        didInitialAttachCategories &#x3D; true;
        loadAllCategories();
    &#125;

    &#x2F;&#x2F; Return without taking locks if there are no +load methods here.
    if (!hasLoadMethods((const headerType *)mh)) return;
    
    recursive_mutex_locker_t lock(loadMethodLock);
    
    &#x2F;&#x2F; Discover load methods
    &#123;
        mutex_locker_t lock2(runtimeLock);
        prepare_load_methods((const headerType *)mh);
    &#125;
    
    &#x2F;&#x2F; Call +load methods (without runtimeLock - re-entrant)
    call_load_methods();
&#125;</code></pre>


<pre class="language-cpp" data-language="cpp" data-line="3903,3917" data-line-offset="3891"><div class="caption"><span>&nbsp;</span><a href="https://github.com/Coder-ZJQ/objc4-818.2/blob/main/runtime/objc-runtime-new.mm#L3894-L3919">objc-runtime-new.mm#L3894-L3919</a></div><code class="language-cpp">void prepare_load_methods(const headerType *mhdr)
&#123;
    size_t count, i;

    runtimeLock.assertLocked();
    
    classref_t const *classlist &#x3D; 
        _getObjc2NonlazyClassList(mhdr, &amp;count);
    for (i &#x3D; 0; i &lt; count; i++) &#123;
        schedule_class_load(remapClass(classlist[i]));
    &#125;
    
    category_t * const *categorylist &#x3D; _getObjc2NonlazyCategoryList(mhdr, &amp;count);
    for (i &#x3D; 0; i &lt; count; i++) &#123;
        category_t *cat &#x3D; categorylist[i];
        Class cls &#x3D; remapClass(cat-&gt;cls);
        if (!cls) continue;  &#x2F;&#x2F; category for ignored weak-linked class
        if (cls-&gt;isSwiftStable()) &#123;
            _objc_fatal(&quot;Swift class extensions and categories on Swift &quot;
                        &quot;classes are not allowed to have +load methods&quot;);
        &#125;
        realizeClassWithoutSwift(cls, nil);
        ASSERT(cls-&gt;ISA()-&gt;isRealized());
        add_category_to_loadable_list(cat);
    &#125;
&#125;</code></pre>


<pre class="language-cpp" data-language="cpp" data-line="3878,3879,3881" data-line-offset="3861"><div class="caption"><span>&nbsp;</span><a href="https://github.com/Coder-ZJQ/objc4-818.2/blob/main/runtime/objc-runtime-new.mm#L3864-L3883">objc-runtime-new.mm#L3864-L3883</a></div><code class="language-cpp">&#x2F;***********************************************************************
* prepare_load_methods
* Schedule +load for classes in this image, any un-+load-ed 
* superclasses in other images, and any categories in this image.
**********************************************************************&#x2F;
&#x2F;&#x2F; Recursively schedule +load for cls and any un-+load-ed superclasses.
&#x2F;&#x2F; cls must already be connected.
static void schedule_class_load(Class cls)
&#123;
    if (!cls) return;
    ASSERT(cls-&gt;isRealized());  &#x2F;&#x2F; _read_images should realize

    if (cls-&gt;data()-&gt;flags &amp; RW_LOADED) return;

    &#x2F;&#x2F; Ensure superclass-first ordering
    schedule_class_load(cls-&gt;getSuperclass());

    add_class_to_loadable_list(cls);
    cls-&gt;setInfo(RW_LOADED); 
&#125;</code></pre>


<pre class="line-numbers language-cpp" data-language="cpp" data-start="57" data-line="" data-line-offset="56"><div class="caption"><span>&nbsp;</span><a href="https://github.com/Coder-ZJQ/objc4-818.2/blob/main/runtime/objc-loadmethod.mm#L57-L87">objc-loadmethod.mm#L57-L87</a></div><code class="language-cpp">&#x2F;***********************************************************************
* add_class_to_loadable_list
* Class cls has just become connected. Schedule it for +load if
* it implements a +load method.
**********************************************************************&#x2F;
void add_class_to_loadable_list(Class cls)
&#123;
    IMP method;

    loadMethodLock.assertLocked();

    method &#x3D; cls-&gt;getLoadMethod();
    if (!method) return;  &#x2F;&#x2F; Don&#39;t bother if cls has no +load method
  
    if (PrintLoading) &#123;
        _objc_inform(&quot;LOAD: class &#39;%s&#39; scheduled for +load&quot;, 
                     cls-&gt;nameForLogging());
    &#125;
  
    if (loadable_classes_used &#x3D;&#x3D; loadable_classes_allocated) &#123;
        loadable_classes_allocated &#x3D; loadable_classes_allocated*2 + 16;
        loadable_classes &#x3D; (struct loadable_class *)
            realloc(loadable_classes,
                              loadable_classes_allocated *
                              sizeof(struct loadable_class));
    &#125;
  
    loadable_classes[loadable_classes_used].cls &#x3D; cls;
    loadable_classes[loadable_classes_used].method &#x3D; method;
    loadable_classes_used++;
&#125;</code></pre>


<pre class="line-numbers language-cpp" data-language="cpp" data-start="90" data-line="" data-line-offset="89"><div class="caption"><span>&nbsp;</span><a href="https://github.com/Coder-ZJQ/objc4-818.2/blob/main/runtime/objc-loadmethod.mm#L90-L123">objc-loadmethod.mm#L90-L123</a></div><code class="language-cpp">&#x2F;***********************************************************************
* add_category_to_loadable_list
* Category cat&#39;s parent class exists and the category has been attached
* to its class. Schedule this category for +load after its parent class
* becomes connected and has its own +load method called.
**********************************************************************&#x2F;
void add_category_to_loadable_list(Category cat)
&#123;
    IMP method;

    loadMethodLock.assertLocked();

    method &#x3D; _category_getLoadMethod(cat);

    &#x2F;&#x2F; Don&#39;t bother if cat has no +load method
    if (!method) return;

    if (PrintLoading) &#123;
        _objc_inform(&quot;LOAD: category &#39;%s(%s)&#39; scheduled for +load&quot;, 
                     _category_getClassName(cat), _category_getName(cat));
    &#125;
  
    if (loadable_categories_used &#x3D;&#x3D; loadable_categories_allocated) &#123;
        loadable_categories_allocated &#x3D; loadable_categories_allocated*2 + 16;
        loadable_categories &#x3D; (struct loadable_category *)
            realloc(loadable_categories,
                              loadable_categories_allocated *
                              sizeof(struct loadable_category));
    &#125;

    loadable_categories[loadable_categories_used].cat &#x3D; cat;
    loadable_categories[loadable_categories_used].method &#x3D; method;
    loadable_categories_used++;
&#125;</code></pre>


<pre class="language-cpp" data-language="cpp" data-line="353,357" data-line-offset="303"><div class="caption"><span>&nbsp;</span><a href="https://github.com/Coder-ZJQ/objc4-818.2/blob/main/runtime/objc-loadmethod.mm#L306-L365">objc-loadmethod.mm#L306-L365</a></div><code class="language-cpp">&#x2F;***********************************************************************
* call_load_methods
* Call all pending class and category +load methods.
* Class +load methods are called superclass-first. 
* Category +load methods are not called until after the parent class&#39;s +load.
* 
* This method must be RE-ENTRANT, because a +load could trigger 
* more image mapping. In addition, the superclass-first ordering 
* must be preserved in the face of re-entrant calls. Therefore, 
* only the OUTERMOST call of this function will do anything, and 
* that call will handle all loadable classes, even those generated 
* while it was running.
*
* The sequence below preserves +load ordering in the face of 
* image loading during a +load, and make sure that no 
* +load method is forgotten because it was added during 
* a +load call.
* Sequence:
* 1. Repeatedly call class +loads until there aren&#39;t any more
* 2. Call category +loads ONCE.
* 3. Run more +loads if:
*    (a) there are more classes to load, OR
*    (b) there are some potential category +loads that have 
*        still never been attempted.
* Category +loads are only run once to ensure &quot;parent class first&quot; 
* ordering, even if a category +load triggers a new loadable class 
* and a new loadable category attached to that class. 
*
* Locking: loadMethodLock must be held by the caller 
*   All other locks must not be held.
**********************************************************************&#x2F;
void call_load_methods(void)
&#123;
    static bool loading &#x3D; NO;
    bool more_categories;

    loadMethodLock.assertLocked();

    &#x2F;&#x2F; Re-entrant calls do nothing; the outermost call will finish the job.
    if (loading) return;
    loading &#x3D; YES;

    void *pool &#x3D; objc_autoreleasePoolPush();

    do &#123;
        &#x2F;&#x2F; 1. Repeatedly call class +loads until there aren&#39;t any more
        while (loadable_classes_used &gt; 0) &#123;
            call_class_loads();
        &#125;

        &#x2F;&#x2F; 2. Call category +loads ONCE
        more_categories &#x3D; call_category_loads();
    
        &#x2F;&#x2F; 3. Run more +loads if there are classes OR more untried categories
    &#125; while (loadable_classes_used &gt; 0  ||  more_categories);

    objc_autoreleasePoolPop(pool);

    loading &#x3D; NO;
&#125;</code></pre>


<pre class="language-cpp" data-language="cpp" data-line="204" data-line-offset="174"><div class="caption"><span>&nbsp;</span><a href="https://github.com/Coder-ZJQ/objc4-818.2/blob/main/runtime/objc-loadmethod.mm#L177-L209">objc-loadmethod.mm#L77-L209</a></div><code class="language-cpp">&#x2F;***********************************************************************
* call_class_loads
* Call all pending class +load methods.
* If new classes become loadable, +load is NOT called for them.
*
* Called only by call_load_methods().
**********************************************************************&#x2F;
static void call_class_loads(void)
&#123;
    int i;
  
    &#x2F;&#x2F; Detach current loadable list.
    struct loadable_class *classes &#x3D; loadable_classes;
    int used &#x3D; loadable_classes_used;
    loadable_classes &#x3D; nil;
    loadable_classes_allocated &#x3D; 0;
    loadable_classes_used &#x3D; 0;
  
    &#x2F;&#x2F; Call all +loads for the detached list.
    for (i &#x3D; 0; i &lt; used; i++) &#123;
        Class cls &#x3D; classes[i].cls;
        load_method_t load_method &#x3D; (load_method_t)classes[i].method;
        if (!cls) continue; 

        if (PrintLoading) &#123;
            _objc_inform(&quot;LOAD: +[%s load]\n&quot;, cls-&gt;nameForLogging());
        &#125;
        (*load_method)(cls, @selector(load));
    &#125;
  
    &#x2F;&#x2F; Destroy the detached list.
    if (classes) free(classes);
&#125;</code></pre>


<pre class="language-cpp" data-language="cpp" data-line="251" data-line-offset="209"><div class="caption"><span>&nbsp;</span><a href="https://github.com/Coder-ZJQ/objc4-818.2/blob/main/runtime/objc-loadmethod.mm#L212-L303">objc-loadmethod.mm#L212-L303</a></div><code class="language-cpp">&#x2F;***********************************************************************
* call_category_loads
* Call some pending category +load methods.
* The parent class of the +load-implementing categories has all of 
*   its categories attached, in case some are lazily waiting for +initalize.
* Don&#39;t call +load unless the parent class is connected.
* If new categories become loadable, +load is NOT called, and they 
*   are added to the end of the loadable list, and we return TRUE.
* Return FALSE if no new categories became loadable.
*
* Called only by call_load_methods().
**********************************************************************&#x2F;
static bool call_category_loads(void)
&#123;
    int i, shift;
    bool new_categories_added &#x3D; NO;
  
    &#x2F;&#x2F; Detach current loadable list.
    struct loadable_category *cats &#x3D; loadable_categories;
    int used &#x3D; loadable_categories_used;
    int allocated &#x3D; loadable_categories_allocated;
    loadable_categories &#x3D; nil;
    loadable_categories_allocated &#x3D; 0;
    loadable_categories_used &#x3D; 0;

    &#x2F;&#x2F; Call all +loads for the detached list.
    for (i &#x3D; 0; i &lt; used; i++) &#123;
        Category cat &#x3D; cats[i].cat;
        load_method_t load_method &#x3D; (load_method_t)cats[i].method;
        Class cls;
        if (!cat) continue;

        cls &#x3D; _category_getClass(cat);
        if (cls  &amp;&amp;  cls-&gt;isLoadable()) &#123;
            if (PrintLoading) &#123;
                _objc_inform(&quot;LOAD: +[%s(%s) load]\n&quot;, 
                             cls-&gt;nameForLogging(), 
                             _category_getName(cat));
            &#125;
            (*load_method)(cls, @selector(load));
            cats[i].cat &#x3D; nil;
        &#125;
    &#125;

    &#x2F;&#x2F; Compact detached list (order-preserving)
    shift &#x3D; 0;
    for (i &#x3D; 0; i &lt; used; i++) &#123;
        if (cats[i].cat) &#123;
            cats[i-shift] &#x3D; cats[i];
        &#125; else &#123;
            shift++;
        &#125;
    &#125;
    used -&#x3D; shift;

    &#x2F;&#x2F; Copy any new +load candidates from the new list to the detached list.
    new_categories_added &#x3D; (loadable_categories_used &gt; 0);
    for (i &#x3D; 0; i &lt; loadable_categories_used; i++) &#123;
        if (used &#x3D;&#x3D; allocated) &#123;
            allocated &#x3D; allocated*2 + 16;
            cats &#x3D; (struct loadable_category *)
                realloc(cats, allocated *
                                  sizeof(struct loadable_category));
        &#125;
        cats[used++] &#x3D; loadable_categories[i];
    &#125;

    &#x2F;&#x2F; Destroy the new list.
    if (loadable_categories) free(loadable_categories);

    &#x2F;&#x2F; Reattach the (now augmented) detached list. 
    &#x2F;&#x2F; But if there&#39;s nothing left to load, destroy the list.
    if (used) &#123;
        loadable_categories &#x3D; cats;
        loadable_categories_used &#x3D; used;
        loadable_categories_allocated &#x3D; allocated;
    &#125; else &#123;
        if (cats) free(cats);
        loadable_categories &#x3D; nil;
        loadable_categories_used &#x3D; 0;
        loadable_categories_allocated &#x3D; 0;
    &#125;

    if (PrintLoading) &#123;
        if (loadable_categories_used !&#x3D; 0) &#123;
            _objc_inform(&quot;LOAD: %d categories still waiting for +load\n&quot;,
                         loadable_categories_used);
        &#125;
    &#125;

    return new_categories_added;
&#125;
</code></pre><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>编程相关</category>
        <category>Objective-C</category>
        <category>面试相关</category>
        <category>runtime</category>
      </categories>
  </entry>
  <entry>
    <title>分享一种安装体验 beta 版 macOS 的方式</title>
    <url>/2022/06/15/mac2go/</url>
    <content><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>2022 年的 WWDC 大会上苹果发布了最新的系统 <a href="https://www.apple.com.cn/macos/macos-ventura-preview/">macOS Ventura</a>。看了大会上的介绍手痒想要体验下新系统，所以就想着装个 beta 系统。之前有参考<a href="https://support.apple.com/zh-cn/HT208891">苹果的文档</a>，通过给自己电脑添加个宗卷，将 beta 系统安装在新增的宗卷上实现过。不过这样会占用本机的空间，而且本机 time machine 备份时也会将 beta 系统的数据备份，污染了备份数据。所以就借着这个机会看有没有其它“无侵入”的方式。后面参考 WinToGo 的方式，通过将系统安装在外部移动硬盘上，需要使用时连接硬盘启动实现。这种方式的优缺点：</p>
<ul>
<li>优点：不会影响本机的工作环境，也不会占用本机存储空间；</li>
<li>缺点：需要额外的移动硬盘或分区，无法在一个设备上同时使用本机系统及 beta 系统。</li>
</ul>
<span id="more"></span>



<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><ul>
<li><p>一块移动硬盘（最好是固态），不要求是空硬盘，也可以从其它在使用的硬盘中分个区；</p>
</li>
<li><p>单独硬盘不分区的话需格式化为 APFS 制式。分区的话分区时需选择 APFS，分区大小根据自己实际情况调整，以下面为例：</p>
</li>
</ul>
<img src="https://image.jqz3.tech/blog/20220624143311.png?imageView2/0/q/75|watermark/2/text/aHR0cHM6Ly9qcXozLnRlY2g=/font/bWljcm9zb2Z0IHlhaGVp/fontsize/360/fill/I0ZGRkZGRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" style="zoom:40%;" />

<ul>
<li>由于需将系统装在移动硬盘上，也就是需从移动硬盘上启动系统，所以需允许从外部介质启动，具体操作可参考：<a href="https://support.apple.com/zh-cn/HT208198">https://support.apple.com/zh-cn/HT208198</a>，将“允许从外部介质或可移动介质启动”勾选；</li>
<li>下载系统，可以从官网下载，我这里使用的一个便捷工具 <a href="https://github.com/blacktop/ipsw">ipsw</a> 下载，参考步骤：</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 列出可下载 macos 信息
ipsw download macos -l
# 根据第三列的 build id 下载 InstallAssistant.pkg
ipsw download macos -b 22A5286j -V -a -y</code></pre>

<img src="https://image.jqz3.tech/blog/20220624142830.png?imageView2/0/q/75|watermark/2/text/aHR0cHM6Ly9qcXozLnRlY2g=/font/bWljcm9zb2Z0IHlhaGVp/fontsize/360/fill/I0ZGRkZGRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" style="zoom:40%;" />

<img src="https://image.jqz3.tech/blog/20220624142723.png?imageView2/0/q/75|watermark/2/text/aHR0cHM6Ly9qcXozLnRlY2g=/font/bWljcm9zb2Z0IHlhaGVp/fontsize/360/fill/I0ZGRkZGRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" style="zoom:40%;" />

<img src="https://image.jqz3.tech/blog/20220624142635.png?imageView2/0/q/75|watermark/2/text/aHR0cHM6Ly9qcXozLnRlY2g=/font/bWljcm9zb2Z0IHlhaGVp/fontsize/360/fill/I0ZGRkZGRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" style="zoom:50%;" />

<h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><ul>
<li>准备工作完成后，打开下载的 <code>InstallAssistant.pkg</code> 安装至本机，安装成功后应用文件夹会多出一个 <code>Install macOS Ventura beta</code> 应用：</li>
</ul>
<img src="https://image.jqz3.tech/blog/20220624143458.png?imageView2/0/q/75|watermark/2/text/aHR0cHM6Ly9qcXozLnRlY2g=/font/bWljcm9zb2Z0IHlhaGVp/fontsize/360/fill/I0ZGRkZGRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" style="zoom:33%;" />

<ul>
<li>打开 <code>Install macOS Ventura beta</code> 应用按提示操作，安装系统时选择刚刚移动硬盘分配的分区（这里我给分区命名的是 <code>macos Ventura</code>）然后继续：</li>
</ul>
<img src="https://image.jqz3.tech/blog/20220624143606.png?imageView2/0/q/75|watermark/2/text/aHR0cHM6Ly9qcXozLnRlY2g=/font/bWljcm9zb2Z0IHlhaGVp/fontsize/360/fill/I0ZGRkZGRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" style="zoom:40%;" />

<ul>
<li>等待系统安装（可以 <code>command + L</code> 打开日志窗口查看进度），一般需要二三十分钟，中间会重启几次：</li>
</ul>
<img src="https://image.jqz3.tech/blog/20220624143644.png?imageView2/0/q/75|watermark/2/text/aHR0cHM6Ly9qcXozLnRlY2g=/font/bWljcm9zb2Z0IHlhaGVp/fontsize/360/fill/I0ZGRkZGRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" style="zoom:40%;" />

<p><img src="https://image.jqz3.tech/blog/20220624144453.png?imageView2/0/q/75%7Cwatermark/2/text/aHR0cHM6Ly9qcXozLnRlY2g=/font/bWljcm9zb2Z0IHlhaGVp/fontsize/360/fill/I0ZGRkZGRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10"></p>
<h3 id="切换"><a href="#切换" class="headerlink" title="切换"></a>切换</h3><ul>
<li><p>安装成功后，下次想要切换系统可以连接硬盘开机时按住 option 键，然后选择对应系统启动盘启动；</p>
</li>
<li><p>或者在设置页面选择对应系统启动盘重启。</p>
</li>
</ul>
<img src="https://image.jqz3.tech/blog/20220624154646.png?imageView2/0/q/75|watermark/2/text/aHR0cHM6Ly9qcXozLnRlY2g=/font/bWljcm9zb2Z0IHlhaGVp/fontsize/360/fill/I0ZGRkZGRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" style="zoom:40%;" />
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
  </entry>
  <entry>
    <title>记录一次 macOS 更新问题</title>
    <url>/2022/03/17/macos-update-issue/</url>
    <content><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><blockquote>
<p>前天将电脑升级到了 macOS Monterey 12.3，进入系统登录使用一段时间后会卡死风扇狂转然后重启，重启后继续重复问题。<br>为了定位问题，尝试过：</p>
<ul>
<li>开机进入硬件检测没有发现问题；</li>
<li>以安全模式进入系统无法进入。</li>
</ul>
<p>所以觉得可能是系统问题，然后尝试：</p>
<ul>
<li>通过时间机器恢复；</li>
<li>利用 U 盘引导重装系统；</li>
<li>进入 Recovery 模式恢复/重装系统。</li>
</ul>
<p>但都在进入 Recovery 界面后重启无法成功。不知道尝试了多少次，薅掉了多少头发(令人头秃.png)，最后通过与另一台 Mac 电脑连接并进入 DFU 模式，然后使用 Apple Configurator 2 恢复固件后重装系统解决。</p>
</blockquote>
<span id="more"></span>
<h3 id="按键及作用"><a href="#按键及作用" class="headerlink" title="按键及作用"></a>按键及作用</h3><blockquote>
<p>记录下当时使用到的相关按键及作用（Intel 处理器），免得下次踩坑。</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">按键（开机时按住）</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>Shift</strong></td>
<td align="center"><a href="https://support.apple.com/zh-cn/HT201262">以安全模式进入系统</a></td>
</tr>
<tr>
<td align="center"><strong>Option</strong></td>
<td align="center"><a href="https://support.apple.com/zh-cn/HT201372">选择启动盘启动（可用于 U 盘安装系统）</a></td>
</tr>
<tr>
<td align="center"><strong>D</strong></td>
<td align="center"><a href="https://support.apple.com/zh-cn/HT202731">进入硬件检测</a></td>
</tr>
<tr>
<td align="center"><strong>Command-R</strong></td>
<td align="center"><a href="https://support.apple.com/zh-cn/HT204904">进入恢复模式（时间机器恢复，重装系统，磁盘工具等）</a></td>
</tr>
<tr>
<td align="center"><strong>Option-Command-R</strong></td>
<td align="center"><a href="https://support.apple.com/zh-cn/HT204904#exceptions">联网获得与 Mac 兼容的最新版 macOS（最高可用系统）</a></td>
</tr>
<tr>
<td align="center"><strong>Shift-Option-Command-R</strong></td>
<td align="center"><a href="https://support.apple.com/zh-cn/HT204904#exceptions">联网获得 Mac 自带的 macOS（出厂系统），或与它最接近且仍在提供的版本（最低可用系统）</a></td>
</tr>
<tr>
<td align="center"><strong>电源按钮 - (右 Shift) - (左 Option) - (左 Control) 直到 Apple Configurator 显示 DFU</strong></td>
<td align="center"><a href="https://support.apple.com/zh-cn/guide/apple-configurator-2/apdebea5be51/mac">通过 Apple Configurator 2 DFU 修复/恢复固件</a></td>
</tr>
</tbody></table>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>macOS</tag>
      </tags>
  </entry>
  <entry>
    <title>method_t</title>
    <url>/2019/09/02/method-t/</url>
    <content><![CDATA[<ul>
<li>method_t 是对方法 / 函数的封装</li>
</ul>
<pre class="line-numbers language-objectivec" data-language="objectivec"><code class="language-objectivec">struct method_t &#123;
    SEL name;						&#x2F;&#x2F; 方法名
    const char *types;	&#x2F;&#x2F; 编码（返回值类型，参数类型）
    IMP imp;						&#x2F;&#x2F; 指向方法的指针（方法地址）
&#125;</code></pre>

<span id="more"></span>

<ul>
<li><strong>IMP</strong> 代表函数的具体实现</li>
</ul>
<pre class="line-numbers language-objectivec" data-language="objectivec"><code class="language-objectivec">&#x2F;&#x2F;&#x2F; A pointer to the function of a method implementation. 
typedef id _Nullable (*IMP)(id _Nonnull, SEL _Nonnull, ...); </code></pre>

<ul>
<li><strong>SEL</strong> 代表方法 / 函数名，一般叫做选择器，底层结构跟 <code>char *</code> 类似<ul>
<li>可以通过 <code>@selector()</code> 和 <code>sel_registerName()</code> 获得；</li>
<li>可以通过 <code>sel_getName()</code> 和 <code>NSStringFromSelector()</code> 转成字符串；</li>
<li>不同类中相同名字的方法所对应的方法选择器是相同的。</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-objectivec" data-language="objectivec"><code class="language-objectivec">&#x2F;&#x2F;&#x2F; An opaque type that represents a method selector.
typedef struct objc_selector *SEL;</code></pre>

<ul>
<li>types 包含了函数返回值、参数编码的字符串</li>
</ul>
<p><code>返回值 + 参数 1 + 参数 2 + ...... + 参数 n</code></p>
<ul>
<li>iOS 中提供了一个叫做 <a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtTypeEncodings.html">@encode</a> 的指令，可以将具体的类型表示成字符串编码</li>
</ul>
<pre class="line-numbers language-objectivec" data-language="objectivec"><code class="language-objectivec">char *buf1 &#x3D; @encode(int **);
char *buf2 &#x3D; @encode(struct key);
char *buf3 &#x3D; @encode(Rectangle);</code></pre>

<table>
<thead>
<tr>
<th>Code</th>
<th>Meaning</th>
</tr>
</thead>
<tbody><tr>
<td><code>c</code></td>
<td>A <code>char</code></td>
</tr>
<tr>
<td><code>i</code></td>
<td>An <code>int</code></td>
</tr>
<tr>
<td><code>s</code></td>
<td>A <code>short</code></td>
</tr>
<tr>
<td><code>l</code></td>
<td>A <code>long</code><br><code>l</code> is treated as a 32-bit quantity on 64-bit programs.</td>
</tr>
<tr>
<td><code>q</code></td>
<td>A <code>long long</code></td>
</tr>
<tr>
<td><code>C</code></td>
<td>An <code>unsigned char</code></td>
</tr>
<tr>
<td><code>I</code></td>
<td>An <code>unsigned int</code></td>
</tr>
<tr>
<td><code>S</code></td>
<td>An <code>unsigned short</code></td>
</tr>
<tr>
<td><code>L</code></td>
<td>An <code>unsigned long</code></td>
</tr>
<tr>
<td><code>Q</code></td>
<td>An <code>unsigned long long</code></td>
</tr>
<tr>
<td><code>f</code></td>
<td>A <code>float</code></td>
</tr>
<tr>
<td><code>d</code></td>
<td>A <code>double</code></td>
</tr>
<tr>
<td><code>B</code></td>
<td>A C++ <code>bool</code> or a C99 <code>_Bool</code></td>
</tr>
<tr>
<td><code>v</code></td>
<td>A <code>void</code></td>
</tr>
<tr>
<td><code>*</code></td>
<td>A character string (<code>char *</code>)</td>
</tr>
<tr>
<td><code>@</code></td>
<td>An object (whether statically typed or typed <code>id</code>)</td>
</tr>
<tr>
<td><code>#</code></td>
<td>A class object (<code>Class</code>)</td>
</tr>
<tr>
<td><code>:</code></td>
<td>A method selector (<code>SEL</code>)</td>
</tr>
<tr>
<td>[<em>array type</em>]</td>
<td>An array</td>
</tr>
<tr>
<td>{<em>name=type…</em>}</td>
<td>A structure</td>
</tr>
<tr>
<td>(<em>name</em>=<em>type…</em>)</td>
<td>A union</td>
</tr>
<tr>
<td><code>b</code>num</td>
<td>A bit field of <em>num</em> bits</td>
</tr>
<tr>
<td><code>^</code>type</td>
<td>A pointer to <em>type</em></td>
</tr>
<tr>
<td><code>?</code></td>
<td>An unknown type (among other things, this code is used for function pointers)</td>
</tr>
</tbody></table>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>编程相关</category>
        <category>Objective-C</category>
        <category>runtime</category>
      </categories>
      <tags>
        <tag>runtime</tag>
      </tags>
  </entry>
  <entry>
    <title>POST 与 GET 的区别</title>
    <url>/2016/07/27/post-get/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">GET</th>
<th align="center">POST</th>
</tr>
</thead>
<tbody><tr>
<td align="center">用途</td>
<td align="center">用于从指定资源请求数据</td>
<td align="center">用于将数据发送到服务器来创建/更新资源。</td>
</tr>
<tr>
<td align="center">安全性</td>
<td align="center">参数暴露在 URL 中，不安全</td>
<td align="center">数据储存在请求体中，较安全</td>
</tr>
<tr>
<td align="center">参数限制</td>
<td align="center">URL 有长度限制（携带参数有限制）</td>
<td align="center">请求体中参数无限制</td>
</tr>
<tr>
<td align="center">是否缓存</td>
<td align="center">浏览器可缓存</td>
<td align="center">浏览器不缓存</td>
</tr>
<tr>
<td align="center">底层</td>
<td align="center">一个报文<br />http header&amp;data -&gt; 200</td>
<td align="center">两个报文<br />http header -&gt; 100 continue<br />http data -&gt; 200</td>
</tr>
</tbody></table>
<span id="more"></span>

<h5 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h5><ul>
<li><p><a href="https://www.w3schools.com/tags/ref_httpmethods.asp">HTTP Methods GET vs POST</a></p>
</li>
<li><p><a href="https://www.diffen.com/difference/GET-vs-POST-HTTP-Requests">GET vs POST - Difference and Comparison | Diffe</a></p>
</li>
<li><p><a href="https://www.cnblogs.com/logsharing/p/8448446.html">GET和POST两种基本请求方法的区别</a></p>
</li>
</ul>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>post</tag>
        <tag>get</tag>
      </tags>
  </entry>
  <entry>
    <title>Cocoapods Private Pods</title>
    <url>/2019/10/06/private-specs/</url>
    <content><![CDATA[<h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><p>创建私有源 git 仓库，可以创建 GitHub 仓库或者其它，然后将私有源添加至本地，下以 <code>git@github.com:Coder-ZJQ/Specs.git</code> 为例：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># pod repo add NAME URL [BRANCH]
pod repo add zjq-specs git@github.com:Coder-ZJQ&#x2F;Specs.git</code></pre>

<p>可以执行下列命令查看已添加的私有源：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 查看本地的私有源列表
pod repo list</code></pre>

<p>校验私有源中的 spec 是否合法</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cd ~&#x2F;.cocoapods&#x2F;zjq-specs
pod repo lint .</code></pre>
<span id="more"></span>

<img src="https://image.jqz3.tech/blog/20211006164529.png?imageView2/0/q/75|watermark/2/text/aHR0cHM6Ly9qcXozLnRlY2g=/font/bWljcm9zb2Z0IHlhaGVp/fontsize/360/fill/I0ZGRkZGRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" style="zoom:50%;" />

<h2 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h2><p>添加 podspec 至私有源，以 <code>JQCollectionViewAlignLayout.podspec</code> 为例：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># pod repo push REPO_NAME SPEC_NAME.podspec
pod repo push zjq-specs JQCollectionViewAlignLayout.podspec</code></pre>

<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>编辑 <code>Podfile</code> 文件，添加需要使用的私有源及其中的框架，如下所示：</p>
<pre class="line-numbers language-ruby" data-language="ruby" data-start="1" data-line="1,5" data-line-offset="0"><div class="caption"><span>Podfile</span></div><code class="language-ruby">source &#39;git@github.com:Coder-ZJQ&#x2F;Specs.git&#39;

target &#39;your-target&#39; do

  pod &#39;JQCollectionViewAlignLayout&#39;

end</code></pre>

<h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p>删除本地添加的私有源(即 <code>.cocoapods/repos</code> 目录下)</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pod repo remove zjq-specs</code></pre>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>Private Pods: <a href="https://guides.cocoapods.org/making/private-cocoapods.html">https://guides.cocoapods.org/making/private-cocoapods.html</a></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>工具使用</category>
        <category>CocoaPods</category>
      </categories>
      <tags>
        <tag>CocoaPods</tag>
      </tags>
  </entry>
  <entry>
    <title>ipa 重签名及安装工具</title>
    <url>/2021/12/04/resign-tools/</url>
    <content><![CDATA[<p><strong>记录一些 ipa 重签名及安装工具：</strong></p>
<table>
<thead>
<tr>
<th align="center">工具</th>
<th align="center">类型</th>
<th align="center">支持系统</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><a href="https://sideloadly.io/">Sideloadly</a></td>
<td align="center">应用</td>
<td align="center"><code>macOS</code>, <code>Windows</code></td>
</tr>
<tr>
<td align="center"><a href="http://www.cydiaimpactor.com/">Cydia Impactor</a></td>
<td align="center">应用</td>
<td align="center"><code>macOS</code>, <code>Windows</code>, <code>Linux</code></td>
</tr>
<tr>
<td align="center"><a href="https://github.com/rileytestut/AltStore">AltStore</a></td>
<td align="center">应用</td>
<td align="center"><code>iOS</code></td>
</tr>
<tr>
<td align="center"><a href="https://github.com/InjoyDeng/ResignTool">ResignTool</a></td>
<td align="center">应用</td>
<td align="center"><code>macOS</code></td>
</tr>
<tr>
<td align="center"><a href="https://github.com/zhlynn/zsign">zsign</a></td>
<td align="center">命令行工具</td>
<td align="center"><code>macOS</code>, <code>Windows</code>, <code>Linux</code></td>
</tr>
<tr>
<td align="center"><a href="https://github.com/nowsecure/node-applesign">node-applesign</a></td>
<td align="center">NodeJS module, 命令行工具</td>
<td align="center">不限系统，但需安装 Node 环境</td>
</tr>
<tr>
<td align="center"><a href="https://github.com/Johankoi/MachoSignature">MachoSignature</a></td>
<td align="center">应用</td>
<td align="center"><code>macOS</code></td>
</tr>
<tr>
<td align="center"><a href="https://github.com/DanTheMan827/ios-app-signer">iOS App Signer</a></td>
<td align="center">应用</td>
<td align="center"><code>macOS</code></td>
</tr>
<tr>
<td align="center"><a href="https://github.com/SignTools/SignTools">SignTools</a></td>
<td align="center">服务</td>
<td align="center">不限系统，可以自部署</td>
</tr>
<tr>
<td align="center"><a href="https://github.com/xndrs/XReSign">XReSign</a></td>
<td align="center">应用</td>
<td align="center"><code>macOS</code></td>
</tr>
<tr>
<td align="center"><a href="https://github.com/maciekish/iReSign">iReSign</a></td>
<td align="center">应用</td>
<td align="center"><code>macOS</code></td>
</tr>
<tr>
<td align="center"><a href="https://github.com/sauce-archives/isign">isign</a></td>
<td align="center">命令行工具</td>
<td align="center"><code>macOS</code>, <code>Linux</code></td>
</tr>
</tbody></table>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>工具使用</category>
        <category>逆向安全</category>
      </categories>
      <tags>
        <tag>ipa</tag>
        <tag>resign</tag>
      </tags>
  </entry>
  <entry>
    <title>记录 swift 中的一些关键字及操作符</title>
    <url>/2020/07/15/swift-keyword-operator/</url>
    <content><![CDATA[<h4 id="Type-Alias"><a href="#Type-Alias" class="headerlink" title="Type Alias"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html#ID327">Type Alias</a></h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">typealias AudioSample &#x3D; UInt16</code></pre>



<h4 id="Optional-Binding"><a href="#Optional-Binding" class="headerlink" title="Optional Binding"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html#ID333">Optional Binding</a></h4><ul>
<li><code>if let ... &#123; ... &#125;</code></li>
</ul>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">if let constantName &#x3D; someOptional &#123;
  &#x2F;&#x2F; statements
&#125;</code></pre>

<ul>
<li><code>while let ... &#123; ... &#125;</code></li>
</ul>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">while let constantName &#x3D; someOptional &#123;
  &#x2F;&#x2F; statements
&#125;</code></pre>

<span id="more"></span>

<h4 id="Early-Exit"><a href="#Early-Exit" class="headerlink" title="Early Exit"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html#ID525">Early Exit</a></h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">guard let constantName &#x3D; someOptional &#123;
  &#x2F;&#x2F; statements
&#125;</code></pre>



<h4 id="Debugging-with-Assertions"><a href="#Debugging-with-Assertions" class="headerlink" title="Debugging with Assertions"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html#ID336">Debugging with Assertions</a></h4><ul>
<li><code>assert(...)</code></li>
</ul>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">let age &#x3D; -3
assert(age &gt;&#x3D; 0, &quot;A person&#39;s age can&#39;t be less than zero.&quot;)
&#x2F;&#x2F; This assertion fails because -3 isn&#39;t &gt;&#x3D; 0.</code></pre>

<ul>
<li><code>assertionFailure(...)</code></li>
</ul>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">if age &gt; 10 &#123;
    print(&quot;You can ride the roller-coaster or the ferris wheel.&quot;)
&#125; else if age &gt;&#x3D; 0 &#123;
    print(&quot;You can ride the ferris wheel.&quot;)
&#125; else &#123;
    assertionFailure(&quot;A person&#39;s age can&#39;t be less than zero.&quot;)
&#125;</code></pre>



<h4 id="Enforcing-Preconditions"><a href="#Enforcing-Preconditions" class="headerlink" title="Enforcing Preconditions"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html#ID554">Enforcing Preconditions</a></h4><ul>
<li><code>precondition(...)</code></li>
</ul>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">&#x2F;&#x2F; In the implementation of a subscript...
precondition(index &gt; 0, &quot;Index must be greater than zero.&quot;)</code></pre>

<ul>
<li><code>preconditionFailure(...)</code></li>
</ul>
<h4 id="Fatal-Error"><a href="#Fatal-Error" class="headerlink" title="Fatal Error"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html#ID554">Fatal Error</a></h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">fatalError(&quot;Unimplemented&quot;)</code></pre>



<h4 id="Fallthrough"><a href="#Fallthrough" class="headerlink" title="Fallthrough"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html#ID140">Fallthrough</a></h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">let integerToDescribe &#x3D; 5
var description &#x3D; &quot;The number \(integerToDescribe) is&quot;
switch integerToDescribe &#123;
case 2, 3, 5, 7, 11, 13, 17, 19:
    description +&#x3D; &quot; a prime number, and also&quot;
    fallthrough
default:
    description +&#x3D; &quot; an integer.&quot;
&#125;
print(description)
&#x2F;&#x2F; Prints &quot;The number 5 is a prime number, and also an integer.&quot;</code></pre>



<h4 id="where-in-switch"><a href="#where-in-switch" class="headerlink" title="where in switch"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html#ID134">where in switch</a></h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">let yetAnotherPoint &#x3D; (1, -1)
switch yetAnotherPoint &#123;
case let (x, y) where x &#x3D;&#x3D; y:
    print(&quot;(\(x), \(y)) is on the line x &#x3D;&#x3D; y&quot;)
case let (x, y) where x &#x3D;&#x3D; -y:
    print(&quot;(\(x), \(y)) is on the line x &#x3D;&#x3D; -y&quot;)
case let (x, y):
    print(&quot;(\(x), \(y)) is just some arbitrary point&quot;)
&#125;
&#x2F;&#x2F; Prints &quot;(1, -1) is on the line x &#x3D;&#x3D; -y&quot;</code></pre>



<h4 id="Labeled-Statements"><a href="#Labeled-Statements" class="headerlink" title="Labeled Statements"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html#ID141">Labeled Statements</a></h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">gameLoop: while square !&#x3D; finalSquare &#123;
    diceRoll +&#x3D; 1
    if diceRoll &#x3D;&#x3D; 7 &#123; diceRoll &#x3D; 1 &#125;
    switch square + diceRoll &#123;
    case finalSquare:
        &#x2F;&#x2F; diceRoll will move us to the final square, so the game is over
        break gameLoop
    case let newSquare where newSquare &gt; finalSquare:
        &#x2F;&#x2F; diceRoll will move us beyond the final square, so roll again
        continue gameLoop
    default:
        &#x2F;&#x2F; this is a valid move, so find out its effect
        square +&#x3D; diceRoll
        square +&#x3D; board[square]
    &#125;
&#125;
print(&quot;Game over!&quot;)</code></pre>



<h4 id="Checking-API-Availability"><a href="#Checking-API-Availability" class="headerlink" title="Checking API Availability"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html#ID523">Checking API Availability</a></h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">if #available(iOS 10, macOS 10.12, *) &#123;
    &#x2F;&#x2F; Use iOS 10 APIs on iOS, and use macOS 10.12 APIs on macOS
&#125; else &#123;
    &#x2F;&#x2F; Fall back to earlier iOS and macOS APIs
&#125;</code></pre>



<h4 id="Variadic-Parameters"><a href="#Variadic-Parameters" class="headerlink" title="Variadic Parameters"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/Functions.html#ID171">Variadic Parameters</a></h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">func arithmeticMean(_ numbers: Double...) -&gt; Double &#123;
    var total: Double &#x3D; 0
    for number in numbers &#123;
        total +&#x3D; number
    &#125;
    return total &#x2F; Double(numbers.count)
&#125;
arithmeticMean(1, 2, 3, 4, 5)
&#x2F;&#x2F; returns 3.0, which is the arithmetic mean of these five numbers
arithmeticMean(3, 8.25, 18.75)
&#x2F;&#x2F; returns 10.0, which is the arithmetic mean of these three numbers</code></pre>



<h4 id="In-Out-Parameters"><a href="#In-Out-Parameters" class="headerlink" title="In-Out Parameters"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/Functions.html#ID173">In-Out Parameters</a></h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">func swapTwoInts(_ a: inout Int, _ b: inout Int) &#123;
    let temporaryA &#x3D; a
    a &#x3D; b
    b &#x3D; temporaryA
&#125;
var someInt &#x3D; 3
var anotherInt &#x3D; 107
swapTwoInts(&amp;someInt, &amp;anotherInt)
print(&quot;someInt is now \(someInt), and anotherInt is now \(anotherInt)&quot;)
&#x2F;&#x2F; Prints &quot;someInt is now 107, and anotherInt is now 3&quot;</code></pre>



<h4 id="Escaping-Closures"><a href="#Escaping-Closures" class="headerlink" title="Escaping Closures"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/Closures.html#ID546">Escaping Closures</a></h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">var completionHandlers: [() -&gt; Void] &#x3D; []
func someFunctionWithEscapingClosure(completionHandler: @escaping () -&gt; Void) &#123;
    completionHandlers.append(completionHandler)
&#125;</code></pre>



<h4 id="Autoclosures"><a href="#Autoclosures" class="headerlink" title="Autoclosures"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/Closures.html#ID543">Autoclosures</a></h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">&#x2F;&#x2F; customersInLine is [&quot;Ewa&quot;, &quot;Barry&quot;, &quot;Daniella&quot;]
func serve(customer customerProvider: @autoclosure () -&gt; String) &#123;
    print(&quot;Now serving \(customerProvider())!&quot;)
&#125;
serve(customer: customersInLine.remove(at: 0))
&#x2F;&#x2F; Prints &quot;Now serving Ewa!&quot;</code></pre>



<h4 id="mutating"><a href="#mutating" class="headerlink" title="mutating"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/Methods.html#ID239">mutating</a></h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">protocol SomeProtocol &#123;
    mutating func someFunction()
&#125;

struct SomeStructure: SomeProtocol &#123;
    var someVariable &#x3D; 1
    mutating func someFunction() &#123;
        someVariable &#x3D; 2
    &#125;
&#125;

class SomeClass: SomeProtocol &#123;
    var someVariable &#x3D; 1
    func someFunction() &#123;
        someVariable &#x3D; 2
    &#125;
&#125;</code></pre>

<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">struct Point &#123;
    var x &#x3D; 0.0, y &#x3D; 0.0
    mutating func moveBy(x deltaX: Double, y deltaY: Double) &#123;
        self &#x3D; Point(x: x + deltaX, y: y + deltaY)
    &#125;
&#125;</code></pre>

<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">enum TriStateSwitch &#123;
    case off, low, high
    mutating func next() &#123;
        switch self &#123;
        case .off:
            self &#x3D; .low
        case .low:
            self &#x3D; .high
        case .high:
            self &#x3D; .off
        &#125;
    &#125;
&#125;
var ovenLight &#x3D; TriStateSwitch.low
ovenLight.next()
&#x2F;&#x2F; ovenLight is now equal to .high
ovenLight.next()
&#x2F;&#x2F; ovenLight is now equal to .off</code></pre>

<blockquote>
<p>Notice the use of the <code>mutating</code> keyword in the declaration of <code>SomeStructure</code> to mark a method that modifies the structure. The declaration of <code>SomeClass</code> doesn’t need any of its methods marked as mutating because methods on a class can always modify the class.</p>
</blockquote>
<h4 id="Recursive-Enumerations"><a href="#Recursive-Enumerations" class="headerlink" title="Recursive Enumerations"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/Enumerations.html#ID536">Recursive Enumerations</a></h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">enum ArithmeticExpression &#123;
    case number(Int)
    indirect case addition(ArithmeticExpression, ArithmeticExpression)
    indirect case multiplication(ArithmeticExpression, ArithmeticExpression)
&#125;

&#x2F;&#x2F; enable indirection for all of the enumeration’s cases
indirect enum ArithmeticExpression &#123;
    case number(Int)
    case addition(ArithmeticExpression, ArithmeticExpression)
    case multiplication(ArithmeticExpression, ArithmeticExpression)
&#125;</code></pre>



<h4 id="Identity-Operators"><a href="#Identity-Operators" class="headerlink" title="Identity Operators"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/ClassesAndStructures.html#ID90">Identity Operators</a></h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">if tenEighty &#x3D;&#x3D;&#x3D; alsoTenEighty &#123;
    print(&quot;tenEighty and alsoTenEighty refer to the same VideoMode instance.&quot;)
&#125;
&#x2F;&#x2F; Prints &quot;tenEighty and alsoTenEighty refer to the same VideoMode instance.&quot;</code></pre>



<h4 id="Lazy-Stored-Properties"><a href="#Lazy-Stored-Properties" class="headerlink" title="Lazy Stored Properties"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/Properties.html#ID257">Lazy Stored Properties</a></h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">class DataImporter &#123;
    &#x2F;*
    DataImporter is a class to import data from an external file.
    The class is assumed to take a nontrivial amount of time to initialize.
    *&#x2F;
    var filename &#x3D; &quot;data.txt&quot;
    &#x2F;&#x2F; the DataImporter class would provide data importing functionality here
&#125;

class DataManager &#123;
    lazy var importer &#x3D; DataImporter()
    var data: [String] &#x3D; []
    &#x2F;&#x2F; the DataManager class would provide data management functionality here
&#125;

let manager &#x3D; DataManager()
manager.data.append(&quot;Some data&quot;)
manager.data.append(&quot;Some more data&quot;)
&#x2F;&#x2F; the DataImporter instance for the importer property hasn&#39;t yet been created</code></pre>



<h4 id="Computed-Properties"><a href="#Computed-Properties" class="headerlink" title="Computed Properties"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/Properties.html#ID259">Computed Properties</a></h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">struct Point &#123;
    var x &#x3D; 0.0, y &#x3D; 0.0
&#125;
struct Size &#123;
    var width &#x3D; 0.0, height &#x3D; 0.0
&#125;
struct Rect &#123;
    var origin &#x3D; Point()
    var size &#x3D; Size()
    var center: Point &#123;
        get &#123;
            let centerX &#x3D; origin.x + (size.width &#x2F; 2)
            let centerY &#x3D; origin.y + (size.height &#x2F; 2)
            return Point(x: centerX, y: centerY)
        &#125;
        set(newCenter) &#123;
            origin.x &#x3D; newCenter.x - (size.width &#x2F; 2)
            origin.y &#x3D; newCenter.y - (size.height &#x2F; 2)
        &#125;
    &#125;
&#125;
var square &#x3D; Rect(origin: Point(x: 0.0, y: 0.0),
                  size: Size(width: 10.0, height: 10.0))
let initialSquareCenter &#x3D; square.center
square.center &#x3D; Point(x: 15.0, y: 15.0)
print(&quot;square.origin is now at (\(square.origin.x), \(square.origin.y))&quot;)
&#x2F;&#x2F; Prints &quot;square.origin is now at (10.0, 10.0)&quot;</code></pre>



<h4 id="Read-Only-Computed-Properties"><a href="#Read-Only-Computed-Properties" class="headerlink" title="Read-Only Computed Properties"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/Properties.html#ID261">Read-Only Computed Properties</a></h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">struct Cuboid &#123;
    var width &#x3D; 0.0, height &#x3D; 0.0, depth &#x3D; 0.0
    var volume: Double &#123;
        return width * height * depth
    &#125;
&#125;
let fourByFiveByTwo &#x3D; Cuboid(width: 4.0, height: 5.0, depth: 2.0)
print(&quot;the volume of fourByFiveByTwo is \(fourByFiveByTwo.volume)&quot;)
&#x2F;&#x2F; Prints &quot;the volume of fourByFiveByTwo is 40.0&quot;</code></pre>



<h4 id="Property-Observers"><a href="#Property-Observers" class="headerlink" title="Property Observers"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/Properties.html#ID262">Property Observers</a></h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">class StepCounter &#123;
    var totalSteps: Int &#x3D; 0 &#123;
        willSet(newTotalSteps) &#123;
            print(&quot;About to set totalSteps to \(newTotalSteps)&quot;)
        &#125;
        didSet &#123;
            if totalSteps &gt; oldValue  &#123;
                print(&quot;Added \(totalSteps - oldValue) steps&quot;)
            &#125;
        &#125;
    &#125;
&#125;
let stepCounter &#x3D; StepCounter()
stepCounter.totalSteps &#x3D; 200
&#x2F;&#x2F; About to set totalSteps to 200
&#x2F;&#x2F; Added 200 steps
stepCounter.totalSteps &#x3D; 360
&#x2F;&#x2F; About to set totalSteps to 360
&#x2F;&#x2F; Added 160 steps
stepCounter.totalSteps &#x3D; 896
&#x2F;&#x2F; About to set totalSteps to 896
&#x2F;&#x2F; Added 536 steps</code></pre>



<h4 id="Property-Wrappers"><a href="#Property-Wrappers" class="headerlink" title="Property Wrappers"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/Properties.html#ID617">Property Wrappers</a></h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">@propertyWrapper
struct TwelveOrLess &#123;
    private var number &#x3D; 0
    var wrappedValue: Int &#123;
        get &#123; return number &#125;
        set &#123; number &#x3D; min(newValue, 12) &#125;
    &#125;
&#125;

struct SmallRectangle &#123;
    @TwelveOrLess var height: Int
    @TwelveOrLess var width: Int
&#125;

var rectangle &#x3D; SmallRectangle()
print(rectangle.height)
&#x2F;&#x2F; Prints &quot;0&quot;

rectangle.height &#x3D; 10
print(rectangle.height)
&#x2F;&#x2F; Prints &quot;10&quot;

rectangle.height &#x3D; 24
print(rectangle.height)
&#x2F;&#x2F; Prints &quot;12&quot;</code></pre>



<h4 id="Projecting-a-Value-From-a-Property-Wrapper"><a href="#Projecting-a-Value-From-a-Property-Wrapper" class="headerlink" title="Projecting a Value From a Property Wrapper"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/Properties.html#ID619">Projecting a Value From a Property Wrapper</a></h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">@propertyWrapper
struct SmallNumber &#123;
    private var number: Int
    private(set) var projectedValue: Bool

    var wrappedValue: Int &#123;
        get &#123; return number &#125;
        set &#123;
            if newValue &gt; 12 &#123;
                number &#x3D; 12
                projectedValue &#x3D; true
            &#125; else &#123;
                number &#x3D; newValue
                projectedValue &#x3D; false
            &#125;
        &#125;
    &#125;

    init() &#123;
        self.number &#x3D; 0
        self.projectedValue &#x3D; false
    &#125;
&#125;
struct SomeStructure &#123;
    @SmallNumber var someNumber: Int
&#125;
var someStructure &#x3D; SomeStructure()

someStructure.someNumber &#x3D; 4
print(someStructure.$someNumber)
&#x2F;&#x2F; Prints &quot;false&quot;

someStructure.someNumber &#x3D; 55
print(someStructure.$someNumber)
&#x2F;&#x2F; Prints &quot;true&quot;</code></pre>



<h4 id="Type-Properties"><a href="#Type-Properties" class="headerlink" title="Type Properties"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/Properties.html#ID264">Type Properties</a></h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">struct SomeStructure &#123;
    static var storedTypeProperty &#x3D; &quot;Some value.&quot;
    static var computedTypeProperty: Int &#123;
        return 1
    &#125;
&#125;
enum SomeEnumeration &#123;
    static var storedTypeProperty &#x3D; &quot;Some value.&quot;
    static var computedTypeProperty: Int &#123;
        return 6
    &#125;
&#125;
class SomeClass &#123;
    static var storedTypeProperty &#x3D; &quot;Some value.&quot;
    static var computedTypeProperty: Int &#123;
        return 27
    &#125;
    class var overrideableComputedTypeProperty: Int &#123;
        return 107
    &#125;
&#125;</code></pre>



<h4 id="Type-Methods"><a href="#Type-Methods" class="headerlink" title="Type Methods"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/Methods.html#ID241">Type Methods</a></h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">class SomeClass &#123;
    class func someTypeMethod() &#123;
        &#x2F;&#x2F; type method implementation goes here
    &#125;
&#125;
SomeClass.someTypeMethod()</code></pre>

<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">struct LevelTracker &#123;
    static var highestUnlockedLevel &#x3D; 1
    var currentLevel &#x3D; 1

    static func unlock(_ level: Int) &#123;
        if level &gt; highestUnlockedLevel &#123; highestUnlockedLevel &#x3D; level &#125;
    &#125;

    static func isUnlocked(_ level: Int) -&gt; Bool &#123;
        return level &lt;&#x3D; highestUnlockedLevel
    &#125;

&#125;</code></pre>



<h4 id="discardableResult"><a href="#discardableResult" class="headerlink" title="@discardableResult"></a><a href="https://docs.swift.org/swift-book/ReferenceManual/Attributes.html#attributes">@discardableResult</a></h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">@discardableResult
func advance(to level: Int) -&gt; Bool &#123;
    if LevelTracker.isUnlocked(level) &#123;
        currentLevel &#x3D; level
        return true
    &#125; else &#123;
        return false
    &#125;
&#125;</code></pre>

<blockquote>
<p>The <code>discardableResult</code> attribute on a function declaration indicates that, although the function returns a value, the compiler shouldn’t generate a warning if the return value is unused.</p>
</blockquote>
<h4 id="Subscript-Syntax"><a href="#Subscript-Syntax" class="headerlink" title="Subscript Syntax"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/Subscripts.html#ID306">Subscript Syntax</a></h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">struct Matrix &#123;
    let rows: Int, columns: Int
    var grid: [Double]
    init(rows: Int, columns: Int) &#123;
        self.rows &#x3D; rows
        self.columns &#x3D; columns
        grid &#x3D; Array(repeating: 0.0, count: rows * columns)
    &#125;
    func indexIsValid(row: Int, column: Int) -&gt; Bool &#123;
        return row &gt;&#x3D; 0 &amp;&amp; row &lt; rows &amp;&amp; column &gt;&#x3D; 0 &amp;&amp; column &lt; columns
    &#125;
    subscript(row: Int, column: Int) -&gt; Double &#123;
        get &#123;
            assert(indexIsValid(row: row, column: column), &quot;Index out of range&quot;)
            return grid[(row * columns) + column]
        &#125;
        set &#123;
            assert(indexIsValid(row: row, column: column), &quot;Index out of range&quot;)
            grid[(row * columns) + column] &#x3D; newValue
        &#125;
    &#125;
&#125;

var matrix &#x3D; Matrix(rows: 2, columns: 2)

matrix[0, 1] &#x3D; 1.5
matrix[1, 0] &#x3D; 3.2

let someValue &#x3D; matrix[2, 2]
&#x2F;&#x2F; This triggers an assert, because [2, 2] is outside of the matrix bounds.</code></pre>



<h4 id="Type-Subscripts"><a href="#Type-Subscripts" class="headerlink" title="Type Subscripts"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/Subscripts.html#ID609">Type Subscripts</a></h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">enum Planet: Int &#123;
    case mercury &#x3D; 1, venus, earth, mars, jupiter, saturn, uranus, neptune
    static subscript(n: Int) -&gt; Planet &#123;
        return Planet(rawValue: n)!
    &#125;
&#125;
let mars &#x3D; Planet[4]
print(mars)</code></pre>



<h4 id="Overriding"><a href="#Overriding" class="headerlink" title="Overriding"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/Inheritance.html#ID196">Overriding</a></h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">class Train: Vehicle &#123;
    override func makeNoise() &#123;
        print(&quot;Choo Choo&quot;)
    &#125;
&#125;</code></pre>

<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">class Car: Vehicle &#123;
    var gear &#x3D; 1
    override var description: String &#123;
        return super.description + &quot; in gear \(gear)&quot;
    &#125;
&#125;</code></pre>

<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">class AutomaticCar: Car &#123;
    override var currentSpeed: Double &#123;
        didSet &#123;
            gear &#x3D; Int(currentSpeed &#x2F; 10.0) + 1
        &#125;
    &#125;
&#125;</code></pre>



<h4 id="Preventing-Overrides"><a href="#Preventing-Overrides" class="headerlink" title="Preventing Overrides"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/Inheritance.html#ID202">Preventing Overrides</a></h4><ul>
<li><code>final var</code></li>
<li><code>final func</code></li>
<li><code>final class func</code></li>
<li><code>final subscript</code></li>
<li><code>final class</code></li>
</ul>
<h4 id="Convenience-Initializers"><a href="#Convenience-Initializers" class="headerlink" title="Convenience Initializers"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/Initialization.html#ID218">Convenience Initializers</a></h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">convenience init(parameters) &#123;
    statements
&#125;</code></pre>



<h4 id="Required-Initializers"><a href="#Required-Initializers" class="headerlink" title="Required Initializers"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/Initialization.html#ID231">Required Initializers</a></h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">class SomeClass &#123;
    required init() &#123;
        &#x2F;&#x2F; initializer implementation goes here
    &#125;
&#125;

class SomeSubclass: SomeClass &#123;
    required init() &#123;
        &#x2F;&#x2F; subclass implementation of the required initializer goes here
    &#125;
&#125;</code></pre>



<h4 id="Setting-a-Default-Property-Value-with-a-Closure-or-Function"><a href="#Setting-a-Default-Property-Value-with-a-Closure-or-Function" class="headerlink" title="Setting a Default Property Value with a Closure or Function"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/Initialization.html#ID232">Setting a Default Property Value with a Closure or Function</a></h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">class SomeClass &#123;
    let someProperty: SomeType &#x3D; &#123;
        &#x2F;&#x2F; create a default value for someProperty inside this closure
        &#x2F;&#x2F; someValue must be of the same type as SomeType
        return someValue
    &#125;()
&#125;</code></pre>



<h4 id="Representing-and-Throwing-Errors"><a href="#Representing-and-Throwing-Errors" class="headerlink" title="Representing and Throwing Errors"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/ErrorHandling.html#ID509">Representing and Throwing Errors</a></h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">enum VendingMachineError: Error &#123;
    case invalidSelection
    case insufficientFunds(coinsNeeded: Int)
    case outOfStock
&#125;

throw VendingMachineError.insufficientFunds(coinsNeeded: 5)</code></pre>



<h4 id="Propagating-Errors-Using-Throwing-Functions"><a href="#Propagating-Errors-Using-Throwing-Functions" class="headerlink" title="Propagating Errors Using Throwing Functions"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/ErrorHandling.html#ID510">Propagating Errors Using Throwing Functions</a></h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">func canThrowErrors() throws -&gt; String &#123;
    &#x2F;&#x2F; ...
    if ... &#123;
        throw ...
    &#125;
    &#x2F;&#x2F; ...
&#125;</code></pre>



<h4 id="Handling-Errors-Using-Do-Catch"><a href="#Handling-Errors-Using-Do-Catch" class="headerlink" title="Handling Errors Using Do-Catch"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/ErrorHandling.html#ID541">Handling Errors Using Do-Catch</a></h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">do &#123;
  try canThrowAnError()
&#125; catch &#123;
  &#x2F;&#x2F; an error was thrown
&#125;</code></pre>



<h4 id="Converting-Errors-to-Optional-Values"><a href="#Converting-Errors-to-Optional-Values" class="headerlink" title="Converting Errors to Optional Values"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/ErrorHandling.html#ID542">Converting Errors to Optional Values</a></h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">func someThrowingFunction() throws -&gt; Int &#123;
    &#x2F;&#x2F; ...
&#125;

let x &#x3D; try? someThrowingFunction()

let y: Int?
do &#123;
    y &#x3D; try someThrowingFunction()
&#125; catch &#123;
    y &#x3D; nil
&#125;</code></pre>



<h4 id="Disabling-Error-Propagation"><a href="#Disabling-Error-Propagation" class="headerlink" title="Disabling Error Propagation"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/ErrorHandling.html#ID513">Disabling Error Propagation</a></h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">let photo &#x3D; try! loadImage(atPath: &quot;.&#x2F;Resources&#x2F;John Appleseed.jpg&quot;)</code></pre>



<h4 id="Specifying-Cleanup-Actions"><a href="#Specifying-Cleanup-Actions" class="headerlink" title="Specifying Cleanup Actions"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/ErrorHandling.html#ID514">Specifying Cleanup Actions</a></h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">func processFile(filename: String) throws &#123;
    if exists(filename) &#123;
        let file &#x3D; open(filename)
        defer &#123;
            close(file)
        &#125;
        while let line &#x3D; try file.readline() &#123;
            &#x2F;&#x2F; Work with the file.
        &#125;
        &#x2F;&#x2F; close(file) is called here, at the end of the scope.
    &#125;
&#125;</code></pre>



<h4 id="Defining-and-Calling-Asynchronous-Functions"><a href="#Defining-and-Calling-Asynchronous-Functions" class="headerlink" title="Defining and Calling Asynchronous Functions"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/Concurrency.html#ID639">Defining and Calling Asynchronous Functions</a></h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">func listPhotos(inGallery name: String) async -&gt; [String] &#123;
    let result &#x3D; &#x2F;&#x2F; ... some asynchronous networking code ...
    return result
&#125;</code></pre>

<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">let photoNames &#x3D; await listPhotos(inGallery: &quot;Summer Vacation&quot;)
let sortedNames &#x3D; photoNames.sorted()
let name &#x3D; sortedNames[0]
let photo &#x3D; await downloadPhoto(named: name)
show(photo)</code></pre>



<h4 id="Asynchronous-Sequences"><a href="#Asynchronous-Sequences" class="headerlink" title="Asynchronous Sequences"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/Concurrency.html#ID640">Asynchronous Sequences</a></h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">import Foundation

let handle &#x3D; FileHandle.standardInput
for try await line in handle.bytes.lines &#123;
    print(line)
&#125;</code></pre>



<h4 id="Calling-Asynchronous-Functions-in-Parallel"><a href="#Calling-Asynchronous-Functions-in-Parallel" class="headerlink" title="Calling Asynchronous Functions in Parallel"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/Concurrency.html#ID641">Calling Asynchronous Functions in Parallel</a></h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">let firstPhoto &#x3D; await downloadPhoto(named: photoNames[0])
let secondPhoto &#x3D; await downloadPhoto(named: photoNames[1])
let thirdPhoto &#x3D; await downloadPhoto(named: photoNames[2])

let photos &#x3D; [firstPhoto, secondPhoto, thirdPhoto]
show(photos)</code></pre>

<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">async let firstPhoto &#x3D; downloadPhoto(named: photoNames[0])
async let secondPhoto &#x3D; downloadPhoto(named: photoNames[1])
async let thirdPhoto &#x3D; downloadPhoto(named: photoNames[2])

let photos &#x3D; await [firstPhoto, secondPhoto, thirdPhoto]
show(photos)</code></pre>



<h4 id="Tasks-and-Task-Groups"><a href="#Tasks-and-Task-Groups" class="headerlink" title="Tasks and Task Groups"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/Concurrency.html#ID642">Tasks and Task Groups</a></h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">await withTaskGroup(of: Data.self) &#123; taskGroup in
    let photoNames &#x3D; await listPhotos(inGallery: &quot;Summer Vacation&quot;)
    for name in photoNames &#123;
        taskGroup.async &#123; await downloadPhoto(named: name) &#125;
    &#125;
&#125;</code></pre>



<h4 id="Actors"><a href="#Actors" class="headerlink" title="Actors"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/Concurrency.html#ID645">Actors</a></h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">actor TemperatureLogger &#123;
    let label: String
    var measurements: [Int]
    private(set) var max: Int

    init(label: String, measurement: Int) &#123;
        self.label &#x3D; label
        self.measurements &#x3D; [measurement]
        self.max &#x3D; measurement
    &#125;
&#125;

let logger &#x3D; TemperatureLogger(label: &quot;Outdoors&quot;, measurement: 25)
print(await logger.max)
&#x2F;&#x2F; Prints &quot;25&quot;

extension TemperatureLogger &#123;
    func update(with measurement: Int) &#123;
        measurements.append(measurement)
        if measurement &gt; max &#123;
            max &#x3D; measurement
        &#125;
    &#125;
&#125;

print(logger.max)  &#x2F;&#x2F; Error</code></pre>



<h4 id="Checking-Type"><a href="#Checking-Type" class="headerlink" title="Checking Type"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/TypeCasting.html#ID340">Checking Type</a></h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">var movieCount &#x3D; 0
var songCount &#x3D; 0

for item in library &#123;
    if item is Movie &#123;
        movieCount +&#x3D; 1
    &#125; else if item is Song &#123;
        songCount +&#x3D; 1
    &#125;
&#125;

print(&quot;Media library contains \(movieCount) movies and \(songCount) songs&quot;)
&#x2F;&#x2F; Prints &quot;Media library contains 2 movies and 3 songs&quot;</code></pre>



<h4 id="Downcasting"><a href="#Downcasting" class="headerlink" title="Downcasting"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/TypeCasting.html#ID341">Downcasting</a></h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">&#x2F;&#x2F; as?
for item in library &#123;
    if let movie &#x3D; item as? Movie &#123;
        print(&quot;Movie: \(movie.name), dir. \(movie.director)&quot;)
    &#125; else if let song &#x3D; item as? Song &#123;
        print(&quot;Song: \(song.name), by \(song.artist)&quot;)
    &#125;
&#125;


&#x2F;&#x2F; as!
let movie &#x3D; item as! Movie</code></pre>



<h4 id="Type-Casting-for-Any-and-AnyObject"><a href="#Type-Casting-for-Any-and-AnyObject" class="headerlink" title="Type Casting for Any and AnyObject"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/TypeCasting.html#ID342">Type Casting for Any and AnyObject</a></h4><p>Swift provides two special types for working with nonspecific types:</p>
<ul>
<li><code>Any</code> can represent an instance of any type at all, including function types.</li>
<li><code>AnyObject</code> can represent an instance of any class type.</li>
</ul>
<p>Use <code>Any</code> and <code>AnyObject</code> only when you explicitly need the behavior and capabilities they provide. It’s always better to be specific about the types you expect to work with in your code.</p>
<blockquote>
<p>NOTE</p>
<p>The <code>Any</code> type represents values of any type, including optional types. Swift gives you a warning if you use an optional value where a value of type <code>Any</code> is expected. If you really do need to use an optional value as an <code>Any</code> value, you can use the <code>as</code> operator to explicitly cast the optional to <code>Any</code>, as shown below.</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">var things: [Any] &#x3D; []
let optionalNumber: Int? &#x3D; 3
things.append(optionalNumber)        &#x2F;&#x2F; Warning
things.append(optionalNumber as Any) &#x2F;&#x2F; No warning</code></pre>
</blockquote>
<h4 id="Conditionally-Conforming-to-a-Protocol"><a href="#Conditionally-Conforming-to-a-Protocol" class="headerlink" title="Conditionally Conforming to a Protocol"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/Protocols.html#ID574">Conditionally Conforming to a Protocol</a></h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">extension Array: TextRepresentable where Element: TextRepresentable &#123;
    var textualDescription: String &#123;
        let itemsAsText &#x3D; self.map &#123; $0.textualDescription &#125;
        return &quot;[&quot; + itemsAsText.joined(separator: &quot;, &quot;) + &quot;]&quot;
    &#125;
&#125;
let myDice &#x3D; [d6, d12]
print(myDice.textualDescription)
&#x2F;&#x2F; Prints &quot;[A 6-sided dice, A 12-sided dice]&quot;</code></pre>



<h4 id="Protocol-Composition"><a href="#Protocol-Composition" class="headerlink" title="Protocol Composition"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/Protocols.html#ID282">Protocol Composition</a></h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">protocol Named &#123;
    var name: String &#123; get &#125;
&#125;
protocol Aged &#123;
    var age: Int &#123; get &#125;
&#125;
struct Person: Named, Aged &#123;
    var name: String
    var age: Int
&#125;
func wishHappyBirthday(to celebrator: Named &amp; Aged) &#123;
    print(&quot;Happy birthday, \(celebrator.name), you&#39;re \(celebrator.age)!&quot;)
&#125;
let birthdayPerson &#x3D; Person(name: &quot;Malcolm&quot;, age: 21)
wishHappyBirthday(to: birthdayPerson)
&#x2F;&#x2F; Prints &quot;Happy birthday, Malcolm, you&#39;re 21!&quot;</code></pre>



<h4 id="Optional-Protocol-Requirements"><a href="#Optional-Protocol-Requirements" class="headerlink" title="Optional Protocol Requirements"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/Protocols.html#ID284">Optional Protocol Requirements</a></h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">@objc protocol CounterDataSource &#123;
    @objc optional func increment(forCount count: Int) -&gt; Int
    @objc optional var fixedIncrement: Int &#123; get &#125;
&#125;</code></pre>



<h4 id="Associated-Types"><a href="#Associated-Types" class="headerlink" title="Associated Types"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/Generics.html#ID189">Associated Types</a></h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">protocol Container &#123;
  associatedtype Item
  mutating func append(_ item: Item)
  var count: Int &#123; get &#125;
  subscript(index: Int) -&gt; Item &#123; get &#125;
&#125;</code></pre>



<h4 id="Returning-an-Opaque-Type"><a href="#Returning-an-Opaque-Type" class="headerlink" title="Returning an Opaque Type"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/OpaqueTypes.html#ID614">Returning an Opaque Type</a></h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">func makeTrapezoid() -&gt; some Shape &#123;
    let top &#x3D; Triangle(size: 2)
    let middle &#x3D; Square(size: 2)
    let bottom &#x3D; FlippedShape(shape: top)
    let trapezoid &#x3D; JoinedShape(
        top: top,
        bottom: JoinedShape(top: middle, bottom: bottom)
    )
    return trapezoid
&#125;</code></pre>



<h4 id="Weak-References"><a href="#Weak-References" class="headerlink" title="Weak References"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/AutomaticReferenceCounting.html#ID53">Weak References</a></h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">class Person &#123;
    let name: String
  	init(name: String) &#123; self.name &#x3D; name &#125;
	  var apartment: Apartment?
  	deinit &#123; print(&quot;\(name) is being deinitialized&quot;) &#125;
&#125;

class Apartment &#123;
  	let unit: String
  	init(unit: String) &#123; self.unit &#x3D; unit &#125;
  	weak var tenant: Person?
  	deinit &#123; print(&quot;Apartment \(unit) is being deinitialized&quot;)&#125;
&#125;</code></pre>



<h4 id="Unowned-References"><a href="#Unowned-References" class="headerlink" title="Unowned References"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/AutomaticReferenceCounting.html#ID54">Unowned References</a></h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">class Customer &#123;
    let name: String
    var card: CreditCard?
    init(name: String) &#123;
        self.name &#x3D; name
    &#125;
    deinit &#123; print(&quot;\(name) is being deinitialized&quot;) &#125;
&#125;

class CreditCard &#123;
    let number: UInt64
    unowned let customer: Customer
    init(number: UInt64, customer: Customer) &#123;
        self.number &#x3D; number
        self.customer &#x3D; customer
    &#125;
    deinit &#123; print(&quot;Card #\(number) is being deinitialized&quot;) &#125;
&#125;

var john: Customer?
john &#x3D; Customer(name: &quot;John Appleseed&quot;)
john!.card &#x3D; CreditCard(number: 1234_5678_9012_3456, customer: john!)

john &#x3D; nil
&#x2F;&#x2F; Prints &quot;John Appleseed is being deinitialized&quot;
&#x2F;&#x2F; Prints &quot;Card #1234567890123456 is being deinitialized&quot;</code></pre>

<blockquote>
<p>NOTE</p>
<p>The examples above show how to use <em>safe</em> unowned references. Swift also provides <em>unsafe</em> unowned references for cases where you need to disable runtime safety checks—for example, for performance reasons. As with all unsafe operations, you take on the responsibility for checking that code for safety.</p>
<p>You indicate an unsafe unowned reference by writing <code>unowned(unsafe)</code>. If you try to access an unsafe unowned reference after the instance that it refers to is deallocated, your program will try to access the memory location where the instance used to be, which is an unsafe operation.</p>
</blockquote>
<h4 id="Resolving-Strong-Reference-Cycles-for-Closures"><a href="#Resolving-Strong-Reference-Cycles-for-Closures" class="headerlink" title="Resolving Strong Reference Cycles for Closures"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/AutomaticReferenceCounting.html#ID57">Resolving Strong Reference Cycles for Closures</a></h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">lazy var someClosure &#x3D; &#123;
    [unowned self, weak delegate &#x3D; self.delegate]
    (index: Int, stringToProcess: String) -&gt; String in
    &#x2F;&#x2F; closure body goes here
&#125;</code></pre>



<h4 id="Access-Control-Syntax"><a href="#Access-Control-Syntax" class="headerlink" title="Access Control Syntax"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/AccessControl.html#ID10">Access Control Syntax</a></h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">public class SomePublicClass &#123;&#125;
internal class SomeInternalClass &#123;&#125;
fileprivate class SomeFilePrivateClass &#123;&#125;
private class SomePrivateClass &#123;&#125;

public var somePublicVariable &#x3D; 0
internal let someInternalConstant &#x3D; 0
fileprivate func someFilePrivateFunction() &#123;&#125;
private func somePrivateFunction() &#123;&#125;</code></pre>

<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>编程相关</category>
        <category>Swift</category>
      </categories>
      <tags>
        <tag>swift</tag>
      </tags>
  </entry>
  <entry>
    <title>fork 同步</title>
    <url>/2020/05/13/syncing-a-fork/</url>
    <content><![CDATA[<h3 id="Configuring-a-remote-for-a-fork"><a href="#Configuring-a-remote-for-a-fork" class="headerlink" title="Configuring a remote for a fork"></a><a href="https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/configuring-a-remote-for-a-fork">Configuring a remote for a fork</a></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git remote add upstream https:&#x2F;&#x2F;github.com&#x2F;ORIGINAL_OWNER&#x2F;ORIGINAL_REPOSITORY.git</code></pre>

<h3 id="Syncing-a-fork"><a href="#Syncing-a-fork" class="headerlink" title="Syncing a fork"></a><a href="https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/syncing-a-fork">Syncing a fork</a></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git fetch upstream
git checkout master
git merge upstream&#x2F;master</code></pre>

<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>工具使用</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>fork</tag>
      </tags>
  </entry>
  <entry>
    <title>迁移 Python site-packages</title>
    <url>/2022/05/27/transfer-python-site-packages/</url>
    <content><![CDATA[<h3 id="原环境下"><a href="#原环境下" class="headerlink" title="原环境下"></a>原环境下</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 创建一个临时文件夹并 cd 至该文件夹
mkdir temp &amp;&amp; cd temp
# 将当前环境下安装的包写入 requirements.txt
pip3 freeze &gt; requirements.txt
# 将 requirements.txt 中的包下载到当前文件夹（即创建的临时文件夹）
pip3 download -r requirements.txt</code></pre>

<h3 id="迁移环境下"><a href="#迁移环境下" class="headerlink" title="迁移环境下"></a>迁移环境下</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 通过刚才创建的临时文件夹（以放到 ~&#x2F;Desktop 路径下为例）下的 .whl 文件及 requirements.txt 安装
pip3 install --no-index --find-links&#x3D;~&#x2F;Desktop&#x2F;temp -r ~&#x2F;Desktop&#x2F;temp&#x2F;requirements.txt
# 查看是否迁移成功
pip3 list
# 迁移后删除临时文件夹
rm -rf ~&#x2F;Desktop&#x2F;temp</code></pre>

<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>删除通过 pkg 安装包安装的 Python</title>
    <url>/2021/06/09/uninstall-python/</url>
    <content><![CDATA[<p>下面以 Python 3.7 版本为例：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 删除 Python 3.7 安装路径下的所有文件
$ sudo rm -rf &#x2F;Library&#x2F;Frameworks&#x2F;Python.framework&#x2F;Versions&#x2F;3.7

# 删除程序文件夹中所有 Python 3.7 相关文件
$ sudo rm -rf &#x2F;Applications&#x2F;Python\ 3.7&#x2F;

# 查看Python 3.7相关的文件和链接并删除
$ ls -l &#x2F;usr&#x2F;local&#x2F;bin&#x2F;p*
$ rm &quot;Python 3.7相关的文件和链接&quot;

# 删除配置文件（下面以 .bash_profile 为例）中 Python 3.7 相关环境变量
$ vi ~&#x2F;.bash_profile</code></pre>

<span id="more"></span>

<p>类似如下：</p>
<img src="https://image.jqz3.tech/blog/20210609164115.png?imageView2/0/q/75|watermark/2/text/aHR0cHM6Ly9qcXozLnRlY2g=/font/bWljcm9zb2Z0IHlhaGVp/fontsize/360/fill/I0ZGRkZGRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" style="zoom: 50%;" />

<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>位段与共用体</title>
    <url>/2019/08/29/union-bit-field/</url>
    <content><![CDATA[<h2 id="位段"><a href="#位段" class="headerlink" title="位段"></a>位段</h2><p>信息的存取一般以字节为单位。实际上，有时存储一个信息不必用一个或多个字节，例如，“真”或“假”用0或1表示，只需1位即可。在计算机用于过程控制、参数检测或数据通信领域时，控制信息往往只占一个字节中的一个或几个二进制位，常常在一个字节中放几个信息。</p>
<span id="more"></span>

<h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><p>位段（或称“位域”，Bit field）为一种数据结构，可以把数据以位的形式紧凑的储存，并允许程序员对此结构的位进行操作。这种数据结构的好处：</p>
<ul>
<li>可以使数据单元节省储存空间，当程序需要成千上万个数据单元时，这种方法就显得尤为重要。</li>
<li>位段可以很方便的访问一个整数值的部分内容从而可以简化程序源代码。</li>
</ul>
<p>而位域这种数据结构的缺点在于，其内存分配与内存对齐的实现方式依赖于具体的机器和系统，在不同的平台可能有不同的结果，这导致了位段在本质上是不可移植的。</p>
<h2 id="共用体"><a href="#共用体" class="headerlink" title="共用体"></a>共用体</h2><p>在进行某些算法的C语言编程的时候，需要使几种不同类型的变量存放到同一段内存单元中。也就是使用覆盖技术，几个变量互相覆盖。这种几个不同的变量共同占用一段内存的结构，在C语言中，被称作“共用体”类型结构，简称共用体，也叫联合体。</p>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><pre class="line-numbers language-objectivec" data-language="objectivec"><code class="language-objectivec">#import &lt;Foundation&#x2F;Foundation.h&gt;

@interface JQPerson : NSObject
&#123;
    @public
    union &#123;
        char bits;
        struct &#123;
            bool tall   : 1;
            bool fat    : 1;
            bool rich   : 1;
        &#125;;
    &#125; _tallFatRich;
&#125;

#define JQTallMask (1 &lt;&lt; 0)
#define JQFatMask (1 &lt;&lt; 1)
#define JQRichMask (1 &lt;&lt; 2)

@property (nonatomic, assign, getter&#x3D;isTall) BOOL tall;
@property (nonatomic, assign, getter&#x3D;isFat) BOOL fat;
@property (nonatomic, assign, getter&#x3D;isRich) BOOL rich;
@property (nonatomic, assign) BOOL handsome;

@end

@implementation JQPerson

- (BOOL)isTall &#123;
    return !!(_tallFatRich.bits &amp; JQTallMask);
&#125;

- (void)setTall:(BOOL)tall &#123;
    tall ? (_tallFatRich.bits |&#x3D; JQTallMask) : (_tallFatRich.bits &amp;&#x3D; ~JQTallMask);
&#125;

- (BOOL)isFat &#123;
    return !!(_tallFatRich.bits &amp; JQFatMask);
&#125;

- (void)setFat:(BOOL)fat &#123;
    fat ? (_tallFatRich.bits |&#x3D; JQFatMask) : (_tallFatRich.bits &amp;&#x3D; ~JQFatMask);
&#125;

- (BOOL)isRich &#123;
    return !!(_tallFatRich.bits &amp; JQRichMask);
&#125;

- (void)setRich:(BOOL)rich &#123;
    rich ? (_tallFatRich.bits |&#x3D; JQRichMask) : (_tallFatRich.bits &amp;&#x3D; ~JQRichMask);
&#125;

@end

int main(int argc, const char * argv[]) &#123;
    @autoreleasepool &#123;
        JQPerson *person &#x3D; [[JQPerson alloc] init];
        person.tall &#x3D; YES;
        person.fat &#x3D; NO;
        person.rich &#x3D; YES;
        person.handsome &#x3D; YES;
        
        NSLog(@&quot;%lu&quot;, sizeof(typeof(person-&gt;_tallFatRich)));
        &#x2F;&#x2F; 1
        NSLog(@&quot;%lu&quot;, sizeof(typeof(person.handsome)));
        &#x2F;&#x2F; 1
        
        NSLog(@&quot;\ntall:%d\nfat:%d\nrich:%d\nhandsome:%d&quot;, person.tall, person.fat, person.rich, person.handsome);
        &#x2F;&#x2F; tall:1
        &#x2F;&#x2F; fat:0
        &#x2F;&#x2F; rich:1
        &#x2F;&#x2F; handsome:1
    &#125;
    return 0;
&#125;</code></pre>

<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>编程相关</category>
      </categories>
  </entry>
  <entry>
    <title>vim 操作笔记</title>
    <url>/2019/06/10/vim/</url>
    <content><![CDATA[<h3 id="vimtutor"><a href="#vimtutor" class="headerlink" title="vimtutor"></a>vimtutor</h3><p>可以在终端执行 <code>vimtutor</code> 进入教程，如图所示：</p>
<img src="https://image.jqz3.tech/blog/20210610132442.png?imageView2/0/q/75|watermark/2/text/aHR0cHM6Ly9qcXozLnRlY2g=/font/bWljcm9zb2Z0IHlhaGVp/fontsize/360/fill/I0ZGRkZGRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" style="zoom:50%;" />

<span id="more"></span>

<h3 id="移动操作"><a href="#移动操作" class="headerlink" title="移动操作"></a>移动操作</h3><table>
<thead>
<tr>
<th align="center">操作</th>
<th align="center">指令</th>
</tr>
</thead>
<tbody><tr>
<td align="center">左下上右移动光标</td>
<td align="center">h, j, k, l</td>
</tr>
<tr>
<td align="center">以单词为单位移动光标</td>
<td align="center">2w</td>
</tr>
<tr>
<td align="center">以单词为单位移动光标至单词末尾</td>
<td align="center">2e</td>
</tr>
<tr>
<td align="center">移动光标至行首</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">移动光标至文本首行</td>
<td align="center">gg</td>
</tr>
<tr>
<td align="center">移动光标至文本末行</td>
<td align="center">G</td>
</tr>
<tr>
<td align="center">移动光标至指定行数</td>
<td align="center">233G</td>
</tr>
<tr>
<td align="center">移动光标至匹配的 ), ], }</td>
<td align="center">%</td>
</tr>
</tbody></table>
<h3 id="编辑操作"><a href="#编辑操作" class="headerlink" title="编辑操作"></a>编辑操作</h3><table>
<thead>
<tr>
<th align="center">操作</th>
<th align="center">指令</th>
</tr>
</thead>
<tbody><tr>
<td align="center">在光标处插入文本</td>
<td align="center">i</td>
</tr>
<tr>
<td align="center">在行尾追加字符</td>
<td align="center">A</td>
</tr>
<tr>
<td align="center">在词尾追加字符</td>
<td align="center">a</td>
</tr>
<tr>
<td align="center">删除光标后字符</td>
<td align="center">x</td>
</tr>
<tr>
<td align="center">从光标开始删除至下一单词前</td>
<td align="center">dw</td>
</tr>
<tr>
<td align="center">删除光标后所有文本</td>
<td align="center">d$</td>
</tr>
<tr>
<td align="center">从光标开始删除至单词末尾</td>
<td align="center">de</td>
</tr>
<tr>
<td align="center">以单词为单位从光标开始删除至指定数量单词前</td>
<td align="center">d2w</td>
</tr>
<tr>
<td align="center">以单词为单位从光标开始删除至指定数量单词末尾</td>
<td align="center">d2e</td>
</tr>
<tr>
<td align="center">删除当前整行</td>
<td align="center">dd</td>
</tr>
<tr>
<td align="center">删除指定行数</td>
<td align="center">2dd</td>
</tr>
<tr>
<td align="center">移动删除行文本至光标下一行</td>
<td align="center">p</td>
</tr>
<tr>
<td align="center">替换光标处字符</td>
<td align="center">rx</td>
</tr>
<tr>
<td align="center">替换光标后多个字符</td>
<td align="center">R</td>
</tr>
<tr>
<td align="center">从光标开始删除至指定数量单词末尾，并进入<code>INSERT</code>模式</td>
<td align="center">ce</td>
</tr>
<tr>
<td align="center">从光标开始删除至行末，并进入<code>INSERT</code>模式</td>
<td align="center">c$</td>
</tr>
<tr>
<td align="center">从光标开始删除至指定数量单词前，并进入<code>INSERT</code>模式</td>
<td align="center">c2w</td>
</tr>
<tr>
<td align="center">在光标下新增一行并进入 <code>INSERT</code> 模式</td>
<td align="center">o</td>
</tr>
<tr>
<td align="center">在光标上新增一行并进入 <code>INSERT</code> 模式</td>
<td align="center">O</td>
</tr>
<tr>
<td align="center">复制选中文本</td>
<td align="center">v    y</td>
</tr>
<tr>
<td align="center">粘贴复制文本</td>
<td align="center">p</td>
</tr>
</tbody></table>
<h3 id="搜索操作"><a href="#搜索操作" class="headerlink" title="搜索操作"></a>搜索操作</h3><table>
<thead>
<tr>
<th align="center">操作</th>
<th align="center">指令</th>
</tr>
</thead>
<tbody><tr>
<td align="center">搜索</td>
<td align="center"><code>/search_word</code>    &lt;ENTER&gt; <br /><code>(n 跳转至下一个，N 跳转至上一个)</code></td>
</tr>
<tr>
<td align="center">反方向搜索</td>
<td align="center"><code>?search_word</code>    &lt;ENTER&gt;</td>
</tr>
<tr>
<td align="center">搜索当前行并替换首个匹配文本</td>
<td align="center"><code>:s/old/new</code></td>
</tr>
<tr>
<td align="center">搜索当前行并替换所有匹配文本</td>
<td align="center"><code>:s/old/new/g</code></td>
</tr>
<tr>
<td align="center">搜索指定行范围并替换所有匹配文本</td>
<td align="center"><code>:#,#s/old/new/g</code></td>
</tr>
<tr>
<td align="center">搜索整个文件并替换所有匹配文本</td>
<td align="center"><code>:%s/old/new/g</code></td>
</tr>
<tr>
<td align="center">搜索整个文件并可选择是否替换文本</td>
<td align="center"><code>:%s/old/new/gc</code></td>
</tr>
<tr>
<td align="center">搜索时忽略大小写</td>
<td align="center"><code>:set ic</code></td>
</tr>
<tr>
<td align="center">搜索结果高亮显示</td>
<td align="center"><code>:set hls</code></td>
</tr>
<tr>
<td align="center">搜索时一边输入一边显示效果</td>
<td align="center"><code>:set is</code></td>
</tr>
<tr>
<td align="center">关闭上述设置（添加 no 前缀）</td>
<td align="center"><code>:set noic nohls nois</code></td>
</tr>
</tbody></table>
<p><code>(ic: ignorecase, hls: hlsearch, is: incsearch)</code></p>
<h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><table>
<thead>
<tr>
<th align="center">操作</th>
<th align="center">指令</th>
</tr>
</thead>
<tbody><tr>
<td align="center">退出 vim（未修改时）</td>
<td align="center">&lt;ESC&gt;     <code>:q</code>    &lt;ENTER&gt;</td>
</tr>
<tr>
<td align="center">强制退出 vim（放弃修改）</td>
<td align="center">&lt;ESC&gt;     <code>:q!</code>    &lt;ENTER&gt;</td>
</tr>
<tr>
<td align="center">保存文件并退出</td>
<td align="center">&lt;ESC&gt;    <code>:wq</code>    &lt;ENTER&gt;</td>
</tr>
<tr>
<td align="center">查看光标及文件状态</td>
<td align="center">CTRL-G</td>
</tr>
<tr>
<td align="center">另存为</td>
<td align="center"><code>:w FILENAME</code></td>
</tr>
<tr>
<td align="center">选择文本另存为</td>
<td align="center">v    <code>:&#39;&lt;,&#39;&gt;w FILENAME:</code></td>
</tr>
<tr>
<td align="center">插入其它文件文本</td>
<td align="center"><code>:r FINENAME</code></td>
</tr>
</tbody></table>
<h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><table>
<thead>
<tr>
<th align="center">操作</th>
<th align="center">指令</th>
</tr>
</thead>
<tbody><tr>
<td align="center">返回 <code>NORMAL</code> 模式</td>
<td align="center">ESC</td>
</tr>
<tr>
<td align="center">进入 <code>VISUAL</code> 模式</td>
<td align="center">v</td>
</tr>
<tr>
<td align="center">撤回上一个操作</td>
<td align="center">u</td>
</tr>
<tr>
<td align="center">撤回当前行所有编辑操作</td>
<td align="center">U</td>
</tr>
<tr>
<td align="center">撤回撤回操作</td>
<td align="center">CTRL-R</td>
</tr>
<tr>
<td align="center">执行外部指令（以 pwd 为例）</td>
<td align="center"><code>:!pwd</code>    &lt;ENTER&gt;</td>
</tr>
<tr>
<td align="center">插入指令输出文本（以 pwd 为例）</td>
<td align="center"><code>:r !pwd</code></td>
</tr>
<tr>
<td align="center">查看帮助信息</td>
<td align="center">&lt;HELP&gt; / &lt;F1&gt; / <code>:help</code></td>
</tr>
<tr>
<td align="center">查看相关帮助信息</td>
<td align="center"><code>:help w</code><br /><code>:help c_CTRL-D</code><br /><code>:help insert-index</code><br /><code>:help user-manual</code><br /><code>:help vimrc-intro</code></td>
</tr>
<tr>
<td align="center">关闭兼容模式</td>
<td align="center"><code>:set nocp</code></td>
</tr>
<tr>
<td align="center">切换窗口</td>
<td align="center">CTRL-W</td>
</tr>
<tr>
<td align="center">指令提示</td>
<td align="center">CTRL-D</td>
</tr>
</tbody></table>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>Yarn Installation</title>
    <url>/2016/10/13/yarn-installation/</url>
    <content><![CDATA[<h2 id="macOS"><a href="#macOS" class="headerlink" title="macOS"></a>macOS</h2><h3 id="Homebrew"><a href="#Homebrew" class="headerlink" title="Homebrew"></a>Homebrew</h3><p>你可以通过 <a href="http://brew.sh/">Homebrew package manager</a>，这同时会安装 Node.js 如果没有安装的话。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ brew update
$ brew install yarn</code></pre>

<h3 id="设置-Path-环境变量"><a href="#设置-Path-环境变量" class="headerlink" title="设置 Path 环境变量"></a>设置 Path 环境变量</h3><p>你需要通过你的终端设置 <code>Path</code> 环境变量，使 Yarn 的执行包可以全局访问。</p>
<p>在你的配置文件（可能是你的 <code>.profile</code>,<code>.bashrc</code>,<code>.zshrc</code>文件，等等。）里加入 <code>export PATH=&quot;$PATH:yarn global bin&quot;</code></p>
<span id="more"></span>

<h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><p>在 Windows 上有两种可选的方式来安装 Yarn。</p>
<h3 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h3><p>下载安装包你会得到一个 <code>.msi</code> 文件，运行该文件会指引你安装 Yarn。</p>
<p>如果你通过安装包安装，你需先安装 <a href="https://nodejs.org/">Node.js</a>。</p>
<p><a style="color:white; background-color:#2c8ebb; border-color:#2c8ebb; display: inline-block; font-weight: normal; line-height: 1.25;text-align: center; white-space: nowrap; vertical-align: middle; cursor: pointer; user-select: none; border: 1px solid transparent;  padding: .5rem 1rem; font-size: 1rem;  border-radius: .25rem;" href="https://yarnpkg.com/latest.msi">点击下载安装包</a></p>
<h3 id="通过-Chocolatey-安装"><a href="#通过-Chocolatey-安装" class="headerlink" title="通过 Chocolatey 安装"></a>通过 Chocolatey 安装</h3><p><a href="https://chocolatey.org/">Chocolatey</a> 是 Windows 上的包管理工具，你可以通过<a href="https://chocolatey.org/install">这里的指示</a>安装 Chocolatey.</p>
<p>如果你已经安装了 Chocolatey，你可以通过在你的命令行你运行如下代码来安装 Yarn:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">choco install yarn</code></pre>

<p>这同样得确保你已经安装了 <a href="https://nodejs.org/">Node.js</a>.</p>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>你需要清空你的文件夹以及防病毒软件里的 Yarn 缓存目录（ %LocalAppData%\Yarn ） ，否则安装包时会特别慢，因为每个文件在写入硬盘时都会被扫描。</p>
<hr>
<p>可以在终端运行如下命令测试 Yarn 是否已安装成功：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ yarn --version</code></pre>

<p>安装成功的话则会显示 Yarn 安装的版本信息：</p>
<p><img src="https://image.jqz3.tech/blog/2016-11-23-011736.jpg" alt="Yarn version"></p>
<h3 id="首先得安装-Node-js"><a href="#首先得安装-Node-js" class="headerlink" title="首先得安装 Node.js"></a>首先得安装 <a href="https://nodejs.org/">Node.js</a></h3><h3 id="最简单的通过脚本安装"><a href="#最简单的通过脚本安装" class="headerlink" title="最简单的通过脚本安装"></a>最简单的通过脚本安装</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ curl -o- -L https:&#x2F;&#x2F;yarnpkg.com&#x2F;install.sh | bash</code></pre>
<p><img src="http://ww3.sinaimg.cn/large/65e4f1e6gw1f8ql5fz45bj20fu04rq56.jpg" alt="QQ20161013-0.png"></p>
<h3 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ npm install --global yarn</code></pre>

<h3 id="Manual"><a href="#Manual" class="headerlink" title="Manual"></a>Manual</h3><p>You can install Yarn by <a href="https://yarnpkg.com/latest.tar.gz">downloading a tarball</a> and extracting it anywhere.<br><em><strong>OR</strong></em></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># install wget first
$ cd &#x2F;opt
$ wget https:&#x2F;&#x2F;yarnpkg.com&#x2F;latest.tar.gz
$ tar zvxf yarn-*.tar.gz
# Yarn is now in &#x2F;opt&#x2F;yarn-[version]&#x2F;</code></pre>

<h3 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ yarn --version</code></pre>
<p><img src="http://ww1.sinaimg.cn/large/65e4f1e6gw1f8ql84cm8fj208x00q0ss.jpg" alt="13:42:18.jpg"></p>
<h3 id="Uninstall"><a href="#Uninstall" class="headerlink" title="Uninstall"></a>Uninstall</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ rm -rf ~&#x2F;.yarn</code></pre>

<hr>
<p><a href="https://yarnpkg.com/en/docs/install">Yarn Installation</a></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>工具使用</category>
        <category>yarn</category>
      </categories>
      <tags>
        <tag>yarn</tag>
      </tags>
  </entry>
  <entry>
    <title>Yarn Usage</title>
    <url>/2016/10/13/yarn-usage/</url>
    <content><![CDATA[<h3 id="初始化一个新项目"><a href="#初始化一个新项目" class="headerlink" title="初始化一个新项目"></a>初始化一个新项目</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ yarn init</code></pre>

<h3 id="添加依赖包"><a href="#添加依赖包" class="headerlink" title="添加依赖包"></a>添加依赖包</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ yarn add [package]
$ yarn add [package]@[version]
$ yarn add [package]@[tag]</code></pre>

<span id="more"></span>

<h3 id="更新依赖包"><a href="#更新依赖包" class="headerlink" title="更新依赖包"></a>更新依赖包</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ yarn upgrade [package]
$ yarn upgrade [package]@[version]
$ yarn upgrade [package]@[tag]</code></pre>

<h3 id="移除依赖包"><a href="#移除依赖包" class="headerlink" title="移除依赖包"></a>移除依赖包</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ yarn remove [package]</code></pre>

<h3 id="安装项目的所有依赖包"><a href="#安装项目的所有依赖包" class="headerlink" title="安装项目的所有依赖包"></a>安装项目的所有依赖包</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ yarn</code></pre>
<p><em><strong>or</strong></em></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ yarn install</code></pre>

<hr>
<p><a href="https://yarnpkg.com/en/docs/usage">Yarn Usage</a></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>工具使用</category>
        <category>yarn</category>
      </categories>
      <tags>
        <tag>yarn</tag>
      </tags>
  </entry>
</search>
